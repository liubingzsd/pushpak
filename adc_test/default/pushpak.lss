
pushpak.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000222  00800100  00002358  000023ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002358  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000122  00800322  00800322  0000260e  2**0
                  ALLOC
  3 .debug_aranges 00000290  00000000  00000000  0000260e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000612  00000000  00000000  0000289e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002498  00000000  00000000  00002eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ce5  00000000  00000000  00005348  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000016c0  00000000  00000000  0000602d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  000076f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000099e  00000000  00000000  00007b10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000eb4  00000000  00000000  000084ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000250  00000000  00000000  00009362  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 41 00 	jmp	0x82	; 0x82 <__ctors_end>
       4:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       8:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
       c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      10:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      14:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      1c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      20:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      24:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      28:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      2c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      30:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      34:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      38:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      3c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      40:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      44:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      48:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      4c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      50:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      54:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      58:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      5c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      60:	0c 94 c0 0c 	jmp	0x1980	; 0x1980 <__vector_24>
      64:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      68:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      6c:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      70:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      74:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>
      78:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__bad_interrupt>

0000007c <__ctors_start>:
      7c:	6c 0b       	sbc	r22, r28
      7e:	93 10       	cpse	r9, r3
      80:	ea 10       	cpse	r14, r10

00000082 <__ctors_end>:
      82:	11 24       	eor	r1, r1
      84:	1f be       	out	0x3f, r1	; 63
      86:	cf ef       	ldi	r28, 0xFF	; 255
      88:	d0 e1       	ldi	r29, 0x10	; 16
      8a:	de bf       	out	0x3e, r29	; 62
      8c:	cd bf       	out	0x3d, r28	; 61

0000008e <__do_copy_data>:
      8e:	13 e0       	ldi	r17, 0x03	; 3
      90:	a0 e0       	ldi	r26, 0x00	; 0
      92:	b1 e0       	ldi	r27, 0x01	; 1
      94:	e8 e5       	ldi	r30, 0x58	; 88
      96:	f3 e2       	ldi	r31, 0x23	; 35
      98:	02 c0       	rjmp	.+4      	; 0x9e <.do_copy_data_start>

0000009a <.do_copy_data_loop>:
      9a:	05 90       	lpm	r0, Z+
      9c:	0d 92       	st	X+, r0

0000009e <.do_copy_data_start>:
      9e:	a2 32       	cpi	r26, 0x22	; 34
      a0:	b1 07       	cpc	r27, r17
      a2:	d9 f7       	brne	.-10     	; 0x9a <.do_copy_data_loop>

000000a4 <__do_clear_bss>:
      a4:	14 e0       	ldi	r17, 0x04	; 4
      a6:	a2 e2       	ldi	r26, 0x22	; 34
      a8:	b3 e0       	ldi	r27, 0x03	; 3
      aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
      ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
      ae:	a4 34       	cpi	r26, 0x44	; 68
      b0:	b1 07       	cpc	r27, r17
      b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>

000000b4 <__do_global_ctors>:
      b4:	10 e0       	ldi	r17, 0x00	; 0
      b6:	c2 e8       	ldi	r28, 0x82	; 130
      b8:	d0 e0       	ldi	r29, 0x00	; 0
      ba:	04 c0       	rjmp	.+8      	; 0xc4 <.do_global_ctors_start>

000000bc <.do_global_ctors_loop>:
      bc:	22 97       	sbiw	r28, 0x02	; 2
      be:	fe 01       	movw	r30, r28
      c0:	0e 94 a6 11 	call	0x234c	; 0x234c <__tablejump__>

000000c4 <.do_global_ctors_start>:
      c4:	cc 37       	cpi	r28, 0x7C	; 124
      c6:	d1 07       	cpc	r29, r17
      c8:	c9 f7       	brne	.-14     	; 0xbc <.do_global_ctors_loop>
      ca:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <main>
      ce:	0c 94 aa 11 	jmp	0x2354	; 0x2354 <_exit>

000000d2 <__bad_interrupt>:
      d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d6 <__fixunssfsi>:
      d6:	ef 92       	push	r14
      d8:	ff 92       	push	r15
      da:	0f 93       	push	r16
      dc:	1f 93       	push	r17
      de:	7b 01       	movw	r14, r22
      e0:	8c 01       	movw	r16, r24
      e2:	20 e0       	ldi	r18, 0x00	; 0
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	40 e0       	ldi	r20, 0x00	; 0
      e8:	5f e4       	ldi	r21, 0x4F	; 79
      ea:	0e 94 e7 03 	call	0x7ce	; 0x7ce <__gesf2>
      ee:	88 23       	and	r24, r24
      f0:	8c f0       	brlt	.+34     	; 0x114 <__fixunssfsi+0x3e>
      f2:	c8 01       	movw	r24, r16
      f4:	b7 01       	movw	r22, r14
      f6:	20 e0       	ldi	r18, 0x00	; 0
      f8:	30 e0       	ldi	r19, 0x00	; 0
      fa:	40 e0       	ldi	r20, 0x00	; 0
      fc:	5f e4       	ldi	r21, 0x4F	; 79
      fe:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__subsf3>
     102:	0e 94 a5 04 	call	0x94a	; 0x94a <__fixsfsi>
     106:	9b 01       	movw	r18, r22
     108:	ac 01       	movw	r20, r24
     10a:	20 50       	subi	r18, 0x00	; 0
     10c:	30 40       	sbci	r19, 0x00	; 0
     10e:	40 40       	sbci	r20, 0x00	; 0
     110:	50 48       	sbci	r21, 0x80	; 128
     112:	06 c0       	rjmp	.+12     	; 0x120 <__fixunssfsi+0x4a>
     114:	c8 01       	movw	r24, r16
     116:	b7 01       	movw	r22, r14
     118:	0e 94 a5 04 	call	0x94a	; 0x94a <__fixsfsi>
     11c:	9b 01       	movw	r18, r22
     11e:	ac 01       	movw	r20, r24
     120:	b9 01       	movw	r22, r18
     122:	ca 01       	movw	r24, r20
     124:	1f 91       	pop	r17
     126:	0f 91       	pop	r16
     128:	ff 90       	pop	r15
     12a:	ef 90       	pop	r14
     12c:	08 95       	ret

0000012e <_fpadd_parts>:
     12e:	a0 e0       	ldi	r26, 0x00	; 0
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	ed e9       	ldi	r30, 0x9D	; 157
     134:	f0 e0       	ldi	r31, 0x00	; 0
     136:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__prologue_saves__>
     13a:	dc 01       	movw	r26, r24
     13c:	2b 01       	movw	r4, r22
     13e:	fa 01       	movw	r30, r20
     140:	9c 91       	ld	r25, X
     142:	92 30       	cpi	r25, 0x02	; 2
     144:	08 f4       	brcc	.+2      	; 0x148 <_fpadd_parts+0x1a>
     146:	39 c1       	rjmp	.+626    	; 0x3ba <_fpadd_parts+0x28c>
     148:	eb 01       	movw	r28, r22
     14a:	88 81       	ld	r24, Y
     14c:	82 30       	cpi	r24, 0x02	; 2
     14e:	08 f4       	brcc	.+2      	; 0x152 <_fpadd_parts+0x24>
     150:	33 c1       	rjmp	.+614    	; 0x3b8 <_fpadd_parts+0x28a>
     152:	94 30       	cpi	r25, 0x04	; 4
     154:	69 f4       	brne	.+26     	; 0x170 <_fpadd_parts+0x42>
     156:	84 30       	cpi	r24, 0x04	; 4
     158:	09 f0       	breq	.+2      	; 0x15c <_fpadd_parts+0x2e>
     15a:	2f c1       	rjmp	.+606    	; 0x3ba <_fpadd_parts+0x28c>
     15c:	11 96       	adiw	r26, 0x01	; 1
     15e:	9c 91       	ld	r25, X
     160:	11 97       	sbiw	r26, 0x01	; 1
     162:	89 81       	ldd	r24, Y+1	; 0x01
     164:	98 17       	cp	r25, r24
     166:	09 f4       	brne	.+2      	; 0x16a <_fpadd_parts+0x3c>
     168:	28 c1       	rjmp	.+592    	; 0x3ba <_fpadd_parts+0x28c>
     16a:	a6 e0       	ldi	r26, 0x06	; 6
     16c:	b2 e0       	ldi	r27, 0x02	; 2
     16e:	25 c1       	rjmp	.+586    	; 0x3ba <_fpadd_parts+0x28c>
     170:	84 30       	cpi	r24, 0x04	; 4
     172:	09 f4       	brne	.+2      	; 0x176 <_fpadd_parts+0x48>
     174:	21 c1       	rjmp	.+578    	; 0x3b8 <_fpadd_parts+0x28a>
     176:	82 30       	cpi	r24, 0x02	; 2
     178:	a9 f4       	brne	.+42     	; 0x1a4 <_fpadd_parts+0x76>
     17a:	92 30       	cpi	r25, 0x02	; 2
     17c:	09 f0       	breq	.+2      	; 0x180 <_fpadd_parts+0x52>
     17e:	1d c1       	rjmp	.+570    	; 0x3ba <_fpadd_parts+0x28c>
     180:	9a 01       	movw	r18, r20
     182:	ad 01       	movw	r20, r26
     184:	88 e0       	ldi	r24, 0x08	; 8
     186:	ea 01       	movw	r28, r20
     188:	09 90       	ld	r0, Y+
     18a:	ae 01       	movw	r20, r28
     18c:	e9 01       	movw	r28, r18
     18e:	09 92       	st	Y+, r0
     190:	9e 01       	movw	r18, r28
     192:	81 50       	subi	r24, 0x01	; 1
     194:	c1 f7       	brne	.-16     	; 0x186 <_fpadd_parts+0x58>
     196:	e2 01       	movw	r28, r4
     198:	89 81       	ldd	r24, Y+1	; 0x01
     19a:	11 96       	adiw	r26, 0x01	; 1
     19c:	9c 91       	ld	r25, X
     19e:	89 23       	and	r24, r25
     1a0:	81 83       	std	Z+1, r24	; 0x01
     1a2:	08 c1       	rjmp	.+528    	; 0x3b4 <_fpadd_parts+0x286>
     1a4:	92 30       	cpi	r25, 0x02	; 2
     1a6:	09 f4       	brne	.+2      	; 0x1aa <_fpadd_parts+0x7c>
     1a8:	07 c1       	rjmp	.+526    	; 0x3b8 <_fpadd_parts+0x28a>
     1aa:	12 96       	adiw	r26, 0x02	; 2
     1ac:	2d 90       	ld	r2, X+
     1ae:	3c 90       	ld	r3, X
     1b0:	13 97       	sbiw	r26, 0x03	; 3
     1b2:	eb 01       	movw	r28, r22
     1b4:	8a 81       	ldd	r24, Y+2	; 0x02
     1b6:	9b 81       	ldd	r25, Y+3	; 0x03
     1b8:	14 96       	adiw	r26, 0x04	; 4
     1ba:	ad 90       	ld	r10, X+
     1bc:	bd 90       	ld	r11, X+
     1be:	cd 90       	ld	r12, X+
     1c0:	dc 90       	ld	r13, X
     1c2:	17 97       	sbiw	r26, 0x07	; 7
     1c4:	ec 80       	ldd	r14, Y+4	; 0x04
     1c6:	fd 80       	ldd	r15, Y+5	; 0x05
     1c8:	0e 81       	ldd	r16, Y+6	; 0x06
     1ca:	1f 81       	ldd	r17, Y+7	; 0x07
     1cc:	91 01       	movw	r18, r2
     1ce:	28 1b       	sub	r18, r24
     1d0:	39 0b       	sbc	r19, r25
     1d2:	b9 01       	movw	r22, r18
     1d4:	37 ff       	sbrs	r19, 7
     1d6:	04 c0       	rjmp	.+8      	; 0x1e0 <_fpadd_parts+0xb2>
     1d8:	66 27       	eor	r22, r22
     1da:	77 27       	eor	r23, r23
     1dc:	62 1b       	sub	r22, r18
     1de:	73 0b       	sbc	r23, r19
     1e0:	60 32       	cpi	r22, 0x20	; 32
     1e2:	71 05       	cpc	r23, r1
     1e4:	0c f0       	brlt	.+2      	; 0x1e8 <_fpadd_parts+0xba>
     1e6:	61 c0       	rjmp	.+194    	; 0x2aa <_fpadd_parts+0x17c>
     1e8:	12 16       	cp	r1, r18
     1ea:	13 06       	cpc	r1, r19
     1ec:	6c f5       	brge	.+90     	; 0x248 <_fpadd_parts+0x11a>
     1ee:	37 01       	movw	r6, r14
     1f0:	48 01       	movw	r8, r16
     1f2:	06 2e       	mov	r0, r22
     1f4:	04 c0       	rjmp	.+8      	; 0x1fe <_fpadd_parts+0xd0>
     1f6:	96 94       	lsr	r9
     1f8:	87 94       	ror	r8
     1fa:	77 94       	ror	r7
     1fc:	67 94       	ror	r6
     1fe:	0a 94       	dec	r0
     200:	d2 f7       	brpl	.-12     	; 0x1f6 <_fpadd_parts+0xc8>
     202:	21 e0       	ldi	r18, 0x01	; 1
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	40 e0       	ldi	r20, 0x00	; 0
     208:	50 e0       	ldi	r21, 0x00	; 0
     20a:	04 c0       	rjmp	.+8      	; 0x214 <_fpadd_parts+0xe6>
     20c:	22 0f       	add	r18, r18
     20e:	33 1f       	adc	r19, r19
     210:	44 1f       	adc	r20, r20
     212:	55 1f       	adc	r21, r21
     214:	6a 95       	dec	r22
     216:	d2 f7       	brpl	.-12     	; 0x20c <_fpadd_parts+0xde>
     218:	21 50       	subi	r18, 0x01	; 1
     21a:	30 40       	sbci	r19, 0x00	; 0
     21c:	40 40       	sbci	r20, 0x00	; 0
     21e:	50 40       	sbci	r21, 0x00	; 0
     220:	2e 21       	and	r18, r14
     222:	3f 21       	and	r19, r15
     224:	40 23       	and	r20, r16
     226:	51 23       	and	r21, r17
     228:	21 15       	cp	r18, r1
     22a:	31 05       	cpc	r19, r1
     22c:	41 05       	cpc	r20, r1
     22e:	51 05       	cpc	r21, r1
     230:	21 f0       	breq	.+8      	; 0x23a <_fpadd_parts+0x10c>
     232:	21 e0       	ldi	r18, 0x01	; 1
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	40 e0       	ldi	r20, 0x00	; 0
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	79 01       	movw	r14, r18
     23c:	8a 01       	movw	r16, r20
     23e:	e6 28       	or	r14, r6
     240:	f7 28       	or	r15, r7
     242:	08 29       	or	r16, r8
     244:	19 29       	or	r17, r9
     246:	3c c0       	rjmp	.+120    	; 0x2c0 <_fpadd_parts+0x192>
     248:	23 2b       	or	r18, r19
     24a:	d1 f1       	breq	.+116    	; 0x2c0 <_fpadd_parts+0x192>
     24c:	26 0e       	add	r2, r22
     24e:	37 1e       	adc	r3, r23
     250:	35 01       	movw	r6, r10
     252:	46 01       	movw	r8, r12
     254:	06 2e       	mov	r0, r22
     256:	04 c0       	rjmp	.+8      	; 0x260 <_fpadd_parts+0x132>
     258:	96 94       	lsr	r9
     25a:	87 94       	ror	r8
     25c:	77 94       	ror	r7
     25e:	67 94       	ror	r6
     260:	0a 94       	dec	r0
     262:	d2 f7       	brpl	.-12     	; 0x258 <_fpadd_parts+0x12a>
     264:	21 e0       	ldi	r18, 0x01	; 1
     266:	30 e0       	ldi	r19, 0x00	; 0
     268:	40 e0       	ldi	r20, 0x00	; 0
     26a:	50 e0       	ldi	r21, 0x00	; 0
     26c:	04 c0       	rjmp	.+8      	; 0x276 <_fpadd_parts+0x148>
     26e:	22 0f       	add	r18, r18
     270:	33 1f       	adc	r19, r19
     272:	44 1f       	adc	r20, r20
     274:	55 1f       	adc	r21, r21
     276:	6a 95       	dec	r22
     278:	d2 f7       	brpl	.-12     	; 0x26e <_fpadd_parts+0x140>
     27a:	21 50       	subi	r18, 0x01	; 1
     27c:	30 40       	sbci	r19, 0x00	; 0
     27e:	40 40       	sbci	r20, 0x00	; 0
     280:	50 40       	sbci	r21, 0x00	; 0
     282:	2a 21       	and	r18, r10
     284:	3b 21       	and	r19, r11
     286:	4c 21       	and	r20, r12
     288:	5d 21       	and	r21, r13
     28a:	21 15       	cp	r18, r1
     28c:	31 05       	cpc	r19, r1
     28e:	41 05       	cpc	r20, r1
     290:	51 05       	cpc	r21, r1
     292:	21 f0       	breq	.+8      	; 0x29c <_fpadd_parts+0x16e>
     294:	21 e0       	ldi	r18, 0x01	; 1
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e0       	ldi	r20, 0x00	; 0
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	59 01       	movw	r10, r18
     29e:	6a 01       	movw	r12, r20
     2a0:	a6 28       	or	r10, r6
     2a2:	b7 28       	or	r11, r7
     2a4:	c8 28       	or	r12, r8
     2a6:	d9 28       	or	r13, r9
     2a8:	0b c0       	rjmp	.+22     	; 0x2c0 <_fpadd_parts+0x192>
     2aa:	82 15       	cp	r24, r2
     2ac:	93 05       	cpc	r25, r3
     2ae:	2c f0       	brlt	.+10     	; 0x2ba <_fpadd_parts+0x18c>
     2b0:	1c 01       	movw	r2, r24
     2b2:	aa 24       	eor	r10, r10
     2b4:	bb 24       	eor	r11, r11
     2b6:	65 01       	movw	r12, r10
     2b8:	03 c0       	rjmp	.+6      	; 0x2c0 <_fpadd_parts+0x192>
     2ba:	ee 24       	eor	r14, r14
     2bc:	ff 24       	eor	r15, r15
     2be:	87 01       	movw	r16, r14
     2c0:	11 96       	adiw	r26, 0x01	; 1
     2c2:	9c 91       	ld	r25, X
     2c4:	d2 01       	movw	r26, r4
     2c6:	11 96       	adiw	r26, 0x01	; 1
     2c8:	8c 91       	ld	r24, X
     2ca:	98 17       	cp	r25, r24
     2cc:	09 f4       	brne	.+2      	; 0x2d0 <_fpadd_parts+0x1a2>
     2ce:	45 c0       	rjmp	.+138    	; 0x35a <_fpadd_parts+0x22c>
     2d0:	99 23       	and	r25, r25
     2d2:	39 f0       	breq	.+14     	; 0x2e2 <_fpadd_parts+0x1b4>
     2d4:	a8 01       	movw	r20, r16
     2d6:	97 01       	movw	r18, r14
     2d8:	2a 19       	sub	r18, r10
     2da:	3b 09       	sbc	r19, r11
     2dc:	4c 09       	sbc	r20, r12
     2de:	5d 09       	sbc	r21, r13
     2e0:	06 c0       	rjmp	.+12     	; 0x2ee <_fpadd_parts+0x1c0>
     2e2:	a6 01       	movw	r20, r12
     2e4:	95 01       	movw	r18, r10
     2e6:	2e 19       	sub	r18, r14
     2e8:	3f 09       	sbc	r19, r15
     2ea:	40 0b       	sbc	r20, r16
     2ec:	51 0b       	sbc	r21, r17
     2ee:	57 fd       	sbrc	r21, 7
     2f0:	08 c0       	rjmp	.+16     	; 0x302 <_fpadd_parts+0x1d4>
     2f2:	11 82       	std	Z+1, r1	; 0x01
     2f4:	33 82       	std	Z+3, r3	; 0x03
     2f6:	22 82       	std	Z+2, r2	; 0x02
     2f8:	24 83       	std	Z+4, r18	; 0x04
     2fa:	35 83       	std	Z+5, r19	; 0x05
     2fc:	46 83       	std	Z+6, r20	; 0x06
     2fe:	57 83       	std	Z+7, r21	; 0x07
     300:	1d c0       	rjmp	.+58     	; 0x33c <_fpadd_parts+0x20e>
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	81 83       	std	Z+1, r24	; 0x01
     306:	33 82       	std	Z+3, r3	; 0x03
     308:	22 82       	std	Z+2, r2	; 0x02
     30a:	88 27       	eor	r24, r24
     30c:	99 27       	eor	r25, r25
     30e:	dc 01       	movw	r26, r24
     310:	82 1b       	sub	r24, r18
     312:	93 0b       	sbc	r25, r19
     314:	a4 0b       	sbc	r26, r20
     316:	b5 0b       	sbc	r27, r21
     318:	84 83       	std	Z+4, r24	; 0x04
     31a:	95 83       	std	Z+5, r25	; 0x05
     31c:	a6 83       	std	Z+6, r26	; 0x06
     31e:	b7 83       	std	Z+7, r27	; 0x07
     320:	0d c0       	rjmp	.+26     	; 0x33c <_fpadd_parts+0x20e>
     322:	22 0f       	add	r18, r18
     324:	33 1f       	adc	r19, r19
     326:	44 1f       	adc	r20, r20
     328:	55 1f       	adc	r21, r21
     32a:	24 83       	std	Z+4, r18	; 0x04
     32c:	35 83       	std	Z+5, r19	; 0x05
     32e:	46 83       	std	Z+6, r20	; 0x06
     330:	57 83       	std	Z+7, r21	; 0x07
     332:	82 81       	ldd	r24, Z+2	; 0x02
     334:	93 81       	ldd	r25, Z+3	; 0x03
     336:	01 97       	sbiw	r24, 0x01	; 1
     338:	93 83       	std	Z+3, r25	; 0x03
     33a:	82 83       	std	Z+2, r24	; 0x02
     33c:	24 81       	ldd	r18, Z+4	; 0x04
     33e:	35 81       	ldd	r19, Z+5	; 0x05
     340:	46 81       	ldd	r20, Z+6	; 0x06
     342:	57 81       	ldd	r21, Z+7	; 0x07
     344:	da 01       	movw	r26, r20
     346:	c9 01       	movw	r24, r18
     348:	01 97       	sbiw	r24, 0x01	; 1
     34a:	a1 09       	sbc	r26, r1
     34c:	b1 09       	sbc	r27, r1
     34e:	8f 5f       	subi	r24, 0xFF	; 255
     350:	9f 4f       	sbci	r25, 0xFF	; 255
     352:	af 4f       	sbci	r26, 0xFF	; 255
     354:	bf 43       	sbci	r27, 0x3F	; 63
     356:	28 f3       	brcs	.-54     	; 0x322 <_fpadd_parts+0x1f4>
     358:	0b c0       	rjmp	.+22     	; 0x370 <_fpadd_parts+0x242>
     35a:	91 83       	std	Z+1, r25	; 0x01
     35c:	33 82       	std	Z+3, r3	; 0x03
     35e:	22 82       	std	Z+2, r2	; 0x02
     360:	ea 0c       	add	r14, r10
     362:	fb 1c       	adc	r15, r11
     364:	0c 1d       	adc	r16, r12
     366:	1d 1d       	adc	r17, r13
     368:	e4 82       	std	Z+4, r14	; 0x04
     36a:	f5 82       	std	Z+5, r15	; 0x05
     36c:	06 83       	std	Z+6, r16	; 0x06
     36e:	17 83       	std	Z+7, r17	; 0x07
     370:	83 e0       	ldi	r24, 0x03	; 3
     372:	80 83       	st	Z, r24
     374:	24 81       	ldd	r18, Z+4	; 0x04
     376:	35 81       	ldd	r19, Z+5	; 0x05
     378:	46 81       	ldd	r20, Z+6	; 0x06
     37a:	57 81       	ldd	r21, Z+7	; 0x07
     37c:	57 ff       	sbrs	r21, 7
     37e:	1a c0       	rjmp	.+52     	; 0x3b4 <_fpadd_parts+0x286>
     380:	c9 01       	movw	r24, r18
     382:	aa 27       	eor	r26, r26
     384:	97 fd       	sbrc	r25, 7
     386:	a0 95       	com	r26
     388:	ba 2f       	mov	r27, r26
     38a:	81 70       	andi	r24, 0x01	; 1
     38c:	90 70       	andi	r25, 0x00	; 0
     38e:	a0 70       	andi	r26, 0x00	; 0
     390:	b0 70       	andi	r27, 0x00	; 0
     392:	56 95       	lsr	r21
     394:	47 95       	ror	r20
     396:	37 95       	ror	r19
     398:	27 95       	ror	r18
     39a:	82 2b       	or	r24, r18
     39c:	93 2b       	or	r25, r19
     39e:	a4 2b       	or	r26, r20
     3a0:	b5 2b       	or	r27, r21
     3a2:	84 83       	std	Z+4, r24	; 0x04
     3a4:	95 83       	std	Z+5, r25	; 0x05
     3a6:	a6 83       	std	Z+6, r26	; 0x06
     3a8:	b7 83       	std	Z+7, r27	; 0x07
     3aa:	82 81       	ldd	r24, Z+2	; 0x02
     3ac:	93 81       	ldd	r25, Z+3	; 0x03
     3ae:	01 96       	adiw	r24, 0x01	; 1
     3b0:	93 83       	std	Z+3, r25	; 0x03
     3b2:	82 83       	std	Z+2, r24	; 0x02
     3b4:	df 01       	movw	r26, r30
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <_fpadd_parts+0x28c>
     3b8:	d2 01       	movw	r26, r4
     3ba:	cd 01       	movw	r24, r26
     3bc:	cd b7       	in	r28, 0x3d	; 61
     3be:	de b7       	in	r29, 0x3e	; 62
     3c0:	e2 e1       	ldi	r30, 0x12	; 18
     3c2:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__epilogue_restores__>

000003c6 <__subsf3>:
     3c6:	a0 e2       	ldi	r26, 0x20	; 32
     3c8:	b0 e0       	ldi	r27, 0x00	; 0
     3ca:	e9 ee       	ldi	r30, 0xE9	; 233
     3cc:	f1 e0       	ldi	r31, 0x01	; 1
     3ce:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__prologue_saves__+0x18>
     3d2:	69 83       	std	Y+1, r22	; 0x01
     3d4:	7a 83       	std	Y+2, r23	; 0x02
     3d6:	8b 83       	std	Y+3, r24	; 0x03
     3d8:	9c 83       	std	Y+4, r25	; 0x04
     3da:	2d 83       	std	Y+5, r18	; 0x05
     3dc:	3e 83       	std	Y+6, r19	; 0x06
     3de:	4f 83       	std	Y+7, r20	; 0x07
     3e0:	58 87       	std	Y+8, r21	; 0x08
     3e2:	e9 e0       	ldi	r30, 0x09	; 9
     3e4:	ee 2e       	mov	r14, r30
     3e6:	f1 2c       	mov	r15, r1
     3e8:	ec 0e       	add	r14, r28
     3ea:	fd 1e       	adc	r15, r29
     3ec:	ce 01       	movw	r24, r28
     3ee:	01 96       	adiw	r24, 0x01	; 1
     3f0:	b7 01       	movw	r22, r14
     3f2:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     3f6:	8e 01       	movw	r16, r28
     3f8:	0f 5e       	subi	r16, 0xEF	; 239
     3fa:	1f 4f       	sbci	r17, 0xFF	; 255
     3fc:	ce 01       	movw	r24, r28
     3fe:	05 96       	adiw	r24, 0x05	; 5
     400:	b8 01       	movw	r22, r16
     402:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     406:	8a 89       	ldd	r24, Y+18	; 0x12
     408:	91 e0       	ldi	r25, 0x01	; 1
     40a:	89 27       	eor	r24, r25
     40c:	8a 8b       	std	Y+18, r24	; 0x12
     40e:	c7 01       	movw	r24, r14
     410:	b8 01       	movw	r22, r16
     412:	ae 01       	movw	r20, r28
     414:	47 5e       	subi	r20, 0xE7	; 231
     416:	5f 4f       	sbci	r21, 0xFF	; 255
     418:	0e 94 97 00 	call	0x12e	; 0x12e <_fpadd_parts>
     41c:	0e 94 c1 05 	call	0xb82	; 0xb82 <__pack_f>
     420:	a0 96       	adiw	r28, 0x20	; 32
     422:	e6 e0       	ldi	r30, 0x06	; 6
     424:	0c 94 95 11 	jmp	0x232a	; 0x232a <__epilogue_restores__+0x18>

00000428 <__addsf3>:
     428:	a0 e2       	ldi	r26, 0x20	; 32
     42a:	b0 e0       	ldi	r27, 0x00	; 0
     42c:	ea e1       	ldi	r30, 0x1A	; 26
     42e:	f2 e0       	ldi	r31, 0x02	; 2
     430:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__prologue_saves__+0x18>
     434:	69 83       	std	Y+1, r22	; 0x01
     436:	7a 83       	std	Y+2, r23	; 0x02
     438:	8b 83       	std	Y+3, r24	; 0x03
     43a:	9c 83       	std	Y+4, r25	; 0x04
     43c:	2d 83       	std	Y+5, r18	; 0x05
     43e:	3e 83       	std	Y+6, r19	; 0x06
     440:	4f 83       	std	Y+7, r20	; 0x07
     442:	58 87       	std	Y+8, r21	; 0x08
     444:	f9 e0       	ldi	r31, 0x09	; 9
     446:	ef 2e       	mov	r14, r31
     448:	f1 2c       	mov	r15, r1
     44a:	ec 0e       	add	r14, r28
     44c:	fd 1e       	adc	r15, r29
     44e:	ce 01       	movw	r24, r28
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	b7 01       	movw	r22, r14
     454:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     458:	8e 01       	movw	r16, r28
     45a:	0f 5e       	subi	r16, 0xEF	; 239
     45c:	1f 4f       	sbci	r17, 0xFF	; 255
     45e:	ce 01       	movw	r24, r28
     460:	05 96       	adiw	r24, 0x05	; 5
     462:	b8 01       	movw	r22, r16
     464:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     468:	c7 01       	movw	r24, r14
     46a:	b8 01       	movw	r22, r16
     46c:	ae 01       	movw	r20, r28
     46e:	47 5e       	subi	r20, 0xE7	; 231
     470:	5f 4f       	sbci	r21, 0xFF	; 255
     472:	0e 94 97 00 	call	0x12e	; 0x12e <_fpadd_parts>
     476:	0e 94 c1 05 	call	0xb82	; 0xb82 <__pack_f>
     47a:	a0 96       	adiw	r28, 0x20	; 32
     47c:	e6 e0       	ldi	r30, 0x06	; 6
     47e:	0c 94 95 11 	jmp	0x232a	; 0x232a <__epilogue_restores__+0x18>

00000482 <__mulsf3>:
     482:	a0 e2       	ldi	r26, 0x20	; 32
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	e7 e4       	ldi	r30, 0x47	; 71
     488:	f2 e0       	ldi	r31, 0x02	; 2
     48a:	0c 94 6d 11 	jmp	0x22da	; 0x22da <__prologue_saves__>
     48e:	69 83       	std	Y+1, r22	; 0x01
     490:	7a 83       	std	Y+2, r23	; 0x02
     492:	8b 83       	std	Y+3, r24	; 0x03
     494:	9c 83       	std	Y+4, r25	; 0x04
     496:	2d 83       	std	Y+5, r18	; 0x05
     498:	3e 83       	std	Y+6, r19	; 0x06
     49a:	4f 83       	std	Y+7, r20	; 0x07
     49c:	58 87       	std	Y+8, r21	; 0x08
     49e:	ce 01       	movw	r24, r28
     4a0:	01 96       	adiw	r24, 0x01	; 1
     4a2:	be 01       	movw	r22, r28
     4a4:	67 5f       	subi	r22, 0xF7	; 247
     4a6:	7f 4f       	sbci	r23, 0xFF	; 255
     4a8:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     4ac:	ce 01       	movw	r24, r28
     4ae:	05 96       	adiw	r24, 0x05	; 5
     4b0:	be 01       	movw	r22, r28
     4b2:	6f 5e       	subi	r22, 0xEF	; 239
     4b4:	7f 4f       	sbci	r23, 0xFF	; 255
     4b6:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     4ba:	99 85       	ldd	r25, Y+9	; 0x09
     4bc:	92 30       	cpi	r25, 0x02	; 2
     4be:	88 f0       	brcs	.+34     	; 0x4e2 <__mulsf3+0x60>
     4c0:	89 89       	ldd	r24, Y+17	; 0x11
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	c8 f0       	brcs	.+50     	; 0x4f8 <__mulsf3+0x76>
     4c6:	94 30       	cpi	r25, 0x04	; 4
     4c8:	19 f4       	brne	.+6      	; 0x4d0 <__mulsf3+0x4e>
     4ca:	82 30       	cpi	r24, 0x02	; 2
     4cc:	51 f4       	brne	.+20     	; 0x4e2 <__mulsf3+0x60>
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <__mulsf3+0x56>
     4d0:	84 30       	cpi	r24, 0x04	; 4
     4d2:	29 f4       	brne	.+10     	; 0x4de <__mulsf3+0x5c>
     4d4:	92 30       	cpi	r25, 0x02	; 2
     4d6:	81 f4       	brne	.+32     	; 0x4f8 <__mulsf3+0x76>
     4d8:	86 e0       	ldi	r24, 0x06	; 6
     4da:	92 e0       	ldi	r25, 0x02	; 2
     4dc:	c6 c0       	rjmp	.+396    	; 0x66a <__mulsf3+0x1e8>
     4de:	92 30       	cpi	r25, 0x02	; 2
     4e0:	49 f4       	brne	.+18     	; 0x4f4 <__mulsf3+0x72>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     4e6:	8a 89       	ldd	r24, Y+18	; 0x12
     4e8:	98 13       	cpse	r25, r24
     4ea:	21 e0       	ldi	r18, 0x01	; 1
     4ec:	2a 87       	std	Y+10, r18	; 0x0a
     4ee:	ce 01       	movw	r24, r28
     4f0:	09 96       	adiw	r24, 0x09	; 9
     4f2:	bb c0       	rjmp	.+374    	; 0x66a <__mulsf3+0x1e8>
     4f4:	82 30       	cpi	r24, 0x02	; 2
     4f6:	49 f4       	brne	.+18     	; 0x50a <__mulsf3+0x88>
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	9a 85       	ldd	r25, Y+10	; 0x0a
     4fc:	8a 89       	ldd	r24, Y+18	; 0x12
     4fe:	98 13       	cpse	r25, r24
     500:	21 e0       	ldi	r18, 0x01	; 1
     502:	2a 8b       	std	Y+18, r18	; 0x12
     504:	ce 01       	movw	r24, r28
     506:	41 96       	adiw	r24, 0x11	; 17
     508:	b0 c0       	rjmp	.+352    	; 0x66a <__mulsf3+0x1e8>
     50a:	2d 84       	ldd	r2, Y+13	; 0x0d
     50c:	3e 84       	ldd	r3, Y+14	; 0x0e
     50e:	4f 84       	ldd	r4, Y+15	; 0x0f
     510:	58 88       	ldd	r5, Y+16	; 0x10
     512:	6d 88       	ldd	r6, Y+21	; 0x15
     514:	7e 88       	ldd	r7, Y+22	; 0x16
     516:	8f 88       	ldd	r8, Y+23	; 0x17
     518:	98 8c       	ldd	r9, Y+24	; 0x18
     51a:	ee 24       	eor	r14, r14
     51c:	ff 24       	eor	r15, r15
     51e:	87 01       	movw	r16, r14
     520:	aa 24       	eor	r10, r10
     522:	bb 24       	eor	r11, r11
     524:	65 01       	movw	r12, r10
     526:	40 e0       	ldi	r20, 0x00	; 0
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	60 e0       	ldi	r22, 0x00	; 0
     52c:	70 e0       	ldi	r23, 0x00	; 0
     52e:	e0 e0       	ldi	r30, 0x00	; 0
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	c1 01       	movw	r24, r2
     534:	81 70       	andi	r24, 0x01	; 1
     536:	90 70       	andi	r25, 0x00	; 0
     538:	89 2b       	or	r24, r25
     53a:	e9 f0       	breq	.+58     	; 0x576 <__mulsf3+0xf4>
     53c:	e6 0c       	add	r14, r6
     53e:	f7 1c       	adc	r15, r7
     540:	08 1d       	adc	r16, r8
     542:	19 1d       	adc	r17, r9
     544:	9a 01       	movw	r18, r20
     546:	ab 01       	movw	r20, r22
     548:	2a 0d       	add	r18, r10
     54a:	3b 1d       	adc	r19, r11
     54c:	4c 1d       	adc	r20, r12
     54e:	5d 1d       	adc	r21, r13
     550:	80 e0       	ldi	r24, 0x00	; 0
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	a0 e0       	ldi	r26, 0x00	; 0
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	e6 14       	cp	r14, r6
     55a:	f7 04       	cpc	r15, r7
     55c:	08 05       	cpc	r16, r8
     55e:	19 05       	cpc	r17, r9
     560:	20 f4       	brcc	.+8      	; 0x56a <__mulsf3+0xe8>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	a0 e0       	ldi	r26, 0x00	; 0
     568:	b0 e0       	ldi	r27, 0x00	; 0
     56a:	ba 01       	movw	r22, r20
     56c:	a9 01       	movw	r20, r18
     56e:	48 0f       	add	r20, r24
     570:	59 1f       	adc	r21, r25
     572:	6a 1f       	adc	r22, r26
     574:	7b 1f       	adc	r23, r27
     576:	aa 0c       	add	r10, r10
     578:	bb 1c       	adc	r11, r11
     57a:	cc 1c       	adc	r12, r12
     57c:	dd 1c       	adc	r13, r13
     57e:	97 fe       	sbrs	r9, 7
     580:	08 c0       	rjmp	.+16     	; 0x592 <__mulsf3+0x110>
     582:	81 e0       	ldi	r24, 0x01	; 1
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	a0 e0       	ldi	r26, 0x00	; 0
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	a8 2a       	or	r10, r24
     58c:	b9 2a       	or	r11, r25
     58e:	ca 2a       	or	r12, r26
     590:	db 2a       	or	r13, r27
     592:	31 96       	adiw	r30, 0x01	; 1
     594:	e0 32       	cpi	r30, 0x20	; 32
     596:	f1 05       	cpc	r31, r1
     598:	49 f0       	breq	.+18     	; 0x5ac <__mulsf3+0x12a>
     59a:	66 0c       	add	r6, r6
     59c:	77 1c       	adc	r7, r7
     59e:	88 1c       	adc	r8, r8
     5a0:	99 1c       	adc	r9, r9
     5a2:	56 94       	lsr	r5
     5a4:	47 94       	ror	r4
     5a6:	37 94       	ror	r3
     5a8:	27 94       	ror	r2
     5aa:	c3 cf       	rjmp	.-122    	; 0x532 <__mulsf3+0xb0>
     5ac:	fa 85       	ldd	r31, Y+10	; 0x0a
     5ae:	ea 89       	ldd	r30, Y+18	; 0x12
     5b0:	2b 89       	ldd	r18, Y+19	; 0x13
     5b2:	3c 89       	ldd	r19, Y+20	; 0x14
     5b4:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b6:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b8:	28 0f       	add	r18, r24
     5ba:	39 1f       	adc	r19, r25
     5bc:	2e 5f       	subi	r18, 0xFE	; 254
     5be:	3f 4f       	sbci	r19, 0xFF	; 255
     5c0:	17 c0       	rjmp	.+46     	; 0x5f0 <__mulsf3+0x16e>
     5c2:	ca 01       	movw	r24, r20
     5c4:	81 70       	andi	r24, 0x01	; 1
     5c6:	90 70       	andi	r25, 0x00	; 0
     5c8:	89 2b       	or	r24, r25
     5ca:	61 f0       	breq	.+24     	; 0x5e4 <__mulsf3+0x162>
     5cc:	16 95       	lsr	r17
     5ce:	07 95       	ror	r16
     5d0:	f7 94       	ror	r15
     5d2:	e7 94       	ror	r14
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	a0 e0       	ldi	r26, 0x00	; 0
     5da:	b0 e8       	ldi	r27, 0x80	; 128
     5dc:	e8 2a       	or	r14, r24
     5de:	f9 2a       	or	r15, r25
     5e0:	0a 2b       	or	r16, r26
     5e2:	1b 2b       	or	r17, r27
     5e4:	76 95       	lsr	r23
     5e6:	67 95       	ror	r22
     5e8:	57 95       	ror	r21
     5ea:	47 95       	ror	r20
     5ec:	2f 5f       	subi	r18, 0xFF	; 255
     5ee:	3f 4f       	sbci	r19, 0xFF	; 255
     5f0:	77 fd       	sbrc	r23, 7
     5f2:	e7 cf       	rjmp	.-50     	; 0x5c2 <__mulsf3+0x140>
     5f4:	0c c0       	rjmp	.+24     	; 0x60e <__mulsf3+0x18c>
     5f6:	44 0f       	add	r20, r20
     5f8:	55 1f       	adc	r21, r21
     5fa:	66 1f       	adc	r22, r22
     5fc:	77 1f       	adc	r23, r23
     5fe:	17 fd       	sbrc	r17, 7
     600:	41 60       	ori	r20, 0x01	; 1
     602:	ee 0c       	add	r14, r14
     604:	ff 1c       	adc	r15, r15
     606:	00 1f       	adc	r16, r16
     608:	11 1f       	adc	r17, r17
     60a:	21 50       	subi	r18, 0x01	; 1
     60c:	30 40       	sbci	r19, 0x00	; 0
     60e:	40 30       	cpi	r20, 0x00	; 0
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	59 07       	cpc	r21, r25
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	69 07       	cpc	r22, r25
     618:	90 e4       	ldi	r25, 0x40	; 64
     61a:	79 07       	cpc	r23, r25
     61c:	60 f3       	brcs	.-40     	; 0x5f6 <__mulsf3+0x174>
     61e:	2b 8f       	std	Y+27, r18	; 0x1b
     620:	3c 8f       	std	Y+28, r19	; 0x1c
     622:	db 01       	movw	r26, r22
     624:	ca 01       	movw	r24, r20
     626:	8f 77       	andi	r24, 0x7F	; 127
     628:	90 70       	andi	r25, 0x00	; 0
     62a:	a0 70       	andi	r26, 0x00	; 0
     62c:	b0 70       	andi	r27, 0x00	; 0
     62e:	80 34       	cpi	r24, 0x40	; 64
     630:	91 05       	cpc	r25, r1
     632:	a1 05       	cpc	r26, r1
     634:	b1 05       	cpc	r27, r1
     636:	61 f4       	brne	.+24     	; 0x650 <__mulsf3+0x1ce>
     638:	47 fd       	sbrc	r20, 7
     63a:	0a c0       	rjmp	.+20     	; 0x650 <__mulsf3+0x1ce>
     63c:	e1 14       	cp	r14, r1
     63e:	f1 04       	cpc	r15, r1
     640:	01 05       	cpc	r16, r1
     642:	11 05       	cpc	r17, r1
     644:	29 f0       	breq	.+10     	; 0x650 <__mulsf3+0x1ce>
     646:	40 5c       	subi	r20, 0xC0	; 192
     648:	5f 4f       	sbci	r21, 0xFF	; 255
     64a:	6f 4f       	sbci	r22, 0xFF	; 255
     64c:	7f 4f       	sbci	r23, 0xFF	; 255
     64e:	40 78       	andi	r20, 0x80	; 128
     650:	1a 8e       	std	Y+26, r1	; 0x1a
     652:	fe 17       	cp	r31, r30
     654:	11 f0       	breq	.+4      	; 0x65a <__mulsf3+0x1d8>
     656:	81 e0       	ldi	r24, 0x01	; 1
     658:	8a 8f       	std	Y+26, r24	; 0x1a
     65a:	4d 8f       	std	Y+29, r20	; 0x1d
     65c:	5e 8f       	std	Y+30, r21	; 0x1e
     65e:	6f 8f       	std	Y+31, r22	; 0x1f
     660:	78 a3       	std	Y+32, r23	; 0x20
     662:	83 e0       	ldi	r24, 0x03	; 3
     664:	89 8f       	std	Y+25, r24	; 0x19
     666:	ce 01       	movw	r24, r28
     668:	49 96       	adiw	r24, 0x19	; 25
     66a:	0e 94 c1 05 	call	0xb82	; 0xb82 <__pack_f>
     66e:	a0 96       	adiw	r28, 0x20	; 32
     670:	e2 e1       	ldi	r30, 0x12	; 18
     672:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__epilogue_restores__>

00000676 <__divsf3>:
     676:	a8 e1       	ldi	r26, 0x18	; 24
     678:	b0 e0       	ldi	r27, 0x00	; 0
     67a:	e1 e4       	ldi	r30, 0x41	; 65
     67c:	f3 e0       	ldi	r31, 0x03	; 3
     67e:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__+0x10>
     682:	69 83       	std	Y+1, r22	; 0x01
     684:	7a 83       	std	Y+2, r23	; 0x02
     686:	8b 83       	std	Y+3, r24	; 0x03
     688:	9c 83       	std	Y+4, r25	; 0x04
     68a:	2d 83       	std	Y+5, r18	; 0x05
     68c:	3e 83       	std	Y+6, r19	; 0x06
     68e:	4f 83       	std	Y+7, r20	; 0x07
     690:	58 87       	std	Y+8, r21	; 0x08
     692:	b9 e0       	ldi	r27, 0x09	; 9
     694:	eb 2e       	mov	r14, r27
     696:	f1 2c       	mov	r15, r1
     698:	ec 0e       	add	r14, r28
     69a:	fd 1e       	adc	r15, r29
     69c:	ce 01       	movw	r24, r28
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	b7 01       	movw	r22, r14
     6a2:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     6a6:	8e 01       	movw	r16, r28
     6a8:	0f 5e       	subi	r16, 0xEF	; 239
     6aa:	1f 4f       	sbci	r17, 0xFF	; 255
     6ac:	ce 01       	movw	r24, r28
     6ae:	05 96       	adiw	r24, 0x05	; 5
     6b0:	b8 01       	movw	r22, r16
     6b2:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     6b6:	29 85       	ldd	r18, Y+9	; 0x09
     6b8:	22 30       	cpi	r18, 0x02	; 2
     6ba:	08 f4       	brcc	.+2      	; 0x6be <__divsf3+0x48>
     6bc:	7e c0       	rjmp	.+252    	; 0x7ba <__divsf3+0x144>
     6be:	39 89       	ldd	r19, Y+17	; 0x11
     6c0:	32 30       	cpi	r19, 0x02	; 2
     6c2:	10 f4       	brcc	.+4      	; 0x6c8 <__divsf3+0x52>
     6c4:	b8 01       	movw	r22, r16
     6c6:	7c c0       	rjmp	.+248    	; 0x7c0 <__divsf3+0x14a>
     6c8:	8a 85       	ldd	r24, Y+10	; 0x0a
     6ca:	9a 89       	ldd	r25, Y+18	; 0x12
     6cc:	89 27       	eor	r24, r25
     6ce:	8a 87       	std	Y+10, r24	; 0x0a
     6d0:	24 30       	cpi	r18, 0x04	; 4
     6d2:	11 f0       	breq	.+4      	; 0x6d8 <__divsf3+0x62>
     6d4:	22 30       	cpi	r18, 0x02	; 2
     6d6:	31 f4       	brne	.+12     	; 0x6e4 <__divsf3+0x6e>
     6d8:	23 17       	cp	r18, r19
     6da:	09 f0       	breq	.+2      	; 0x6de <__divsf3+0x68>
     6dc:	6e c0       	rjmp	.+220    	; 0x7ba <__divsf3+0x144>
     6de:	66 e0       	ldi	r22, 0x06	; 6
     6e0:	72 e0       	ldi	r23, 0x02	; 2
     6e2:	6e c0       	rjmp	.+220    	; 0x7c0 <__divsf3+0x14a>
     6e4:	34 30       	cpi	r19, 0x04	; 4
     6e6:	39 f4       	brne	.+14     	; 0x6f6 <__divsf3+0x80>
     6e8:	1d 86       	std	Y+13, r1	; 0x0d
     6ea:	1e 86       	std	Y+14, r1	; 0x0e
     6ec:	1f 86       	std	Y+15, r1	; 0x0f
     6ee:	18 8a       	std	Y+16, r1	; 0x10
     6f0:	1c 86       	std	Y+12, r1	; 0x0c
     6f2:	1b 86       	std	Y+11, r1	; 0x0b
     6f4:	04 c0       	rjmp	.+8      	; 0x6fe <__divsf3+0x88>
     6f6:	32 30       	cpi	r19, 0x02	; 2
     6f8:	21 f4       	brne	.+8      	; 0x702 <__divsf3+0x8c>
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	89 87       	std	Y+9, r24	; 0x09
     6fe:	b7 01       	movw	r22, r14
     700:	5f c0       	rjmp	.+190    	; 0x7c0 <__divsf3+0x14a>
     702:	2b 85       	ldd	r18, Y+11	; 0x0b
     704:	3c 85       	ldd	r19, Y+12	; 0x0c
     706:	8b 89       	ldd	r24, Y+19	; 0x13
     708:	9c 89       	ldd	r25, Y+20	; 0x14
     70a:	28 1b       	sub	r18, r24
     70c:	39 0b       	sbc	r19, r25
     70e:	3c 87       	std	Y+12, r19	; 0x0c
     710:	2b 87       	std	Y+11, r18	; 0x0b
     712:	ed 84       	ldd	r14, Y+13	; 0x0d
     714:	fe 84       	ldd	r15, Y+14	; 0x0e
     716:	0f 85       	ldd	r16, Y+15	; 0x0f
     718:	18 89       	ldd	r17, Y+16	; 0x10
     71a:	ad 88       	ldd	r10, Y+21	; 0x15
     71c:	be 88       	ldd	r11, Y+22	; 0x16
     71e:	cf 88       	ldd	r12, Y+23	; 0x17
     720:	d8 8c       	ldd	r13, Y+24	; 0x18
     722:	ea 14       	cp	r14, r10
     724:	fb 04       	cpc	r15, r11
     726:	0c 05       	cpc	r16, r12
     728:	1d 05       	cpc	r17, r13
     72a:	40 f4       	brcc	.+16     	; 0x73c <__divsf3+0xc6>
     72c:	ee 0c       	add	r14, r14
     72e:	ff 1c       	adc	r15, r15
     730:	00 1f       	adc	r16, r16
     732:	11 1f       	adc	r17, r17
     734:	21 50       	subi	r18, 0x01	; 1
     736:	30 40       	sbci	r19, 0x00	; 0
     738:	3c 87       	std	Y+12, r19	; 0x0c
     73a:	2b 87       	std	Y+11, r18	; 0x0b
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e0       	ldi	r20, 0x00	; 0
     742:	50 e0       	ldi	r21, 0x00	; 0
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	a0 e0       	ldi	r26, 0x00	; 0
     74a:	b0 e4       	ldi	r27, 0x40	; 64
     74c:	60 e0       	ldi	r22, 0x00	; 0
     74e:	70 e0       	ldi	r23, 0x00	; 0
     750:	ea 14       	cp	r14, r10
     752:	fb 04       	cpc	r15, r11
     754:	0c 05       	cpc	r16, r12
     756:	1d 05       	cpc	r17, r13
     758:	40 f0       	brcs	.+16     	; 0x76a <__divsf3+0xf4>
     75a:	28 2b       	or	r18, r24
     75c:	39 2b       	or	r19, r25
     75e:	4a 2b       	or	r20, r26
     760:	5b 2b       	or	r21, r27
     762:	ea 18       	sub	r14, r10
     764:	fb 08       	sbc	r15, r11
     766:	0c 09       	sbc	r16, r12
     768:	1d 09       	sbc	r17, r13
     76a:	b6 95       	lsr	r27
     76c:	a7 95       	ror	r26
     76e:	97 95       	ror	r25
     770:	87 95       	ror	r24
     772:	ee 0c       	add	r14, r14
     774:	ff 1c       	adc	r15, r15
     776:	00 1f       	adc	r16, r16
     778:	11 1f       	adc	r17, r17
     77a:	6f 5f       	subi	r22, 0xFF	; 255
     77c:	7f 4f       	sbci	r23, 0xFF	; 255
     77e:	6f 31       	cpi	r22, 0x1F	; 31
     780:	71 05       	cpc	r23, r1
     782:	31 f7       	brne	.-52     	; 0x750 <__divsf3+0xda>
     784:	da 01       	movw	r26, r20
     786:	c9 01       	movw	r24, r18
     788:	8f 77       	andi	r24, 0x7F	; 127
     78a:	90 70       	andi	r25, 0x00	; 0
     78c:	a0 70       	andi	r26, 0x00	; 0
     78e:	b0 70       	andi	r27, 0x00	; 0
     790:	80 34       	cpi	r24, 0x40	; 64
     792:	91 05       	cpc	r25, r1
     794:	a1 05       	cpc	r26, r1
     796:	b1 05       	cpc	r27, r1
     798:	61 f4       	brne	.+24     	; 0x7b2 <__divsf3+0x13c>
     79a:	27 fd       	sbrc	r18, 7
     79c:	0a c0       	rjmp	.+20     	; 0x7b2 <__divsf3+0x13c>
     79e:	e1 14       	cp	r14, r1
     7a0:	f1 04       	cpc	r15, r1
     7a2:	01 05       	cpc	r16, r1
     7a4:	11 05       	cpc	r17, r1
     7a6:	29 f0       	breq	.+10     	; 0x7b2 <__divsf3+0x13c>
     7a8:	20 5c       	subi	r18, 0xC0	; 192
     7aa:	3f 4f       	sbci	r19, 0xFF	; 255
     7ac:	4f 4f       	sbci	r20, 0xFF	; 255
     7ae:	5f 4f       	sbci	r21, 0xFF	; 255
     7b0:	20 78       	andi	r18, 0x80	; 128
     7b2:	2d 87       	std	Y+13, r18	; 0x0d
     7b4:	3e 87       	std	Y+14, r19	; 0x0e
     7b6:	4f 87       	std	Y+15, r20	; 0x0f
     7b8:	58 8b       	std	Y+16, r21	; 0x10
     7ba:	be 01       	movw	r22, r28
     7bc:	67 5f       	subi	r22, 0xF7	; 247
     7be:	7f 4f       	sbci	r23, 0xFF	; 255
     7c0:	cb 01       	movw	r24, r22
     7c2:	0e 94 c1 05 	call	0xb82	; 0xb82 <__pack_f>
     7c6:	68 96       	adiw	r28, 0x18	; 24
     7c8:	ea e0       	ldi	r30, 0x0A	; 10
     7ca:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__+0x10>

000007ce <__gesf2>:
     7ce:	a8 e1       	ldi	r26, 0x18	; 24
     7d0:	b0 e0       	ldi	r27, 0x00	; 0
     7d2:	ed ee       	ldi	r30, 0xED	; 237
     7d4:	f3 e0       	ldi	r31, 0x03	; 3
     7d6:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__prologue_saves__+0x18>
     7da:	69 83       	std	Y+1, r22	; 0x01
     7dc:	7a 83       	std	Y+2, r23	; 0x02
     7de:	8b 83       	std	Y+3, r24	; 0x03
     7e0:	9c 83       	std	Y+4, r25	; 0x04
     7e2:	2d 83       	std	Y+5, r18	; 0x05
     7e4:	3e 83       	std	Y+6, r19	; 0x06
     7e6:	4f 83       	std	Y+7, r20	; 0x07
     7e8:	58 87       	std	Y+8, r21	; 0x08
     7ea:	89 e0       	ldi	r24, 0x09	; 9
     7ec:	e8 2e       	mov	r14, r24
     7ee:	f1 2c       	mov	r15, r1
     7f0:	ec 0e       	add	r14, r28
     7f2:	fd 1e       	adc	r15, r29
     7f4:	ce 01       	movw	r24, r28
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	b7 01       	movw	r22, r14
     7fa:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     7fe:	8e 01       	movw	r16, r28
     800:	0f 5e       	subi	r16, 0xEF	; 239
     802:	1f 4f       	sbci	r17, 0xFF	; 255
     804:	ce 01       	movw	r24, r28
     806:	05 96       	adiw	r24, 0x05	; 5
     808:	b8 01       	movw	r22, r16
     80a:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     80e:	89 85       	ldd	r24, Y+9	; 0x09
     810:	82 30       	cpi	r24, 0x02	; 2
     812:	40 f0       	brcs	.+16     	; 0x824 <__gesf2+0x56>
     814:	89 89       	ldd	r24, Y+17	; 0x11
     816:	82 30       	cpi	r24, 0x02	; 2
     818:	28 f0       	brcs	.+10     	; 0x824 <__gesf2+0x56>
     81a:	c7 01       	movw	r24, r14
     81c:	b8 01       	movw	r22, r16
     81e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fpcmp_parts_f>
     822:	01 c0       	rjmp	.+2      	; 0x826 <__gesf2+0x58>
     824:	8f ef       	ldi	r24, 0xFF	; 255
     826:	68 96       	adiw	r28, 0x18	; 24
     828:	e6 e0       	ldi	r30, 0x06	; 6
     82a:	0c 94 95 11 	jmp	0x232a	; 0x232a <__epilogue_restores__+0x18>

0000082e <__ltsf2>:
     82e:	a8 e1       	ldi	r26, 0x18	; 24
     830:	b0 e0       	ldi	r27, 0x00	; 0
     832:	ed e1       	ldi	r30, 0x1D	; 29
     834:	f4 e0       	ldi	r31, 0x04	; 4
     836:	0c 94 79 11 	jmp	0x22f2	; 0x22f2 <__prologue_saves__+0x18>
     83a:	69 83       	std	Y+1, r22	; 0x01
     83c:	7a 83       	std	Y+2, r23	; 0x02
     83e:	8b 83       	std	Y+3, r24	; 0x03
     840:	9c 83       	std	Y+4, r25	; 0x04
     842:	2d 83       	std	Y+5, r18	; 0x05
     844:	3e 83       	std	Y+6, r19	; 0x06
     846:	4f 83       	std	Y+7, r20	; 0x07
     848:	58 87       	std	Y+8, r21	; 0x08
     84a:	89 e0       	ldi	r24, 0x09	; 9
     84c:	e8 2e       	mov	r14, r24
     84e:	f1 2c       	mov	r15, r1
     850:	ec 0e       	add	r14, r28
     852:	fd 1e       	adc	r15, r29
     854:	ce 01       	movw	r24, r28
     856:	01 96       	adiw	r24, 0x01	; 1
     858:	b7 01       	movw	r22, r14
     85a:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     85e:	8e 01       	movw	r16, r28
     860:	0f 5e       	subi	r16, 0xEF	; 239
     862:	1f 4f       	sbci	r17, 0xFF	; 255
     864:	ce 01       	movw	r24, r28
     866:	05 96       	adiw	r24, 0x05	; 5
     868:	b8 01       	movw	r22, r16
     86a:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     86e:	89 85       	ldd	r24, Y+9	; 0x09
     870:	82 30       	cpi	r24, 0x02	; 2
     872:	40 f0       	brcs	.+16     	; 0x884 <__ltsf2+0x56>
     874:	89 89       	ldd	r24, Y+17	; 0x11
     876:	82 30       	cpi	r24, 0x02	; 2
     878:	28 f0       	brcs	.+10     	; 0x884 <__ltsf2+0x56>
     87a:	c7 01       	movw	r24, r14
     87c:	b8 01       	movw	r22, r16
     87e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__fpcmp_parts_f>
     882:	01 c0       	rjmp	.+2      	; 0x886 <__ltsf2+0x58>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	68 96       	adiw	r28, 0x18	; 24
     888:	e6 e0       	ldi	r30, 0x06	; 6
     88a:	0c 94 95 11 	jmp	0x232a	; 0x232a <__epilogue_restores__+0x18>

0000088e <__floatsisf>:
     88e:	a8 e0       	ldi	r26, 0x08	; 8
     890:	b0 e0       	ldi	r27, 0x00	; 0
     892:	ed e4       	ldi	r30, 0x4D	; 77
     894:	f4 e0       	ldi	r31, 0x04	; 4
     896:	0c 94 76 11 	jmp	0x22ec	; 0x22ec <__prologue_saves__+0x12>
     89a:	9b 01       	movw	r18, r22
     89c:	ac 01       	movw	r20, r24
     89e:	83 e0       	ldi	r24, 0x03	; 3
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	da 01       	movw	r26, r20
     8a4:	c9 01       	movw	r24, r18
     8a6:	88 27       	eor	r24, r24
     8a8:	b7 fd       	sbrc	r27, 7
     8aa:	83 95       	inc	r24
     8ac:	99 27       	eor	r25, r25
     8ae:	aa 27       	eor	r26, r26
     8b0:	bb 27       	eor	r27, r27
     8b2:	b8 2e       	mov	r11, r24
     8b4:	21 15       	cp	r18, r1
     8b6:	31 05       	cpc	r19, r1
     8b8:	41 05       	cpc	r20, r1
     8ba:	51 05       	cpc	r21, r1
     8bc:	19 f4       	brne	.+6      	; 0x8c4 <__floatsisf+0x36>
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	89 83       	std	Y+1, r24	; 0x01
     8c2:	3a c0       	rjmp	.+116    	; 0x938 <__floatsisf+0xaa>
     8c4:	88 23       	and	r24, r24
     8c6:	a9 f0       	breq	.+42     	; 0x8f2 <__floatsisf+0x64>
     8c8:	20 30       	cpi	r18, 0x00	; 0
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	38 07       	cpc	r19, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	48 07       	cpc	r20, r24
     8d2:	80 e8       	ldi	r24, 0x80	; 128
     8d4:	58 07       	cpc	r21, r24
     8d6:	29 f4       	brne	.+10     	; 0x8e2 <__floatsisf+0x54>
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	80 e0       	ldi	r24, 0x00	; 0
     8de:	9f ec       	ldi	r25, 0xCF	; 207
     8e0:	30 c0       	rjmp	.+96     	; 0x942 <__floatsisf+0xb4>
     8e2:	ee 24       	eor	r14, r14
     8e4:	ff 24       	eor	r15, r15
     8e6:	87 01       	movw	r16, r14
     8e8:	e2 1a       	sub	r14, r18
     8ea:	f3 0a       	sbc	r15, r19
     8ec:	04 0b       	sbc	r16, r20
     8ee:	15 0b       	sbc	r17, r21
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <__floatsisf+0x68>
     8f2:	79 01       	movw	r14, r18
     8f4:	8a 01       	movw	r16, r20
     8f6:	8e e1       	ldi	r24, 0x1E	; 30
     8f8:	c8 2e       	mov	r12, r24
     8fa:	d1 2c       	mov	r13, r1
     8fc:	dc 82       	std	Y+4, r13	; 0x04
     8fe:	cb 82       	std	Y+3, r12	; 0x03
     900:	ed 82       	std	Y+5, r14	; 0x05
     902:	fe 82       	std	Y+6, r15	; 0x06
     904:	0f 83       	std	Y+7, r16	; 0x07
     906:	18 87       	std	Y+8, r17	; 0x08
     908:	c8 01       	movw	r24, r16
     90a:	b7 01       	movw	r22, r14
     90c:	0e 94 72 05 	call	0xae4	; 0xae4 <__clzsi2>
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	18 16       	cp	r1, r24
     914:	19 06       	cpc	r1, r25
     916:	84 f4       	brge	.+32     	; 0x938 <__floatsisf+0xaa>
     918:	08 2e       	mov	r0, r24
     91a:	04 c0       	rjmp	.+8      	; 0x924 <__floatsisf+0x96>
     91c:	ee 0c       	add	r14, r14
     91e:	ff 1c       	adc	r15, r15
     920:	00 1f       	adc	r16, r16
     922:	11 1f       	adc	r17, r17
     924:	0a 94       	dec	r0
     926:	d2 f7       	brpl	.-12     	; 0x91c <__floatsisf+0x8e>
     928:	ed 82       	std	Y+5, r14	; 0x05
     92a:	fe 82       	std	Y+6, r15	; 0x06
     92c:	0f 83       	std	Y+7, r16	; 0x07
     92e:	18 87       	std	Y+8, r17	; 0x08
     930:	c8 1a       	sub	r12, r24
     932:	d9 0a       	sbc	r13, r25
     934:	dc 82       	std	Y+4, r13	; 0x04
     936:	cb 82       	std	Y+3, r12	; 0x03
     938:	ba 82       	std	Y+2, r11	; 0x02
     93a:	ce 01       	movw	r24, r28
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	0e 94 c1 05 	call	0xb82	; 0xb82 <__pack_f>
     942:	28 96       	adiw	r28, 0x08	; 8
     944:	e9 e0       	ldi	r30, 0x09	; 9
     946:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__epilogue_restores__+0x12>

0000094a <__fixsfsi>:
     94a:	ac e0       	ldi	r26, 0x0C	; 12
     94c:	b0 e0       	ldi	r27, 0x00	; 0
     94e:	eb ea       	ldi	r30, 0xAB	; 171
     950:	f4 e0       	ldi	r31, 0x04	; 4
     952:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__prologue_saves__+0x20>
     956:	69 83       	std	Y+1, r22	; 0x01
     958:	7a 83       	std	Y+2, r23	; 0x02
     95a:	8b 83       	std	Y+3, r24	; 0x03
     95c:	9c 83       	std	Y+4, r25	; 0x04
     95e:	ce 01       	movw	r24, r28
     960:	01 96       	adiw	r24, 0x01	; 1
     962:	be 01       	movw	r22, r28
     964:	6b 5f       	subi	r22, 0xFB	; 251
     966:	7f 4f       	sbci	r23, 0xFF	; 255
     968:	0e 94 96 06 	call	0xd2c	; 0xd2c <__unpack_f>
     96c:	8d 81       	ldd	r24, Y+5	; 0x05
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	61 f1       	breq	.+88     	; 0x9ca <__fixsfsi+0x80>
     972:	82 30       	cpi	r24, 0x02	; 2
     974:	50 f1       	brcs	.+84     	; 0x9ca <__fixsfsi+0x80>
     976:	84 30       	cpi	r24, 0x04	; 4
     978:	21 f4       	brne	.+8      	; 0x982 <__fixsfsi+0x38>
     97a:	8e 81       	ldd	r24, Y+6	; 0x06
     97c:	88 23       	and	r24, r24
     97e:	51 f1       	breq	.+84     	; 0x9d4 <__fixsfsi+0x8a>
     980:	2e c0       	rjmp	.+92     	; 0x9de <__fixsfsi+0x94>
     982:	2f 81       	ldd	r18, Y+7	; 0x07
     984:	38 85       	ldd	r19, Y+8	; 0x08
     986:	37 fd       	sbrc	r19, 7
     988:	20 c0       	rjmp	.+64     	; 0x9ca <__fixsfsi+0x80>
     98a:	6e 81       	ldd	r22, Y+6	; 0x06
     98c:	2f 31       	cpi	r18, 0x1F	; 31
     98e:	31 05       	cpc	r19, r1
     990:	1c f0       	brlt	.+6      	; 0x998 <__fixsfsi+0x4e>
     992:	66 23       	and	r22, r22
     994:	f9 f0       	breq	.+62     	; 0x9d4 <__fixsfsi+0x8a>
     996:	23 c0       	rjmp	.+70     	; 0x9de <__fixsfsi+0x94>
     998:	8e e1       	ldi	r24, 0x1E	; 30
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	82 1b       	sub	r24, r18
     99e:	93 0b       	sbc	r25, r19
     9a0:	29 85       	ldd	r18, Y+9	; 0x09
     9a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a4:	4b 85       	ldd	r20, Y+11	; 0x0b
     9a6:	5c 85       	ldd	r21, Y+12	; 0x0c
     9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__fixsfsi+0x68>
     9aa:	56 95       	lsr	r21
     9ac:	47 95       	ror	r20
     9ae:	37 95       	ror	r19
     9b0:	27 95       	ror	r18
     9b2:	8a 95       	dec	r24
     9b4:	d2 f7       	brpl	.-12     	; 0x9aa <__fixsfsi+0x60>
     9b6:	66 23       	and	r22, r22
     9b8:	b1 f0       	breq	.+44     	; 0x9e6 <__fixsfsi+0x9c>
     9ba:	50 95       	com	r21
     9bc:	40 95       	com	r20
     9be:	30 95       	com	r19
     9c0:	21 95       	neg	r18
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
     9c4:	4f 4f       	sbci	r20, 0xFF	; 255
     9c6:	5f 4f       	sbci	r21, 0xFF	; 255
     9c8:	0e c0       	rjmp	.+28     	; 0x9e6 <__fixsfsi+0x9c>
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e0       	ldi	r20, 0x00	; 0
     9d0:	50 e0       	ldi	r21, 0x00	; 0
     9d2:	09 c0       	rjmp	.+18     	; 0x9e6 <__fixsfsi+0x9c>
     9d4:	2f ef       	ldi	r18, 0xFF	; 255
     9d6:	3f ef       	ldi	r19, 0xFF	; 255
     9d8:	4f ef       	ldi	r20, 0xFF	; 255
     9da:	5f e7       	ldi	r21, 0x7F	; 127
     9dc:	04 c0       	rjmp	.+8      	; 0x9e6 <__fixsfsi+0x9c>
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	50 e8       	ldi	r21, 0x80	; 128
     9e6:	b9 01       	movw	r22, r18
     9e8:	ca 01       	movw	r24, r20
     9ea:	2c 96       	adiw	r28, 0x0c	; 12
     9ec:	e2 e0       	ldi	r30, 0x02	; 2
     9ee:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__epilogue_restores__+0x20>

000009f2 <__floatunsisf>:
     9f2:	a8 e0       	ldi	r26, 0x08	; 8
     9f4:	b0 e0       	ldi	r27, 0x00	; 0
     9f6:	ef ef       	ldi	r30, 0xFF	; 255
     9f8:	f4 e0       	ldi	r31, 0x04	; 4
     9fa:	0c 94 75 11 	jmp	0x22ea	; 0x22ea <__prologue_saves__+0x10>
     9fe:	7b 01       	movw	r14, r22
     a00:	8c 01       	movw	r16, r24
     a02:	61 15       	cp	r22, r1
     a04:	71 05       	cpc	r23, r1
     a06:	81 05       	cpc	r24, r1
     a08:	91 05       	cpc	r25, r1
     a0a:	19 f4       	brne	.+6      	; 0xa12 <__floatunsisf+0x20>
     a0c:	82 e0       	ldi	r24, 0x02	; 2
     a0e:	89 83       	std	Y+1, r24	; 0x01
     a10:	60 c0       	rjmp	.+192    	; 0xad2 <__floatunsisf+0xe0>
     a12:	83 e0       	ldi	r24, 0x03	; 3
     a14:	89 83       	std	Y+1, r24	; 0x01
     a16:	8e e1       	ldi	r24, 0x1E	; 30
     a18:	c8 2e       	mov	r12, r24
     a1a:	d1 2c       	mov	r13, r1
     a1c:	dc 82       	std	Y+4, r13	; 0x04
     a1e:	cb 82       	std	Y+3, r12	; 0x03
     a20:	ed 82       	std	Y+5, r14	; 0x05
     a22:	fe 82       	std	Y+6, r15	; 0x06
     a24:	0f 83       	std	Y+7, r16	; 0x07
     a26:	18 87       	std	Y+8, r17	; 0x08
     a28:	c8 01       	movw	r24, r16
     a2a:	b7 01       	movw	r22, r14
     a2c:	0e 94 72 05 	call	0xae4	; 0xae4 <__clzsi2>
     a30:	fc 01       	movw	r30, r24
     a32:	31 97       	sbiw	r30, 0x01	; 1
     a34:	f7 ff       	sbrs	r31, 7
     a36:	3b c0       	rjmp	.+118    	; 0xaae <__floatunsisf+0xbc>
     a38:	22 27       	eor	r18, r18
     a3a:	33 27       	eor	r19, r19
     a3c:	2e 1b       	sub	r18, r30
     a3e:	3f 0b       	sbc	r19, r31
     a40:	57 01       	movw	r10, r14
     a42:	68 01       	movw	r12, r16
     a44:	02 2e       	mov	r0, r18
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__floatunsisf+0x5e>
     a48:	d6 94       	lsr	r13
     a4a:	c7 94       	ror	r12
     a4c:	b7 94       	ror	r11
     a4e:	a7 94       	ror	r10
     a50:	0a 94       	dec	r0
     a52:	d2 f7       	brpl	.-12     	; 0xa48 <__floatunsisf+0x56>
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	60 e0       	ldi	r22, 0x00	; 0
     a5a:	70 e0       	ldi	r23, 0x00	; 0
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	a0 e0       	ldi	r26, 0x00	; 0
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	04 c0       	rjmp	.+8      	; 0xa6e <__floatunsisf+0x7c>
     a66:	88 0f       	add	r24, r24
     a68:	99 1f       	adc	r25, r25
     a6a:	aa 1f       	adc	r26, r26
     a6c:	bb 1f       	adc	r27, r27
     a6e:	2a 95       	dec	r18
     a70:	d2 f7       	brpl	.-12     	; 0xa66 <__floatunsisf+0x74>
     a72:	01 97       	sbiw	r24, 0x01	; 1
     a74:	a1 09       	sbc	r26, r1
     a76:	b1 09       	sbc	r27, r1
     a78:	8e 21       	and	r24, r14
     a7a:	9f 21       	and	r25, r15
     a7c:	a0 23       	and	r26, r16
     a7e:	b1 23       	and	r27, r17
     a80:	00 97       	sbiw	r24, 0x00	; 0
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	21 f0       	breq	.+8      	; 0xa90 <__floatunsisf+0x9e>
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	50 e0       	ldi	r21, 0x00	; 0
     a8c:	60 e0       	ldi	r22, 0x00	; 0
     a8e:	70 e0       	ldi	r23, 0x00	; 0
     a90:	4a 29       	or	r20, r10
     a92:	5b 29       	or	r21, r11
     a94:	6c 29       	or	r22, r12
     a96:	7d 29       	or	r23, r13
     a98:	4d 83       	std	Y+5, r20	; 0x05
     a9a:	5e 83       	std	Y+6, r21	; 0x06
     a9c:	6f 83       	std	Y+7, r22	; 0x07
     a9e:	78 87       	std	Y+8, r23	; 0x08
     aa0:	8e e1       	ldi	r24, 0x1E	; 30
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	8e 1b       	sub	r24, r30
     aa6:	9f 0b       	sbc	r25, r31
     aa8:	9c 83       	std	Y+4, r25	; 0x04
     aaa:	8b 83       	std	Y+3, r24	; 0x03
     aac:	12 c0       	rjmp	.+36     	; 0xad2 <__floatunsisf+0xe0>
     aae:	30 97       	sbiw	r30, 0x00	; 0
     ab0:	81 f0       	breq	.+32     	; 0xad2 <__floatunsisf+0xe0>
     ab2:	0e 2e       	mov	r0, r30
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__floatunsisf+0xcc>
     ab6:	ee 0c       	add	r14, r14
     ab8:	ff 1c       	adc	r15, r15
     aba:	00 1f       	adc	r16, r16
     abc:	11 1f       	adc	r17, r17
     abe:	0a 94       	dec	r0
     ac0:	d2 f7       	brpl	.-12     	; 0xab6 <__floatunsisf+0xc4>
     ac2:	ed 82       	std	Y+5, r14	; 0x05
     ac4:	fe 82       	std	Y+6, r15	; 0x06
     ac6:	0f 83       	std	Y+7, r16	; 0x07
     ac8:	18 87       	std	Y+8, r17	; 0x08
     aca:	ce 1a       	sub	r12, r30
     acc:	df 0a       	sbc	r13, r31
     ace:	dc 82       	std	Y+4, r13	; 0x04
     ad0:	cb 82       	std	Y+3, r12	; 0x03
     ad2:	1a 82       	std	Y+2, r1	; 0x02
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	0e 94 c1 05 	call	0xb82	; 0xb82 <__pack_f>
     adc:	28 96       	adiw	r28, 0x08	; 8
     ade:	ea e0       	ldi	r30, 0x0A	; 10
     ae0:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__epilogue_restores__+0x10>

00000ae4 <__clzsi2>:
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	7b 01       	movw	r14, r22
     aee:	8c 01       	movw	r16, r24
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	e8 16       	cp	r14, r24
     af4:	80 e0       	ldi	r24, 0x00	; 0
     af6:	f8 06       	cpc	r15, r24
     af8:	81 e0       	ldi	r24, 0x01	; 1
     afa:	08 07       	cpc	r16, r24
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	18 07       	cpc	r17, r24
     b00:	88 f4       	brcc	.+34     	; 0xb24 <__clzsi2+0x40>
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	e8 16       	cp	r14, r24
     b06:	f1 04       	cpc	r15, r1
     b08:	01 05       	cpc	r16, r1
     b0a:	11 05       	cpc	r17, r1
     b0c:	31 f0       	breq	.+12     	; 0xb1a <__clzsi2+0x36>
     b0e:	28 f0       	brcs	.+10     	; 0xb1a <__clzsi2+0x36>
     b10:	88 e0       	ldi	r24, 0x08	; 8
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	a0 e0       	ldi	r26, 0x00	; 0
     b16:	b0 e0       	ldi	r27, 0x00	; 0
     b18:	17 c0       	rjmp	.+46     	; 0xb48 <__clzsi2+0x64>
     b1a:	80 e0       	ldi	r24, 0x00	; 0
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	a0 e0       	ldi	r26, 0x00	; 0
     b20:	b0 e0       	ldi	r27, 0x00	; 0
     b22:	12 c0       	rjmp	.+36     	; 0xb48 <__clzsi2+0x64>
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	e8 16       	cp	r14, r24
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	f8 06       	cpc	r15, r24
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	08 07       	cpc	r16, r24
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	18 07       	cpc	r17, r24
     b34:	28 f0       	brcs	.+10     	; 0xb40 <__clzsi2+0x5c>
     b36:	88 e1       	ldi	r24, 0x18	; 24
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__clzsi2+0x64>
     b40:	80 e1       	ldi	r24, 0x10	; 16
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	a0 e0       	ldi	r26, 0x00	; 0
     b46:	b0 e0       	ldi	r27, 0x00	; 0
     b48:	20 e2       	ldi	r18, 0x20	; 32
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	28 1b       	sub	r18, r24
     b52:	39 0b       	sbc	r19, r25
     b54:	4a 0b       	sbc	r20, r26
     b56:	5b 0b       	sbc	r21, r27
     b58:	04 c0       	rjmp	.+8      	; 0xb62 <__clzsi2+0x7e>
     b5a:	16 95       	lsr	r17
     b5c:	07 95       	ror	r16
     b5e:	f7 94       	ror	r15
     b60:	e7 94       	ror	r14
     b62:	8a 95       	dec	r24
     b64:	d2 f7       	brpl	.-12     	; 0xb5a <__clzsi2+0x76>
     b66:	f7 01       	movw	r30, r14
     b68:	e2 5f       	subi	r30, 0xF2	; 242
     b6a:	fd 4f       	sbci	r31, 0xFD	; 253
     b6c:	80 81       	ld	r24, Z
     b6e:	28 1b       	sub	r18, r24
     b70:	31 09       	sbc	r19, r1
     b72:	41 09       	sbc	r20, r1
     b74:	51 09       	sbc	r21, r1
     b76:	c9 01       	movw	r24, r18
     b78:	1f 91       	pop	r17
     b7a:	0f 91       	pop	r16
     b7c:	ff 90       	pop	r15
     b7e:	ef 90       	pop	r14
     b80:	08 95       	ret

00000b82 <__pack_f>:
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	0f 93       	push	r16
     b8a:	1f 93       	push	r17
     b8c:	fc 01       	movw	r30, r24
     b8e:	e4 80       	ldd	r14, Z+4	; 0x04
     b90:	f5 80       	ldd	r15, Z+5	; 0x05
     b92:	06 81       	ldd	r16, Z+6	; 0x06
     b94:	17 81       	ldd	r17, Z+7	; 0x07
     b96:	d1 80       	ldd	r13, Z+1	; 0x01
     b98:	80 81       	ld	r24, Z
     b9a:	82 30       	cpi	r24, 0x02	; 2
     b9c:	48 f4       	brcc	.+18     	; 0xbb0 <__pack_f+0x2e>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	a0 e1       	ldi	r26, 0x10	; 16
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e8 2a       	or	r14, r24
     ba8:	f9 2a       	or	r15, r25
     baa:	0a 2b       	or	r16, r26
     bac:	1b 2b       	or	r17, r27
     bae:	a5 c0       	rjmp	.+330    	; 0xcfa <__pack_f+0x178>
     bb0:	84 30       	cpi	r24, 0x04	; 4
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <__pack_f+0x34>
     bb4:	9f c0       	rjmp	.+318    	; 0xcf4 <__pack_f+0x172>
     bb6:	82 30       	cpi	r24, 0x02	; 2
     bb8:	21 f4       	brne	.+8      	; 0xbc2 <__pack_f+0x40>
     bba:	ee 24       	eor	r14, r14
     bbc:	ff 24       	eor	r15, r15
     bbe:	87 01       	movw	r16, r14
     bc0:	05 c0       	rjmp	.+10     	; 0xbcc <__pack_f+0x4a>
     bc2:	e1 14       	cp	r14, r1
     bc4:	f1 04       	cpc	r15, r1
     bc6:	01 05       	cpc	r16, r1
     bc8:	11 05       	cpc	r17, r1
     bca:	19 f4       	brne	.+6      	; 0xbd2 <__pack_f+0x50>
     bcc:	e0 e0       	ldi	r30, 0x00	; 0
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	96 c0       	rjmp	.+300    	; 0xcfe <__pack_f+0x17c>
     bd2:	62 81       	ldd	r22, Z+2	; 0x02
     bd4:	73 81       	ldd	r23, Z+3	; 0x03
     bd6:	9f ef       	ldi	r25, 0xFF	; 255
     bd8:	62 38       	cpi	r22, 0x82	; 130
     bda:	79 07       	cpc	r23, r25
     bdc:	0c f0       	brlt	.+2      	; 0xbe0 <__pack_f+0x5e>
     bde:	5b c0       	rjmp	.+182    	; 0xc96 <__pack_f+0x114>
     be0:	22 e8       	ldi	r18, 0x82	; 130
     be2:	3f ef       	ldi	r19, 0xFF	; 255
     be4:	26 1b       	sub	r18, r22
     be6:	37 0b       	sbc	r19, r23
     be8:	2a 31       	cpi	r18, 0x1A	; 26
     bea:	31 05       	cpc	r19, r1
     bec:	2c f0       	brlt	.+10     	; 0xbf8 <__pack_f+0x76>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	50 e0       	ldi	r21, 0x00	; 0
     bf6:	2a c0       	rjmp	.+84     	; 0xc4c <__pack_f+0xca>
     bf8:	b8 01       	movw	r22, r16
     bfa:	a7 01       	movw	r20, r14
     bfc:	02 2e       	mov	r0, r18
     bfe:	04 c0       	rjmp	.+8      	; 0xc08 <__pack_f+0x86>
     c00:	76 95       	lsr	r23
     c02:	67 95       	ror	r22
     c04:	57 95       	ror	r21
     c06:	47 95       	ror	r20
     c08:	0a 94       	dec	r0
     c0a:	d2 f7       	brpl	.-12     	; 0xc00 <__pack_f+0x7e>
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x9c>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	aa 1f       	adc	r26, r26
     c1c:	bb 1f       	adc	r27, r27
     c1e:	2a 95       	dec	r18
     c20:	d2 f7       	brpl	.-12     	; 0xc16 <__pack_f+0x94>
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	a1 09       	sbc	r26, r1
     c26:	b1 09       	sbc	r27, r1
     c28:	8e 21       	and	r24, r14
     c2a:	9f 21       	and	r25, r15
     c2c:	a0 23       	and	r26, r16
     c2e:	b1 23       	and	r27, r17
     c30:	00 97       	sbiw	r24, 0x00	; 0
     c32:	a1 05       	cpc	r26, r1
     c34:	b1 05       	cpc	r27, r1
     c36:	21 f0       	breq	.+8      	; 0xc40 <__pack_f+0xbe>
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	a0 e0       	ldi	r26, 0x00	; 0
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	9a 01       	movw	r18, r20
     c42:	ab 01       	movw	r20, r22
     c44:	28 2b       	or	r18, r24
     c46:	39 2b       	or	r19, r25
     c48:	4a 2b       	or	r20, r26
     c4a:	5b 2b       	or	r21, r27
     c4c:	da 01       	movw	r26, r20
     c4e:	c9 01       	movw	r24, r18
     c50:	8f 77       	andi	r24, 0x7F	; 127
     c52:	90 70       	andi	r25, 0x00	; 0
     c54:	a0 70       	andi	r26, 0x00	; 0
     c56:	b0 70       	andi	r27, 0x00	; 0
     c58:	80 34       	cpi	r24, 0x40	; 64
     c5a:	91 05       	cpc	r25, r1
     c5c:	a1 05       	cpc	r26, r1
     c5e:	b1 05       	cpc	r27, r1
     c60:	39 f4       	brne	.+14     	; 0xc70 <__pack_f+0xee>
     c62:	27 ff       	sbrs	r18, 7
     c64:	09 c0       	rjmp	.+18     	; 0xc78 <__pack_f+0xf6>
     c66:	20 5c       	subi	r18, 0xC0	; 192
     c68:	3f 4f       	sbci	r19, 0xFF	; 255
     c6a:	4f 4f       	sbci	r20, 0xFF	; 255
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__pack_f+0xf6>
     c70:	21 5c       	subi	r18, 0xC1	; 193
     c72:	3f 4f       	sbci	r19, 0xFF	; 255
     c74:	4f 4f       	sbci	r20, 0xFF	; 255
     c76:	5f 4f       	sbci	r21, 0xFF	; 255
     c78:	e0 e0       	ldi	r30, 0x00	; 0
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	20 30       	cpi	r18, 0x00	; 0
     c7e:	a0 e0       	ldi	r26, 0x00	; 0
     c80:	3a 07       	cpc	r19, r26
     c82:	a0 e0       	ldi	r26, 0x00	; 0
     c84:	4a 07       	cpc	r20, r26
     c86:	a0 e4       	ldi	r26, 0x40	; 64
     c88:	5a 07       	cpc	r21, r26
     c8a:	10 f0       	brcs	.+4      	; 0xc90 <__pack_f+0x10e>
     c8c:	e1 e0       	ldi	r30, 0x01	; 1
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	79 01       	movw	r14, r18
     c92:	8a 01       	movw	r16, r20
     c94:	27 c0       	rjmp	.+78     	; 0xce4 <__pack_f+0x162>
     c96:	60 38       	cpi	r22, 0x80	; 128
     c98:	71 05       	cpc	r23, r1
     c9a:	64 f5       	brge	.+88     	; 0xcf4 <__pack_f+0x172>
     c9c:	fb 01       	movw	r30, r22
     c9e:	e1 58       	subi	r30, 0x81	; 129
     ca0:	ff 4f       	sbci	r31, 0xFF	; 255
     ca2:	d8 01       	movw	r26, r16
     ca4:	c7 01       	movw	r24, r14
     ca6:	8f 77       	andi	r24, 0x7F	; 127
     ca8:	90 70       	andi	r25, 0x00	; 0
     caa:	a0 70       	andi	r26, 0x00	; 0
     cac:	b0 70       	andi	r27, 0x00	; 0
     cae:	80 34       	cpi	r24, 0x40	; 64
     cb0:	91 05       	cpc	r25, r1
     cb2:	a1 05       	cpc	r26, r1
     cb4:	b1 05       	cpc	r27, r1
     cb6:	39 f4       	brne	.+14     	; 0xcc6 <__pack_f+0x144>
     cb8:	e7 fe       	sbrs	r14, 7
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__pack_f+0x154>
     cbc:	80 e4       	ldi	r24, 0x40	; 64
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	04 c0       	rjmp	.+8      	; 0xcce <__pack_f+0x14c>
     cc6:	8f e3       	ldi	r24, 0x3F	; 63
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	a0 e0       	ldi	r26, 0x00	; 0
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e8 0e       	add	r14, r24
     cd0:	f9 1e       	adc	r15, r25
     cd2:	0a 1f       	adc	r16, r26
     cd4:	1b 1f       	adc	r17, r27
     cd6:	17 ff       	sbrs	r17, 7
     cd8:	05 c0       	rjmp	.+10     	; 0xce4 <__pack_f+0x162>
     cda:	16 95       	lsr	r17
     cdc:	07 95       	ror	r16
     cde:	f7 94       	ror	r15
     ce0:	e7 94       	ror	r14
     ce2:	31 96       	adiw	r30, 0x01	; 1
     ce4:	87 e0       	ldi	r24, 0x07	; 7
     ce6:	16 95       	lsr	r17
     ce8:	07 95       	ror	r16
     cea:	f7 94       	ror	r15
     cec:	e7 94       	ror	r14
     cee:	8a 95       	dec	r24
     cf0:	d1 f7       	brne	.-12     	; 0xce6 <__pack_f+0x164>
     cf2:	05 c0       	rjmp	.+10     	; 0xcfe <__pack_f+0x17c>
     cf4:	ee 24       	eor	r14, r14
     cf6:	ff 24       	eor	r15, r15
     cf8:	87 01       	movw	r16, r14
     cfa:	ef ef       	ldi	r30, 0xFF	; 255
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	6e 2f       	mov	r22, r30
     d00:	67 95       	ror	r22
     d02:	66 27       	eor	r22, r22
     d04:	67 95       	ror	r22
     d06:	90 2f       	mov	r25, r16
     d08:	9f 77       	andi	r25, 0x7F	; 127
     d0a:	d7 94       	ror	r13
     d0c:	dd 24       	eor	r13, r13
     d0e:	d7 94       	ror	r13
     d10:	8e 2f       	mov	r24, r30
     d12:	86 95       	lsr	r24
     d14:	49 2f       	mov	r20, r25
     d16:	46 2b       	or	r20, r22
     d18:	58 2f       	mov	r21, r24
     d1a:	5d 29       	or	r21, r13
     d1c:	b7 01       	movw	r22, r14
     d1e:	ca 01       	movw	r24, r20
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	ff 90       	pop	r15
     d26:	ef 90       	pop	r14
     d28:	df 90       	pop	r13
     d2a:	08 95       	ret

00000d2c <__unpack_f>:
     d2c:	fc 01       	movw	r30, r24
     d2e:	db 01       	movw	r26, r22
     d30:	40 81       	ld	r20, Z
     d32:	51 81       	ldd	r21, Z+1	; 0x01
     d34:	22 81       	ldd	r18, Z+2	; 0x02
     d36:	62 2f       	mov	r22, r18
     d38:	6f 77       	andi	r22, 0x7F	; 127
     d3a:	70 e0       	ldi	r23, 0x00	; 0
     d3c:	22 1f       	adc	r18, r18
     d3e:	22 27       	eor	r18, r18
     d40:	22 1f       	adc	r18, r18
     d42:	93 81       	ldd	r25, Z+3	; 0x03
     d44:	89 2f       	mov	r24, r25
     d46:	88 0f       	add	r24, r24
     d48:	82 2b       	or	r24, r18
     d4a:	28 2f       	mov	r18, r24
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	99 1f       	adc	r25, r25
     d50:	99 27       	eor	r25, r25
     d52:	99 1f       	adc	r25, r25
     d54:	11 96       	adiw	r26, 0x01	; 1
     d56:	9c 93       	st	X, r25
     d58:	11 97       	sbiw	r26, 0x01	; 1
     d5a:	21 15       	cp	r18, r1
     d5c:	31 05       	cpc	r19, r1
     d5e:	a9 f5       	brne	.+106    	; 0xdca <__unpack_f+0x9e>
     d60:	41 15       	cp	r20, r1
     d62:	51 05       	cpc	r21, r1
     d64:	61 05       	cpc	r22, r1
     d66:	71 05       	cpc	r23, r1
     d68:	11 f4       	brne	.+4      	; 0xd6e <__unpack_f+0x42>
     d6a:	82 e0       	ldi	r24, 0x02	; 2
     d6c:	37 c0       	rjmp	.+110    	; 0xddc <__unpack_f+0xb0>
     d6e:	82 e8       	ldi	r24, 0x82	; 130
     d70:	9f ef       	ldi	r25, 0xFF	; 255
     d72:	13 96       	adiw	r26, 0x03	; 3
     d74:	9c 93       	st	X, r25
     d76:	8e 93       	st	-X, r24
     d78:	12 97       	sbiw	r26, 0x02	; 2
     d7a:	9a 01       	movw	r18, r20
     d7c:	ab 01       	movw	r20, r22
     d7e:	67 e0       	ldi	r22, 0x07	; 7
     d80:	22 0f       	add	r18, r18
     d82:	33 1f       	adc	r19, r19
     d84:	44 1f       	adc	r20, r20
     d86:	55 1f       	adc	r21, r21
     d88:	6a 95       	dec	r22
     d8a:	d1 f7       	brne	.-12     	; 0xd80 <__unpack_f+0x54>
     d8c:	83 e0       	ldi	r24, 0x03	; 3
     d8e:	8c 93       	st	X, r24
     d90:	0d c0       	rjmp	.+26     	; 0xdac <__unpack_f+0x80>
     d92:	22 0f       	add	r18, r18
     d94:	33 1f       	adc	r19, r19
     d96:	44 1f       	adc	r20, r20
     d98:	55 1f       	adc	r21, r21
     d9a:	12 96       	adiw	r26, 0x02	; 2
     d9c:	8d 91       	ld	r24, X+
     d9e:	9c 91       	ld	r25, X
     da0:	13 97       	sbiw	r26, 0x03	; 3
     da2:	01 97       	sbiw	r24, 0x01	; 1
     da4:	13 96       	adiw	r26, 0x03	; 3
     da6:	9c 93       	st	X, r25
     da8:	8e 93       	st	-X, r24
     daa:	12 97       	sbiw	r26, 0x02	; 2
     dac:	20 30       	cpi	r18, 0x00	; 0
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	38 07       	cpc	r19, r24
     db2:	80 e0       	ldi	r24, 0x00	; 0
     db4:	48 07       	cpc	r20, r24
     db6:	80 e4       	ldi	r24, 0x40	; 64
     db8:	58 07       	cpc	r21, r24
     dba:	58 f3       	brcs	.-42     	; 0xd92 <__unpack_f+0x66>
     dbc:	14 96       	adiw	r26, 0x04	; 4
     dbe:	2d 93       	st	X+, r18
     dc0:	3d 93       	st	X+, r19
     dc2:	4d 93       	st	X+, r20
     dc4:	5c 93       	st	X, r21
     dc6:	17 97       	sbiw	r26, 0x07	; 7
     dc8:	08 95       	ret
     dca:	2f 3f       	cpi	r18, 0xFF	; 255
     dcc:	31 05       	cpc	r19, r1
     dce:	79 f4       	brne	.+30     	; 0xdee <__unpack_f+0xc2>
     dd0:	41 15       	cp	r20, r1
     dd2:	51 05       	cpc	r21, r1
     dd4:	61 05       	cpc	r22, r1
     dd6:	71 05       	cpc	r23, r1
     dd8:	19 f4       	brne	.+6      	; 0xde0 <__unpack_f+0xb4>
     dda:	84 e0       	ldi	r24, 0x04	; 4
     ddc:	8c 93       	st	X, r24
     dde:	08 95       	ret
     de0:	64 ff       	sbrs	r22, 4
     de2:	03 c0       	rjmp	.+6      	; 0xdea <__unpack_f+0xbe>
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	8c 93       	st	X, r24
     de8:	12 c0       	rjmp	.+36     	; 0xe0e <__unpack_f+0xe2>
     dea:	1c 92       	st	X, r1
     dec:	10 c0       	rjmp	.+32     	; 0xe0e <__unpack_f+0xe2>
     dee:	2f 57       	subi	r18, 0x7F	; 127
     df0:	30 40       	sbci	r19, 0x00	; 0
     df2:	13 96       	adiw	r26, 0x03	; 3
     df4:	3c 93       	st	X, r19
     df6:	2e 93       	st	-X, r18
     df8:	12 97       	sbiw	r26, 0x02	; 2
     dfa:	83 e0       	ldi	r24, 0x03	; 3
     dfc:	8c 93       	st	X, r24
     dfe:	87 e0       	ldi	r24, 0x07	; 7
     e00:	44 0f       	add	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	66 1f       	adc	r22, r22
     e06:	77 1f       	adc	r23, r23
     e08:	8a 95       	dec	r24
     e0a:	d1 f7       	brne	.-12     	; 0xe00 <__unpack_f+0xd4>
     e0c:	70 64       	ori	r23, 0x40	; 64
     e0e:	14 96       	adiw	r26, 0x04	; 4
     e10:	4d 93       	st	X+, r20
     e12:	5d 93       	st	X+, r21
     e14:	6d 93       	st	X+, r22
     e16:	7c 93       	st	X, r23
     e18:	17 97       	sbiw	r26, 0x07	; 7
     e1a:	08 95       	ret

00000e1c <__fpcmp_parts_f>:
     e1c:	1f 93       	push	r17
     e1e:	dc 01       	movw	r26, r24
     e20:	fb 01       	movw	r30, r22
     e22:	9c 91       	ld	r25, X
     e24:	92 30       	cpi	r25, 0x02	; 2
     e26:	08 f4       	brcc	.+2      	; 0xe2a <__fpcmp_parts_f+0xe>
     e28:	47 c0       	rjmp	.+142    	; 0xeb8 <__fpcmp_parts_f+0x9c>
     e2a:	80 81       	ld	r24, Z
     e2c:	82 30       	cpi	r24, 0x02	; 2
     e2e:	08 f4       	brcc	.+2      	; 0xe32 <__fpcmp_parts_f+0x16>
     e30:	43 c0       	rjmp	.+134    	; 0xeb8 <__fpcmp_parts_f+0x9c>
     e32:	94 30       	cpi	r25, 0x04	; 4
     e34:	51 f4       	brne	.+20     	; 0xe4a <__fpcmp_parts_f+0x2e>
     e36:	11 96       	adiw	r26, 0x01	; 1
     e38:	1c 91       	ld	r17, X
     e3a:	84 30       	cpi	r24, 0x04	; 4
     e3c:	99 f5       	brne	.+102    	; 0xea4 <__fpcmp_parts_f+0x88>
     e3e:	81 81       	ldd	r24, Z+1	; 0x01
     e40:	68 2f       	mov	r22, r24
     e42:	70 e0       	ldi	r23, 0x00	; 0
     e44:	61 1b       	sub	r22, r17
     e46:	71 09       	sbc	r23, r1
     e48:	3f c0       	rjmp	.+126    	; 0xec8 <__fpcmp_parts_f+0xac>
     e4a:	84 30       	cpi	r24, 0x04	; 4
     e4c:	21 f0       	breq	.+8      	; 0xe56 <__fpcmp_parts_f+0x3a>
     e4e:	92 30       	cpi	r25, 0x02	; 2
     e50:	31 f4       	brne	.+12     	; 0xe5e <__fpcmp_parts_f+0x42>
     e52:	82 30       	cpi	r24, 0x02	; 2
     e54:	b9 f1       	breq	.+110    	; 0xec4 <__fpcmp_parts_f+0xa8>
     e56:	81 81       	ldd	r24, Z+1	; 0x01
     e58:	88 23       	and	r24, r24
     e5a:	89 f1       	breq	.+98     	; 0xebe <__fpcmp_parts_f+0xa2>
     e5c:	2d c0       	rjmp	.+90     	; 0xeb8 <__fpcmp_parts_f+0x9c>
     e5e:	11 96       	adiw	r26, 0x01	; 1
     e60:	1c 91       	ld	r17, X
     e62:	11 97       	sbiw	r26, 0x01	; 1
     e64:	82 30       	cpi	r24, 0x02	; 2
     e66:	f1 f0       	breq	.+60     	; 0xea4 <__fpcmp_parts_f+0x88>
     e68:	81 81       	ldd	r24, Z+1	; 0x01
     e6a:	18 17       	cp	r17, r24
     e6c:	d9 f4       	brne	.+54     	; 0xea4 <__fpcmp_parts_f+0x88>
     e6e:	12 96       	adiw	r26, 0x02	; 2
     e70:	2d 91       	ld	r18, X+
     e72:	3c 91       	ld	r19, X
     e74:	13 97       	sbiw	r26, 0x03	; 3
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	82 17       	cp	r24, r18
     e7c:	93 07       	cpc	r25, r19
     e7e:	94 f0       	brlt	.+36     	; 0xea4 <__fpcmp_parts_f+0x88>
     e80:	28 17       	cp	r18, r24
     e82:	39 07       	cpc	r19, r25
     e84:	bc f0       	brlt	.+46     	; 0xeb4 <__fpcmp_parts_f+0x98>
     e86:	14 96       	adiw	r26, 0x04	; 4
     e88:	8d 91       	ld	r24, X+
     e8a:	9d 91       	ld	r25, X+
     e8c:	0d 90       	ld	r0, X+
     e8e:	bc 91       	ld	r27, X
     e90:	a0 2d       	mov	r26, r0
     e92:	24 81       	ldd	r18, Z+4	; 0x04
     e94:	35 81       	ldd	r19, Z+5	; 0x05
     e96:	46 81       	ldd	r20, Z+6	; 0x06
     e98:	57 81       	ldd	r21, Z+7	; 0x07
     e9a:	28 17       	cp	r18, r24
     e9c:	39 07       	cpc	r19, r25
     e9e:	4a 07       	cpc	r20, r26
     ea0:	5b 07       	cpc	r21, r27
     ea2:	18 f4       	brcc	.+6      	; 0xeaa <__fpcmp_parts_f+0x8e>
     ea4:	11 23       	and	r17, r17
     ea6:	41 f0       	breq	.+16     	; 0xeb8 <__fpcmp_parts_f+0x9c>
     ea8:	0a c0       	rjmp	.+20     	; 0xebe <__fpcmp_parts_f+0xa2>
     eaa:	82 17       	cp	r24, r18
     eac:	93 07       	cpc	r25, r19
     eae:	a4 07       	cpc	r26, r20
     eb0:	b5 07       	cpc	r27, r21
     eb2:	40 f4       	brcc	.+16     	; 0xec4 <__fpcmp_parts_f+0xa8>
     eb4:	11 23       	and	r17, r17
     eb6:	19 f0       	breq	.+6      	; 0xebe <__fpcmp_parts_f+0xa2>
     eb8:	61 e0       	ldi	r22, 0x01	; 1
     eba:	70 e0       	ldi	r23, 0x00	; 0
     ebc:	05 c0       	rjmp	.+10     	; 0xec8 <__fpcmp_parts_f+0xac>
     ebe:	6f ef       	ldi	r22, 0xFF	; 255
     ec0:	7f ef       	ldi	r23, 0xFF	; 255
     ec2:	02 c0       	rjmp	.+4      	; 0xec8 <__fpcmp_parts_f+0xac>
     ec4:	60 e0       	ldi	r22, 0x00	; 0
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	cb 01       	movw	r24, r22
     eca:	1f 91       	pop	r17
     ecc:	08 95       	ret

00000ece <_ZN5Print5writeEPKc>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
     ece:	0f 93       	push	r16
     ed0:	1f 93       	push	r17
     ed2:	cf 93       	push	r28
     ed4:	df 93       	push	r29
     ed6:	8c 01       	movw	r16, r24
     ed8:	eb 01       	movw	r28, r22
     eda:	09 c0       	rjmp	.+18     	; 0xeee <_ZN5Print5writeEPKc+0x20>
{
  while (*str)
    write(*str++);
     edc:	21 96       	adiw	r28, 0x01	; 1
     ede:	d8 01       	movw	r26, r16
     ee0:	ed 91       	ld	r30, X+
     ee2:	fc 91       	ld	r31, X
     ee4:	01 90       	ld	r0, Z+
     ee6:	f0 81       	ld	r31, Z
     ee8:	e0 2d       	mov	r30, r0
     eea:	c8 01       	movw	r24, r16
     eec:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
     eee:	68 81       	ld	r22, Y
     ef0:	66 23       	and	r22, r22
     ef2:	a1 f7       	brne	.-24     	; 0xedc <_ZN5Print5writeEPKc+0xe>
    write(*str++);
}
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	0f 91       	pop	r16
     efc:	08 95       	ret

00000efe <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
     efe:	ef 92       	push	r14
     f00:	ff 92       	push	r15
     f02:	0f 93       	push	r16
     f04:	1f 93       	push	r17
     f06:	cf 93       	push	r28
     f08:	df 93       	push	r29
     f0a:	8c 01       	movw	r16, r24
     f0c:	7b 01       	movw	r14, r22
     f0e:	ea 01       	movw	r28, r20
     f10:	0c c0       	rjmp	.+24     	; 0xf2a <_ZN5Print5writeEPKhj+0x2c>
{
  while (size--)
    write(*buffer++);
     f12:	d7 01       	movw	r26, r14
     f14:	6d 91       	ld	r22, X+
     f16:	7d 01       	movw	r14, r26
     f18:	d8 01       	movw	r26, r16
     f1a:	ed 91       	ld	r30, X+
     f1c:	fc 91       	ld	r31, X
     f1e:	01 90       	ld	r0, Z+
     f20:	f0 81       	ld	r31, Z
     f22:	e0 2d       	mov	r30, r0
     f24:	c8 01       	movw	r24, r16
     f26:	09 95       	icall
     f28:	21 97       	sbiw	r28, 0x01	; 1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
     f2a:	20 97       	sbiw	r28, 0x00	; 0
     f2c:	91 f7       	brne	.-28     	; 0xf12 <_ZN5Print5writeEPKhj+0x14>
    write(*buffer++);
}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	08 95       	ret

00000f3c <_ZN5Print5printEh>:

void Print::print(uint8_t b)
     f3c:	dc 01       	movw	r26, r24
{
  this->write(b);
     f3e:	ed 91       	ld	r30, X+
     f40:	fc 91       	ld	r31, X
     f42:	01 90       	ld	r0, Z+
     f44:	f0 81       	ld	r31, Z
     f46:	e0 2d       	mov	r30, r0
     f48:	09 95       	icall
}
     f4a:	08 95       	ret

00000f4c <_ZN5Print5printEc>:

void Print::print(char c)
     f4c:	dc 01       	movw	r26, r24
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
     f4e:	ed 91       	ld	r30, X+
     f50:	fc 91       	ld	r31, X
     f52:	01 90       	ld	r0, Z+
     f54:	f0 81       	ld	r31, Z
     f56:	e0 2d       	mov	r30, r0
     f58:	09 95       	icall
}

void Print::print(char c)
{
  print((byte) c);
}
     f5a:	08 95       	ret

00000f5c <_ZN5Print5printEPKc>:

void Print::print(const char str[])
     f5c:	dc 01       	movw	r26, r24
{
  write(str);
     f5e:	ed 91       	ld	r30, X+
     f60:	fc 91       	ld	r31, X
     f62:	02 80       	ldd	r0, Z+2	; 0x02
     f64:	f3 81       	ldd	r31, Z+3	; 0x03
     f66:	e0 2d       	mov	r30, r0
     f68:	09 95       	icall
}
     f6a:	08 95       	ret

00000f6c <_ZN5Print7printlnEv>:
void Print::print(double n)
{
  printFloat(n, 2);
}

void Print::println(void)
     f6c:	0f 93       	push	r16
     f6e:	1f 93       	push	r17
     f70:	8c 01       	movw	r16, r24
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
     f72:	dc 01       	movw	r26, r24
     f74:	ed 91       	ld	r30, X+
     f76:	fc 91       	ld	r31, X
     f78:	01 90       	ld	r0, Z+
     f7a:	f0 81       	ld	r31, Z
     f7c:	e0 2d       	mov	r30, r0
     f7e:	6d e0       	ldi	r22, 0x0D	; 13
     f80:	09 95       	icall

void Print::println(void)
{
  print('\r');
  print('\n');  
}
     f82:	d8 01       	movw	r26, r16
     f84:	ed 91       	ld	r30, X+
     f86:	fc 91       	ld	r31, X
     f88:	01 90       	ld	r0, Z+
     f8a:	f0 81       	ld	r31, Z
     f8c:	e0 2d       	mov	r30, r0
     f8e:	c8 01       	movw	r24, r16
     f90:	6a e0       	ldi	r22, 0x0A	; 10
     f92:	09 95       	icall
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <_ZN5Print7printlnEc>:

void Print::println(char c)
     f9a:	0f 93       	push	r16
     f9c:	1f 93       	push	r17
     f9e:	8c 01       	movw	r16, r24
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
     fa0:	dc 01       	movw	r26, r24
     fa2:	ed 91       	ld	r30, X+
     fa4:	fc 91       	ld	r31, X
     fa6:	01 90       	ld	r0, Z+
     fa8:	f0 81       	ld	r31, Z
     faa:	e0 2d       	mov	r30, r0
     fac:	09 95       	icall
}

void Print::println(char c)
{
  print(c);
  println();  
     fae:	c8 01       	movw	r24, r16
     fb0:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
}
     fb4:	1f 91       	pop	r17
     fb6:	0f 91       	pop	r16
     fb8:	08 95       	ret

00000fba <_ZN5Print7printlnEPKc>:

void Print::println(const char c[])
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	8c 01       	movw	r16, r24
{
  print(c);
     fc0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN5Print5printEPKc>
  println();
     fc4:	c8 01       	movw	r24, r16
     fc6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
}
     fca:	1f 91       	pop	r17
     fcc:	0f 91       	pop	r16
     fce:	08 95       	ret

00000fd0 <_ZN5Print7printlnEh>:

void Print::println(uint8_t b)
     fd0:	0f 93       	push	r16
     fd2:	1f 93       	push	r17
     fd4:	8c 01       	movw	r16, r24
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
     fd6:	dc 01       	movw	r26, r24
     fd8:	ed 91       	ld	r30, X+
     fda:	fc 91       	ld	r31, X
     fdc:	01 90       	ld	r0, Z+
     fde:	f0 81       	ld	r31, Z
     fe0:	e0 2d       	mov	r30, r0
     fe2:	09 95       	icall
}

void Print::println(uint8_t b)
{
  print(b);
  println();
     fe4:	c8 01       	movw	r24, r16
     fe6:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
}
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	08 95       	ret

00000ff0 <_ZN5Print11printNumberEmh>:
  println();
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
     ff0:	2f 92       	push	r2
     ff2:	3f 92       	push	r3
     ff4:	4f 92       	push	r4
     ff6:	5f 92       	push	r5
     ff8:	6f 92       	push	r6
     ffa:	7f 92       	push	r7
     ffc:	8f 92       	push	r8
     ffe:	9f 92       	push	r9
    1000:	af 92       	push	r10
    1002:	bf 92       	push	r11
    1004:	cf 92       	push	r12
    1006:	df 92       	push	r13
    1008:	ef 92       	push	r14
    100a:	ff 92       	push	r15
    100c:	0f 93       	push	r16
    100e:	1f 93       	push	r17
    1010:	df 93       	push	r29
    1012:	cf 93       	push	r28
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	a0 97       	sbiw	r28, 0x20	; 32
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	f8 94       	cli
    101e:	de bf       	out	0x3e, r29	; 62
    1020:	0f be       	out	0x3f, r0	; 63
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	1c 01       	movw	r2, r24
    1026:	6a 01       	movw	r12, r20
    1028:	7b 01       	movw	r14, r22
{
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;

  if (n == 0) {
    102a:	41 15       	cp	r20, r1
    102c:	51 05       	cpc	r21, r1
    102e:	61 05       	cpc	r22, r1
    1030:	71 05       	cpc	r23, r1
    1032:	49 f4       	brne	.+18     	; 0x1046 <_ZN5Print11printNumberEmh+0x56>
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
    1034:	dc 01       	movw	r26, r24
    1036:	ed 91       	ld	r30, X+
    1038:	fc 91       	ld	r31, X
    103a:	01 90       	ld	r0, Z+
    103c:	f0 81       	ld	r31, Z
    103e:	e0 2d       	mov	r30, r0
    1040:	60 e3       	ldi	r22, 0x30	; 48
    1042:	09 95       	icall
    1044:	54 c0       	rjmp	.+168    	; 0x10ee <_ZN5Print11printNumberEmh+0xfe>
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;

  if (n == 0) {
    print('0');
    return;
    1046:	88 24       	eor	r8, r8
    1048:	99 24       	eor	r9, r9
    104a:	54 01       	movw	r10, r8
  } 

  while (n > 0) {
    buf[i++] = n % base;
    104c:	42 2e       	mov	r4, r18
    104e:	55 24       	eor	r5, r5
    1050:	66 24       	eor	r6, r6
    1052:	77 24       	eor	r7, r7
    1054:	01 e0       	ldi	r16, 0x01	; 1
    1056:	10 e0       	ldi	r17, 0x00	; 0
    1058:	0c 0f       	add	r16, r28
    105a:	1d 1f       	adc	r17, r29
    105c:	08 0d       	add	r16, r8
    105e:	19 1d       	adc	r17, r9
    1060:	c7 01       	movw	r24, r14
    1062:	b6 01       	movw	r22, r12
    1064:	a3 01       	movw	r20, r6
    1066:	92 01       	movw	r18, r4
    1068:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    106c:	f8 01       	movw	r30, r16
    106e:	60 83       	st	Z, r22
    1070:	08 94       	sec
    1072:	81 1c       	adc	r8, r1
    1074:	91 1c       	adc	r9, r1
    1076:	a1 1c       	adc	r10, r1
    1078:	b1 1c       	adc	r11, r1
    n /= base;
    107a:	c7 01       	movw	r24, r14
    107c:	b6 01       	movw	r22, r12
    107e:	a3 01       	movw	r20, r6
    1080:	92 01       	movw	r18, r4
    1082:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1086:	c9 01       	movw	r24, r18
    1088:	da 01       	movw	r26, r20
    108a:	6c 01       	movw	r12, r24
    108c:	7d 01       	movw	r14, r26
  if (n == 0) {
    print('0');
    return;
  } 

  while (n > 0) {
    108e:	c1 14       	cp	r12, r1
    1090:	d1 04       	cpc	r13, r1
    1092:	e1 04       	cpc	r14, r1
    1094:	f1 04       	cpc	r15, r1
    1096:	f1 f6       	brne	.-68     	; 0x1054 <_ZN5Print11printNumberEmh+0x64>
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	e8 2e       	mov	r14, r24
    109c:	f1 2c       	mov	r15, r1
    109e:	ec 0e       	add	r14, r28
    10a0:	fd 1e       	adc	r15, r29
    10a2:	e8 0c       	add	r14, r8
    10a4:	f9 1c       	adc	r15, r9
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    10a6:	3e 01       	movw	r6, r28
    10a8:	08 94       	sec
    10aa:	61 1c       	adc	r6, r1
    10ac:	71 1c       	adc	r7, r1
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    10ae:	d5 01       	movw	r26, r10
    10b0:	c4 01       	movw	r24, r8
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	a1 09       	sbc	r26, r1
    10b6:	b1 09       	sbc	r27, r1
    10b8:	6c 01       	movw	r12, r24
    10ba:	c8 18       	sub	r12, r8
    10bc:	d9 08       	sbc	r13, r9
    10be:	14 c0       	rjmp	.+40     	; 0x10e8 <_ZN5Print11printNumberEmh+0xf8>
    10c0:	f6 01       	movw	r30, r12
    10c2:	ee 0d       	add	r30, r14
    10c4:	ff 1d       	adc	r31, r15
    10c6:	60 81       	ld	r22, Z
    10c8:	6a 30       	cpi	r22, 0x0A	; 10
    10ca:	10 f4       	brcc	.+4      	; 0x10d0 <_ZN5Print11printNumberEmh+0xe0>
    10cc:	60 5d       	subi	r22, 0xD0	; 208
    10ce:	01 c0       	rjmp	.+2      	; 0x10d2 <_ZN5Print11printNumberEmh+0xe2>
    10d0:	69 5c       	subi	r22, 0xC9	; 201
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
    10d2:	d1 01       	movw	r26, r2
    10d4:	ed 91       	ld	r30, X+
    10d6:	fc 91       	ld	r31, X
    10d8:	01 90       	ld	r0, Z+
    10da:	f0 81       	ld	r31, Z
    10dc:	e0 2d       	mov	r30, r0
    10de:	c1 01       	movw	r24, r2
    10e0:	09 95       	icall
    10e2:	08 94       	sec
    10e4:	e1 08       	sbc	r14, r1
    10e6:	f1 08       	sbc	r15, r1
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    10e8:	6e 14       	cp	r6, r14
    10ea:	7f 04       	cpc	r7, r15
    10ec:	49 f7       	brne	.-46     	; 0x10c0 <_ZN5Print11printNumberEmh+0xd0>
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
    10ee:	a0 96       	adiw	r28, 0x20	; 32
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	cf 91       	pop	r28
    10fc:	df 91       	pop	r29
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	bf 90       	pop	r11
    110c:	af 90       	pop	r10
    110e:	9f 90       	pop	r9
    1110:	8f 90       	pop	r8
    1112:	7f 90       	pop	r7
    1114:	6f 90       	pop	r6
    1116:	5f 90       	pop	r5
    1118:	4f 90       	pop	r4
    111a:	3f 90       	pop	r3
    111c:	2f 90       	pop	r2
    111e:	08 95       	ret

00001120 <_ZN5Print5printEm>:
  printNumber(n, 10);
}

void Print::print(unsigned long n)
{
  printNumber(n, 10);
    1120:	2a e0       	ldi	r18, 0x0A	; 10
    1122:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZN5Print11printNumberEmh>
}
    1126:	08 95       	ret

00001128 <_ZN5Print7printlnEm>:
{
  print(n);
  println();  
}

void Print::println(unsigned long n)
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	8c 01       	movw	r16, r24
{
  print(n);
    112e:	0e 94 90 08 	call	0x1120	; 0x1120 <_ZN5Print5printEm>
  println();  
    1132:	c8 01       	movw	r24, r16
    1134:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
}
    1138:	1f 91       	pop	r17
    113a:	0f 91       	pop	r16
    113c:	08 95       	ret

0000113e <_ZN5Print5printEj>:
  print((long) n);
}

void Print::print(unsigned int n)
{
  print((unsigned long) n);
    113e:	ab 01       	movw	r20, r22
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	0e 94 90 08 	call	0x1120	; 0x1120 <_ZN5Print5printEm>
}
    1148:	08 95       	ret

0000114a <_ZN5Print7printlnEj>:
{
  print(n);
  println();
}

void Print::println(unsigned int n)
    114a:	0f 93       	push	r16
    114c:	1f 93       	push	r17
    114e:	8c 01       	movw	r16, r24
  print((long) n);
}

void Print::print(unsigned int n)
{
  print((unsigned long) n);
    1150:	ab 01       	movw	r20, r22
    1152:	60 e0       	ldi	r22, 0x00	; 0
    1154:	70 e0       	ldi	r23, 0x00	; 0
    1156:	0e 94 90 08 	call	0x1120	; 0x1120 <_ZN5Print5printEm>
}

void Print::println(unsigned int n)
{
  print(n);
  println();
    115a:	c8 01       	movw	r24, r16
    115c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
}
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <_ZN5Print5printEl>:
void Print::print(unsigned int n)
{
  print((unsigned long) n);
}

void Print::print(long n)
    1166:	ef 92       	push	r14
    1168:	ff 92       	push	r15
    116a:	0f 93       	push	r16
    116c:	1f 93       	push	r17
    116e:	cf 93       	push	r28
    1170:	df 93       	push	r29
    1172:	ec 01       	movw	r28, r24
    1174:	7a 01       	movw	r14, r20
    1176:	8b 01       	movw	r16, r22
{
  if (n < 0) {
    1178:	77 ff       	sbrs	r23, 7
    117a:	0f c0       	rjmp	.+30     	; 0x119a <_ZN5Print5printEl+0x34>
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
    117c:	e8 81       	ld	r30, Y
    117e:	f9 81       	ldd	r31, Y+1	; 0x01
    1180:	01 90       	ld	r0, Z+
    1182:	f0 81       	ld	r31, Z
    1184:	e0 2d       	mov	r30, r0
    1186:	6d e2       	ldi	r22, 0x2D	; 45
    1188:	09 95       	icall

void Print::print(long n)
{
  if (n < 0) {
    print('-');
    n = -n;
    118a:	10 95       	com	r17
    118c:	00 95       	com	r16
    118e:	f0 94       	com	r15
    1190:	e0 94       	com	r14
    1192:	e1 1c       	adc	r14, r1
    1194:	f1 1c       	adc	r15, r1
    1196:	01 1d       	adc	r16, r1
    1198:	11 1d       	adc	r17, r1
  }
  printNumber(n, 10);
    119a:	ce 01       	movw	r24, r28
    119c:	b8 01       	movw	r22, r16
    119e:	a7 01       	movw	r20, r14
    11a0:	2a e0       	ldi	r18, 0x0A	; 10
    11a2:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZN5Print11printNumberEmh>
}
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	ff 90       	pop	r15
    11b0:	ef 90       	pop	r14
    11b2:	08 95       	ret

000011b4 <_ZN5Print7printlnEl>:
{
  print(n);
  println();
}

void Print::println(long n)
    11b4:	0f 93       	push	r16
    11b6:	1f 93       	push	r17
    11b8:	8c 01       	movw	r16, r24
{
  print(n);
    11ba:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN5Print5printEl>
  println();  
    11be:	c8 01       	movw	r24, r16
    11c0:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
}
    11c4:	1f 91       	pop	r17
    11c6:	0f 91       	pop	r16
    11c8:	08 95       	ret

000011ca <_ZN5Print5printEi>:
void Print::print(const char str[])
{
  write(str);
}

void Print::print(int n)
    11ca:	ab 01       	movw	r20, r22
{
  print((long) n);
    11cc:	66 27       	eor	r22, r22
    11ce:	57 fd       	sbrc	r21, 7
    11d0:	60 95       	com	r22
    11d2:	76 2f       	mov	r23, r22
    11d4:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN5Print5printEl>
}
    11d8:	08 95       	ret

000011da <_ZN5Print7printlnEi>:
{
  print(b);
  println();
}

void Print::println(int n)
    11da:	0f 93       	push	r16
    11dc:	1f 93       	push	r17
    11de:	8c 01       	movw	r16, r24
    11e0:	ab 01       	movw	r20, r22
  write(str);
}

void Print::print(int n)
{
  print((long) n);
    11e2:	66 27       	eor	r22, r22
    11e4:	57 fd       	sbrc	r21, 7
    11e6:	60 95       	com	r22
    11e8:	76 2f       	mov	r23, r22
    11ea:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN5Print5printEl>
}

void Print::println(int n)
{
  print(n);
  println();
    11ee:	c8 01       	movw	r24, r16
    11f0:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
}
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	08 95       	ret

000011fa <_ZN5Print5printEli>:
void Print::print(unsigned long n)
{
  printNumber(n, 10);
}

void Print::print(long n, int base)
    11fa:	dc 01       	movw	r26, r24
{
  if (base == 0)
    11fc:	21 15       	cp	r18, r1
    11fe:	31 05       	cpc	r19, r1
    1200:	41 f4       	brne	.+16     	; 0x1212 <_ZN5Print5printEli+0x18>
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
    1202:	ed 91       	ld	r30, X+
    1204:	fc 91       	ld	r31, X
    1206:	01 90       	ld	r0, Z+
    1208:	f0 81       	ld	r31, Z
    120a:	e0 2d       	mov	r30, r0
    120c:	64 2f       	mov	r22, r20
    120e:	09 95       	icall
    1210:	08 95       	ret

void Print::print(long n, int base)
{
  if (base == 0)
    print((char) n);
  else if (base == 10)
    1212:	2a 30       	cpi	r18, 0x0A	; 10
    1214:	31 05       	cpc	r19, r1
    1216:	19 f4       	brne	.+6      	; 0x121e <_ZN5Print5printEli+0x24>
    print(n);
    1218:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN5Print5printEl>
    121c:	08 95       	ret
  else
    printNumber(n, base);
    121e:	0e 94 f8 07 	call	0xff0	; 0xff0 <_ZN5Print11printNumberEmh>
    1222:	08 95       	ret

00001224 <_ZN5Print7printlnEli>:
{
  print(n);
  println();  
}

void Print::println(long n, int base)
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	8c 01       	movw	r16, r24
{
  print(n, base);
    122a:	0e 94 fd 08 	call	0x11fa	; 0x11fa <_ZN5Print5printEli>
  println();
    122e:	c8 01       	movw	r24, r16
    1230:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
}
    1234:	1f 91       	pop	r17
    1236:	0f 91       	pop	r16
    1238:	08 95       	ret

0000123a <_ZN5Print10printFloatEdh>:
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void Print::printFloat(double number, uint8_t digits) 
    123a:	9f 92       	push	r9
    123c:	af 92       	push	r10
    123e:	bf 92       	push	r11
    1240:	cf 92       	push	r12
    1242:	df 92       	push	r13
    1244:	ef 92       	push	r14
    1246:	ff 92       	push	r15
    1248:	0f 93       	push	r16
    124a:	1f 93       	push	r17
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	ec 01       	movw	r28, r24
    1252:	7a 01       	movw	r14, r20
    1254:	8b 01       	movw	r16, r22
    1256:	92 2e       	mov	r9, r18
{ 
  // Handle negative numbers
  if (number < 0.0)
    1258:	cb 01       	movw	r24, r22
    125a:	ba 01       	movw	r22, r20
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	50 e0       	ldi	r21, 0x00	; 0
    1264:	0e 94 17 04 	call	0x82e	; 0x82e <__ltsf2>
    1268:	88 23       	and	r24, r24
    126a:	64 f4       	brge	.+24     	; 0x1284 <_ZN5Print10printFloatEdh+0x4a>
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
    126c:	e8 81       	ld	r30, Y
    126e:	f9 81       	ldd	r31, Y+1	; 0x01
    1270:	01 90       	ld	r0, Z+
    1272:	f0 81       	ld	r31, Z
    1274:	e0 2d       	mov	r30, r0
    1276:	ce 01       	movw	r24, r28
    1278:	6d e2       	ldi	r22, 0x2D	; 45
    127a:	09 95       	icall
{ 
  // Handle negative numbers
  if (number < 0.0)
  {
     print('-');
     number = -number;
    127c:	17 fb       	bst	r17, 7
    127e:	10 95       	com	r17
    1280:	17 f9       	bld	r17, 7
    1282:	10 95       	com	r17
    1284:	20 e0       	ldi	r18, 0x00	; 0
    1286:	30 e0       	ldi	r19, 0x00	; 0
    1288:	40 e0       	ldi	r20, 0x00	; 0
    128a:	5f e3       	ldi	r21, 0x3F	; 63
    128c:	aa 24       	eor	r10, r10
    128e:	0b c0       	rjmp	.+22     	; 0x12a6 <_ZN5Print10printFloatEdh+0x6c>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    1290:	ca 01       	movw	r24, r20
    1292:	b9 01       	movw	r22, r18
    1294:	20 e0       	ldi	r18, 0x00	; 0
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e2       	ldi	r20, 0x20	; 32
    129a:	51 e4       	ldi	r21, 0x41	; 65
    129c:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
    12a0:	9b 01       	movw	r18, r22
    12a2:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    12a4:	a3 94       	inc	r10
    12a6:	a9 14       	cp	r10, r9
    12a8:	98 f3       	brcs	.-26     	; 0x1290 <_ZN5Print10printFloatEdh+0x56>
    rounding /= 10.0;
  
  number += rounding;
    12aa:	c8 01       	movw	r24, r16
    12ac:	b7 01       	movw	r22, r14
    12ae:	0e 94 14 02 	call	0x428	; 0x428 <__addsf3>
    12b2:	5b 01       	movw	r10, r22
    12b4:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    12b6:	0e 94 6b 00 	call	0xd6	; 0xd6 <__fixunssfsi>
    12ba:	7b 01       	movw	r14, r22
    12bc:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  print(int_part);
    12be:	ce 01       	movw	r24, r28
    12c0:	b8 01       	movw	r22, r16
    12c2:	a7 01       	movw	r20, r14
    12c4:	0e 94 90 08 	call	0x1120	; 0x1120 <_ZN5Print5printEm>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    12c8:	99 20       	and	r9, r9
    12ca:	29 f0       	breq	.+10     	; 0x12d6 <_ZN5Print10printFloatEdh+0x9c>
    print("."); 
    12cc:	ce 01       	movw	r24, r28
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	71 e0       	ldi	r23, 0x01	; 1
    12d2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN5Print5printEPKc>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    12d6:	c8 01       	movw	r24, r16
    12d8:	b7 01       	movw	r22, r14
    12da:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatunsisf>
    12de:	9b 01       	movw	r18, r22
    12e0:	ac 01       	movw	r20, r24
    12e2:	c6 01       	movw	r24, r12
    12e4:	b5 01       	movw	r22, r10
    12e6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__subsf3>
    12ea:	20 c0       	rjmp	.+64     	; 0x132c <_ZN5Print10printFloatEdh+0xf2>
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e2       	ldi	r20, 0x20	; 32
    12f2:	51 e4       	ldi	r21, 0x41	; 65
    12f4:	0e 94 41 02 	call	0x482	; 0x482 <__mulsf3>
    12f8:	7b 01       	movw	r14, r22
    12fa:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    12fc:	0e 94 a5 04 	call	0x94a	; 0x94a <__fixsfsi>
    1300:	5b 01       	movw	r10, r22
    1302:	6c 01       	movw	r12, r24
  write(str);
}

void Print::print(int n)
{
  print((long) n);
    1304:	cc 24       	eor	r12, r12
    1306:	b7 fc       	sbrc	r11, 7
    1308:	c0 94       	com	r12
    130a:	dc 2c       	mov	r13, r12
    130c:	ce 01       	movw	r24, r28
    130e:	b6 01       	movw	r22, r12
    1310:	a5 01       	movw	r20, r10
    1312:	0e 94 b3 08 	call	0x1166	; 0x1166 <_ZN5Print5printEl>
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
    1316:	c6 01       	movw	r24, r12
    1318:	b5 01       	movw	r22, r10
    131a:	0e 94 47 04 	call	0x88e	; 0x88e <__floatsisf>
    131e:	9b 01       	movw	r18, r22
    1320:	ac 01       	movw	r20, r24
    1322:	c8 01       	movw	r24, r16
    1324:	b7 01       	movw	r22, r14
    1326:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <__subsf3>
    132a:	9a 94       	dec	r9
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    132c:	99 20       	and	r9, r9
    132e:	f1 f6       	brne	.-68     	; 0x12ec <_ZN5Print10printFloatEdh+0xb2>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ff 90       	pop	r15
    133a:	ef 90       	pop	r14
    133c:	df 90       	pop	r13
    133e:	cf 90       	pop	r12
    1340:	bf 90       	pop	r11
    1342:	af 90       	pop	r10
    1344:	9f 90       	pop	r9
    1346:	08 95       	ret

00001348 <_ZN5Print5printEd>:
    printNumber(n, base);
}

void Print::print(double n)
{
  printFloat(n, 2);
    1348:	22 e0       	ldi	r18, 0x02	; 2
    134a:	0e 94 1d 09 	call	0x123a	; 0x123a <_ZN5Print10printFloatEdh>
}
    134e:	08 95       	ret

00001350 <_ZN5Print7printlnEd>:
{
  print(n, base);
  println();
}

void Print::println(double n)
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	8c 01       	movw	r16, r24
{
  print(n);
    1356:	0e 94 a4 09 	call	0x1348	; 0x1348 <_ZN5Print5printEd>
  println();
    135a:	c8 01       	movw	r24, r16
    135c:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
}
    1360:	1f 91       	pop	r17
    1362:	0f 91       	pop	r16
    1364:	08 95       	ret

00001366 <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1366:	8f 92       	push	r8
    1368:	af 92       	push	r10
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	df 93       	push	r29
    1378:	cf 93       	push	r28
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	fc 01       	movw	r30, r24
    1380:	8c e1       	ldi	r24, 0x1C	; 28
    1382:	93 e0       	ldi	r25, 0x03	; 3
    1384:	91 83       	std	Z+1, r25	; 0x01
    1386:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1388:	73 83       	std	Z+3, r23	; 0x03
    138a:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    138c:	55 83       	std	Z+5, r21	; 0x05
    138e:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    1390:	37 83       	std	Z+7, r19	; 0x07
    1392:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    1394:	11 87       	std	Z+9, r17	; 0x09
    1396:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    1398:	f3 86       	std	Z+11, r15	; 0x0b
    139a:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    139c:	d5 86       	std	Z+13, r13	; 0x0d
    139e:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    13a0:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    13a2:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    13a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a6:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    13a8:	8e 85       	ldd	r24, Y+14	; 0x0e
    13aa:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    13ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    13ae:	82 8b       	std	Z+18, r24	; 0x12
}
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	cf 90       	pop	r12
    13c0:	af 90       	pop	r10
    13c2:	8f 90       	pop	r8
    13c4:	08 95       	ret

000013c6 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    13c6:	8f 92       	push	r8
    13c8:	af 92       	push	r10
    13ca:	cf 92       	push	r12
    13cc:	df 92       	push	r13
    13ce:	ef 92       	push	r14
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	df 93       	push	r29
    13d8:	cf 93       	push	r28
    13da:	cd b7       	in	r28, 0x3d	; 61
    13dc:	de b7       	in	r29, 0x3e	; 62
    13de:	fc 01       	movw	r30, r24
    13e0:	8c e1       	ldi	r24, 0x1C	; 28
    13e2:	93 e0       	ldi	r25, 0x03	; 3
    13e4:	91 83       	std	Z+1, r25	; 0x01
    13e6:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    13e8:	73 83       	std	Z+3, r23	; 0x03
    13ea:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    13ec:	55 83       	std	Z+5, r21	; 0x05
    13ee:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    13f0:	37 83       	std	Z+7, r19	; 0x07
    13f2:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    13f4:	11 87       	std	Z+9, r17	; 0x09
    13f6:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    13f8:	f3 86       	std	Z+11, r15	; 0x0b
    13fa:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    13fc:	d5 86       	std	Z+13, r13	; 0x0d
    13fe:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    1400:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    1402:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    1404:	8d 85       	ldd	r24, Y+13	; 0x0d
    1406:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1408:	8e 85       	ldd	r24, Y+14	; 0x0e
    140a:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    140c:	8f 85       	ldd	r24, Y+15	; 0x0f
    140e:	82 8b       	std	Z+18, r24	; 0x12
}
    1410:	cf 91       	pop	r28
    1412:	df 91       	pop	r29
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	af 90       	pop	r10
    1422:	8f 90       	pop	r8
    1424:	08 95       	ret

00001426 <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
    1426:	8f 92       	push	r8
    1428:	9f 92       	push	r9
    142a:	af 92       	push	r10
    142c:	bf 92       	push	r11
    142e:	cf 92       	push	r12
    1430:	df 92       	push	r13
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	4c 01       	movw	r8, r24
{
  uint16_t baud_setting;
  bool use_u2x;

  // U2X mode is needed for baud rates higher than (CPU Hz / 16)
  if (baud > F_CPU / 16) {
    1440:	7a 01       	movw	r14, r20
    1442:	8b 01       	movw	r16, r22
    1444:	81 ed       	ldi	r24, 0xD1	; 209
    1446:	e8 16       	cp	r14, r24
    1448:	82 e1       	ldi	r24, 0x12	; 18
    144a:	f8 06       	cpc	r15, r24
    144c:	83 e1       	ldi	r24, 0x13	; 19
    144e:	08 07       	cpc	r16, r24
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	18 07       	cpc	r17, r24
    1454:	08 f0       	brcs	.+2      	; 0x1458 <_ZN14HardwareSerial5beginEl+0x32>
    1456:	73 c0       	rjmp	.+230    	; 0x153e <_ZN14HardwareSerial5beginEl+0x118>
  } else {
    // figure out if U2X mode would allow for a better connection
    
    // calculate the percent difference between the baud-rate specified and
    // the real baud rate for both U2X and non-U2X mode (0-255 error percent)
    uint8_t nonu2x_baud_error = abs((int)(255-((F_CPU/(16*(((F_CPU/8/baud-1)/2)+1))*255)/baud)));
    1458:	60 ea       	ldi	r22, 0xA0	; 160
    145a:	75 e2       	ldi	r23, 0x25	; 37
    145c:	86 e2       	ldi	r24, 0x26	; 38
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	a8 01       	movw	r20, r16
    1462:	97 01       	movw	r18, r14
    1464:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1468:	59 01       	movw	r10, r18
    146a:	6a 01       	movw	r12, r20
    146c:	08 94       	sec
    146e:	a1 08       	sbc	r10, r1
    1470:	b1 08       	sbc	r11, r1
    1472:	c1 08       	sbc	r12, r1
    1474:	d1 08       	sbc	r13, r1
    1476:	d6 94       	lsr	r13
    1478:	c7 94       	ror	r12
    147a:	b7 94       	ror	r11
    147c:	a7 94       	ror	r10
    
    // prefer non-U2X mode because it handles clock skew better
    use_u2x = (nonu2x_baud_error > u2x_baud_error);
  }
  
  if (use_u2x) {
    147e:	a6 01       	movw	r20, r12
    1480:	95 01       	movw	r18, r10
    1482:	2f 5f       	subi	r18, 0xFF	; 255
    1484:	3f 4f       	sbci	r19, 0xFF	; 255
    1486:	4f 4f       	sbci	r20, 0xFF	; 255
    1488:	5f 4f       	sbci	r21, 0xFF	; 255
    148a:	74 e0       	ldi	r23, 0x04	; 4
    148c:	22 0f       	add	r18, r18
    148e:	33 1f       	adc	r19, r19
    1490:	44 1f       	adc	r20, r20
    1492:	55 1f       	adc	r21, r21
    1494:	7a 95       	dec	r23
    1496:	d1 f7       	brne	.-12     	; 0x148c <_ZN14HardwareSerial5beginEl+0x66>
    1498:	60 e0       	ldi	r22, 0x00	; 0
    149a:	7d e2       	ldi	r23, 0x2D	; 45
    149c:	81 e3       	ldi	r24, 0x31	; 49
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    14a4:	ca 01       	movw	r24, r20
    14a6:	b9 01       	movw	r22, r18
    14a8:	2f ef       	ldi	r18, 0xFF	; 255
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	40 e0       	ldi	r20, 0x00	; 0
    14ae:	50 e0       	ldi	r21, 0x00	; 0
    14b0:	0e 94 05 11 	call	0x220a	; 0x220a <__mulsi3>
    14b4:	a8 01       	movw	r20, r16
    14b6:	97 01       	movw	r18, r14
    14b8:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    14bc:	cf ef       	ldi	r28, 0xFF	; 255
    14be:	d0 e0       	ldi	r29, 0x00	; 0
    14c0:	c2 1b       	sub	r28, r18
    14c2:	d3 0b       	sbc	r29, r19
    14c4:	d7 ff       	sbrs	r29, 7
    14c6:	03 c0       	rjmp	.+6      	; 0x14ce <_ZN14HardwareSerial5beginEl+0xa8>
    14c8:	d0 95       	com	r29
    14ca:	c1 95       	neg	r28
    14cc:	df 4f       	sbci	r29, 0xFF	; 255
    14ce:	60 e4       	ldi	r22, 0x40	; 64
    14d0:	7b e4       	ldi	r23, 0x4B	; 75
    14d2:	8c e4       	ldi	r24, 0x4C	; 76
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	a8 01       	movw	r20, r16
    14d8:	97 01       	movw	r18, r14
    14da:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    14de:	21 50       	subi	r18, 0x01	; 1
    14e0:	30 40       	sbci	r19, 0x00	; 0
    14e2:	40 40       	sbci	r20, 0x00	; 0
    14e4:	50 40       	sbci	r21, 0x00	; 0
    14e6:	56 95       	lsr	r21
    14e8:	47 95       	ror	r20
    14ea:	37 95       	ror	r19
    14ec:	27 95       	ror	r18
    14ee:	2f 5f       	subi	r18, 0xFF	; 255
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255
    14f2:	4f 4f       	sbci	r20, 0xFF	; 255
    14f4:	5f 4f       	sbci	r21, 0xFF	; 255
    14f6:	93 e0       	ldi	r25, 0x03	; 3
    14f8:	22 0f       	add	r18, r18
    14fa:	33 1f       	adc	r19, r19
    14fc:	44 1f       	adc	r20, r20
    14fe:	55 1f       	adc	r21, r21
    1500:	9a 95       	dec	r25
    1502:	d1 f7       	brne	.-12     	; 0x14f8 <_ZN14HardwareSerial5beginEl+0xd2>
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	7d e2       	ldi	r23, 0x2D	; 45
    1508:	81 e3       	ldi	r24, 0x31	; 49
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1510:	ca 01       	movw	r24, r20
    1512:	b9 01       	movw	r22, r18
    1514:	2f ef       	ldi	r18, 0xFF	; 255
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 e0       	ldi	r20, 0x00	; 0
    151a:	50 e0       	ldi	r21, 0x00	; 0
    151c:	0e 94 05 11 	call	0x220a	; 0x220a <__mulsi3>
    1520:	a8 01       	movw	r20, r16
    1522:	97 01       	movw	r18, r14
    1524:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1528:	8f ef       	ldi	r24, 0xFF	; 255
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	82 1b       	sub	r24, r18
    152e:	93 0b       	sbc	r25, r19
    1530:	97 ff       	sbrs	r25, 7
    1532:	03 c0       	rjmp	.+6      	; 0x153a <_ZN14HardwareSerial5beginEl+0x114>
    1534:	90 95       	com	r25
    1536:	81 95       	neg	r24
    1538:	9f 4f       	sbci	r25, 0xFF	; 255
    153a:	8c 17       	cp	r24, r28
    153c:	10 f5       	brcc	.+68     	; 0x1582 <_ZN14HardwareSerial5beginEl+0x15c>
    *_ucsra = 1 << _u2x;
    153e:	d4 01       	movw	r26, r8
    1540:	18 96       	adiw	r26, 0x08	; 8
    1542:	ed 91       	ld	r30, X+
    1544:	fc 91       	ld	r31, X
    1546:	19 97       	sbiw	r26, 0x09	; 9
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	52 96       	adiw	r26, 0x12	; 18
    154e:	0c 90       	ld	r0, X
    1550:	02 c0       	rjmp	.+4      	; 0x1556 <_ZN14HardwareSerial5beginEl+0x130>
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	0a 94       	dec	r0
    1558:	e2 f7       	brpl	.-8      	; 0x1552 <_ZN14HardwareSerial5beginEl+0x12c>
    155a:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    155c:	60 e4       	ldi	r22, 0x40	; 64
    155e:	7b e4       	ldi	r23, 0x4B	; 75
    1560:	8c e4       	ldi	r24, 0x4C	; 76
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a8 01       	movw	r20, r16
    1566:	97 01       	movw	r18, r14
    1568:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    156c:	21 50       	subi	r18, 0x01	; 1
    156e:	30 40       	sbci	r19, 0x00	; 0
    1570:	40 40       	sbci	r20, 0x00	; 0
    1572:	50 40       	sbci	r21, 0x00	; 0
    1574:	56 95       	lsr	r21
    1576:	47 95       	ror	r20
    1578:	37 95       	ror	r19
    157a:	27 95       	ror	r18
    157c:	82 2f       	mov	r24, r18
    157e:	23 2f       	mov	r18, r19
    1580:	08 c0       	rjmp	.+16     	; 0x1592 <_ZN14HardwareSerial5beginEl+0x16c>
  } else {
    *_ucsra = 0;
    1582:	d4 01       	movw	r26, r8
    1584:	18 96       	adiw	r26, 0x08	; 8
    1586:	ed 91       	ld	r30, X+
    1588:	fc 91       	ld	r31, X
    158a:	19 97       	sbiw	r26, 0x09	; 9
    158c:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    158e:	8a 2d       	mov	r24, r10
    1590:	2b 2d       	mov	r18, r11
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1592:	d4 01       	movw	r26, r8
    1594:	14 96       	adiw	r26, 0x04	; 4
    1596:	ed 91       	ld	r30, X+
    1598:	fc 91       	ld	r31, X
    159a:	15 97       	sbiw	r26, 0x05	; 5
    159c:	20 83       	st	Z, r18
  *_ubrrl = baud_setting;
    159e:	16 96       	adiw	r26, 0x06	; 6
    15a0:	ed 91       	ld	r30, X+
    15a2:	fc 91       	ld	r31, X
    15a4:	17 97       	sbiw	r26, 0x07	; 7
    15a6:	80 83       	st	Z, r24

  sbi(*_ucsrb, _rxen);
    15a8:	1a 96       	adiw	r26, 0x0a	; 10
    15aa:	ed 91       	ld	r30, X+
    15ac:	fc 91       	ld	r31, X
    15ae:	1b 97       	sbiw	r26, 0x0b	; 11
    15b0:	20 81       	ld	r18, Z
    15b2:	41 e0       	ldi	r20, 0x01	; 1
    15b4:	50 e0       	ldi	r21, 0x00	; 0
    15b6:	ca 01       	movw	r24, r20
    15b8:	1e 96       	adiw	r26, 0x0e	; 14
    15ba:	0c 90       	ld	r0, X
    15bc:	1e 97       	sbiw	r26, 0x0e	; 14
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <_ZN14HardwareSerial5beginEl+0x19e>
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	0a 94       	dec	r0
    15c6:	e2 f7       	brpl	.-8      	; 0x15c0 <_ZN14HardwareSerial5beginEl+0x19a>
    15c8:	28 2b       	or	r18, r24
    15ca:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
    15cc:	1a 96       	adiw	r26, 0x0a	; 10
    15ce:	ed 91       	ld	r30, X+
    15d0:	fc 91       	ld	r31, X
    15d2:	1b 97       	sbiw	r26, 0x0b	; 11
    15d4:	20 81       	ld	r18, Z
    15d6:	ca 01       	movw	r24, r20
    15d8:	1f 96       	adiw	r26, 0x0f	; 15
    15da:	0c 90       	ld	r0, X
    15dc:	1f 97       	sbiw	r26, 0x0f	; 15
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <_ZN14HardwareSerial5beginEl+0x1be>
    15e0:	88 0f       	add	r24, r24
    15e2:	99 1f       	adc	r25, r25
    15e4:	0a 94       	dec	r0
    15e6:	e2 f7       	brpl	.-8      	; 0x15e0 <_ZN14HardwareSerial5beginEl+0x1ba>
    15e8:	28 2b       	or	r18, r24
    15ea:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
    15ec:	1a 96       	adiw	r26, 0x0a	; 10
    15ee:	ed 91       	ld	r30, X+
    15f0:	fc 91       	ld	r31, X
    15f2:	1b 97       	sbiw	r26, 0x0b	; 11
    15f4:	80 81       	ld	r24, Z
    15f6:	50 96       	adiw	r26, 0x10	; 16
    15f8:	0c 90       	ld	r0, X
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <_ZN14HardwareSerial5beginEl+0x1da>
    15fc:	44 0f       	add	r20, r20
    15fe:	55 1f       	adc	r21, r21
    1600:	0a 94       	dec	r0
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <_ZN14HardwareSerial5beginEl+0x1d6>
    1604:	84 2b       	or	r24, r20
    1606:	80 83       	st	Z, r24
}
    1608:	df 91       	pop	r29
    160a:	cf 91       	pop	r28
    160c:	1f 91       	pop	r17
    160e:	0f 91       	pop	r16
    1610:	ff 90       	pop	r15
    1612:	ef 90       	pop	r14
    1614:	df 90       	pop	r13
    1616:	cf 90       	pop	r12
    1618:	bf 90       	pop	r11
    161a:	af 90       	pop	r10
    161c:	9f 90       	pop	r9
    161e:	8f 90       	pop	r8
    1620:	08 95       	ret

00001622 <_ZN14HardwareSerial9availableEv>:

uint8_t HardwareSerial::available(void)
{
  return (RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
    1622:	dc 01       	movw	r26, r24
    1624:	12 96       	adiw	r26, 0x02	; 2
    1626:	ed 91       	ld	r30, X+
    1628:	fc 91       	ld	r31, X
    162a:	13 97       	sbiw	r26, 0x03	; 3
    162c:	e0 58       	subi	r30, 0x80	; 128
    162e:	ff 4f       	sbci	r31, 0xFF	; 255
    1630:	81 91       	ld	r24, Z+
    1632:	91 91       	ld	r25, Z+
    1634:	80 58       	subi	r24, 0x80	; 128
    1636:	9f 4f       	sbci	r25, 0xFF	; 255
    1638:	20 81       	ld	r18, Z
    163a:	31 81       	ldd	r19, Z+1	; 0x01
    163c:	82 1b       	sub	r24, r18
    163e:	93 0b       	sbc	r25, r19
    1640:	60 e8       	ldi	r22, 0x80	; 128
    1642:	70 e0       	ldi	r23, 0x00	; 0
    1644:	0e 94 24 11 	call	0x2248	; 0x2248 <__divmodhi4>
}
    1648:	08 95       	ret

0000164a <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
    164a:	cf 93       	push	r28
    164c:	df 93       	push	r29
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    164e:	dc 01       	movw	r26, r24
    1650:	12 96       	adiw	r26, 0x02	; 2
    1652:	ed 91       	ld	r30, X+
    1654:	fc 91       	ld	r31, X
    1656:	13 97       	sbiw	r26, 0x03	; 3
    1658:	ef 01       	movw	r28, r30
    165a:	ce 57       	subi	r28, 0x7E	; 126
    165c:	df 4f       	sbci	r29, 0xFF	; 255
    165e:	48 81       	ld	r20, Y
    1660:	59 81       	ldd	r21, Y+1	; 0x01
    1662:	e0 58       	subi	r30, 0x80	; 128
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	80 81       	ld	r24, Z
    1668:	91 81       	ldd	r25, Z+1	; 0x01
    166a:	e0 58       	subi	r30, 0x80	; 128
    166c:	f0 40       	sbci	r31, 0x00	; 0
    166e:	84 17       	cp	r24, r20
    1670:	95 07       	cpc	r25, r21
    1672:	19 f4       	brne	.+6      	; 0x167a <_ZN14HardwareSerial4readEv+0x30>
    1674:	2f ef       	ldi	r18, 0xFF	; 255
    1676:	3f ef       	ldi	r19, 0xFF	; 255
    1678:	0c c0       	rjmp	.+24     	; 0x1692 <_ZN14HardwareSerial4readEv+0x48>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    167a:	e4 0f       	add	r30, r20
    167c:	f5 1f       	adc	r31, r21
    167e:	20 81       	ld	r18, Z
    _rx_buffer->tail = (_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    1680:	ca 01       	movw	r24, r20
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	60 e8       	ldi	r22, 0x80	; 128
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	0e 94 24 11 	call	0x2248	; 0x2248 <__divmodhi4>
    168c:	99 83       	std	Y+1, r25	; 0x01
    168e:	88 83       	st	Y, r24
    return c;
    1690:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    1692:	c9 01       	movw	r24, r18
    1694:	df 91       	pop	r29
    1696:	cf 91       	pop	r28
    1698:	08 95       	ret

0000169a <_ZN14HardwareSerial5flushEv>:
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
    169a:	dc 01       	movw	r26, r24
    169c:	12 96       	adiw	r26, 0x02	; 2
    169e:	ed 91       	ld	r30, X+
    16a0:	fc 91       	ld	r31, X
    16a2:	13 97       	sbiw	r26, 0x03	; 3
    16a4:	ee 57       	subi	r30, 0x7E	; 126
    16a6:	ff 4f       	sbci	r31, 0xFF	; 255
    16a8:	80 81       	ld	r24, Z
    16aa:	91 81       	ldd	r25, Z+1	; 0x01
    16ac:	92 93       	st	-Z, r25
    16ae:	82 93       	st	-Z, r24
}
    16b0:	08 95       	ret

000016b2 <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
    16b2:	fc 01       	movw	r30, r24
{
  while (!((*_ucsra) & (1 << _udre)))
    16b4:	a0 85       	ldd	r26, Z+8	; 0x08
    16b6:	b1 85       	ldd	r27, Z+9	; 0x09
    16b8:	21 89       	ldd	r18, Z+17	; 0x11
    16ba:	8c 91       	ld	r24, X
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	02 2e       	mov	r0, r18
    16c0:	02 c0       	rjmp	.+4      	; 0x16c6 <_ZN14HardwareSerial5writeEh+0x14>
    16c2:	95 95       	asr	r25
    16c4:	87 95       	ror	r24
    16c6:	0a 94       	dec	r0
    16c8:	e2 f7       	brpl	.-8      	; 0x16c2 <_ZN14HardwareSerial5writeEh+0x10>
    16ca:	80 ff       	sbrs	r24, 0
    16cc:	f6 cf       	rjmp	.-20     	; 0x16ba <_ZN14HardwareSerial5writeEh+0x8>
    ;

  *_udr = c;
    16ce:	04 84       	ldd	r0, Z+12	; 0x0c
    16d0:	f5 85       	ldd	r31, Z+13	; 0x0d
    16d2:	e0 2d       	mov	r30, r0
    16d4:	60 83       	st	Z, r22
}
    16d6:	08 95       	ret

000016d8 <_GLOBAL__I_rx_buffer>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    16d8:	8c e1       	ldi	r24, 0x1C	; 28
    16da:	93 e0       	ldi	r25, 0x03	; 3
    16dc:	90 93 a7 03 	sts	0x03A7, r25
    16e0:	80 93 a6 03 	sts	0x03A6, r24
{
  _rx_buffer = rx_buffer;
    16e4:	82 e2       	ldi	r24, 0x22	; 34
    16e6:	93 e0       	ldi	r25, 0x03	; 3
    16e8:	90 93 a9 03 	sts	0x03A9, r25
    16ec:	80 93 a8 03 	sts	0x03A8, r24
  _ubrrh = ubrrh;
    16f0:	85 ec       	ldi	r24, 0xC5	; 197
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	90 93 ab 03 	sts	0x03AB, r25
    16f8:	80 93 aa 03 	sts	0x03AA, r24
  _ubrrl = ubrrl;
    16fc:	84 ec       	ldi	r24, 0xC4	; 196
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	90 93 ad 03 	sts	0x03AD, r25
    1704:	80 93 ac 03 	sts	0x03AC, r24
  _ucsra = ucsra;
    1708:	80 ec       	ldi	r24, 0xC0	; 192
    170a:	90 e0       	ldi	r25, 0x00	; 0
    170c:	90 93 af 03 	sts	0x03AF, r25
    1710:	80 93 ae 03 	sts	0x03AE, r24
  _ucsrb = ucsrb;
    1714:	81 ec       	ldi	r24, 0xC1	; 193
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	90 93 b1 03 	sts	0x03B1, r25
    171c:	80 93 b0 03 	sts	0x03B0, r24
  _udr = udr;
    1720:	86 ec       	ldi	r24, 0xC6	; 198
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	90 93 b3 03 	sts	0x03B3, r25
    1728:	80 93 b2 03 	sts	0x03B2, r24
  _rxen = rxen;
    172c:	84 e0       	ldi	r24, 0x04	; 4
    172e:	80 93 b4 03 	sts	0x03B4, r24
  _txen = txen;
    1732:	83 e0       	ldi	r24, 0x03	; 3
    1734:	80 93 b5 03 	sts	0x03B5, r24
  _rxcie = rxcie;
    1738:	87 e0       	ldi	r24, 0x07	; 7
    173a:	80 93 b6 03 	sts	0x03B6, r24
  _udre = udre;
    173e:	85 e0       	ldi	r24, 0x05	; 5
    1740:	80 93 b7 03 	sts	0x03B7, r24
  _u2x = u2x;
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	80 93 b8 03 	sts	0x03B8, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(__AVR_ATmega8__)
HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#else
HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
    174a:	08 95       	ret

0000174c <__cxa_guard_acquire>:
//!
#include <stdlib.h> 
#include "cpp_hack.h"


int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    174c:	fc 01       	movw	r30, r24
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	88 23       	and	r24, r24
    1756:	11 f4       	brne	.+4      	; 0x175c <__cxa_guard_acquire+0x10>
    1758:	21 e0       	ldi	r18, 0x01	; 1
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	c9 01       	movw	r24, r18
    175e:	08 95       	ret

00001760 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    1760:	fc 01       	movw	r30, r24
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	80 83       	st	Z, r24
    1766:	08 95       	ret

00001768 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    1768:	08 95       	ret

0000176a <__cxa_pure_virtual>:
    176a:	08 95       	ret

0000176c <adc_set_ref>:
//***************************************************

void adc_set_ref(uint8_t ref)
{
	//bits 7 and 6 select the refrence voltage.
	ADMUX = (ADMUX & 0x3F) | (ref << 6);	
    176c:	ec e7       	ldi	r30, 0x7C	; 124
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	90 81       	ld	r25, Z
    1772:	82 95       	swap	r24
    1774:	88 0f       	add	r24, r24
    1776:	88 0f       	add	r24, r24
    1778:	80 7c       	andi	r24, 0xC0	; 192
    177a:	9f 73       	andi	r25, 0x3F	; 63
    177c:	98 2b       	or	r25, r24
    177e:	90 83       	st	Z, r25
}
    1780:	08 95       	ret

00001782 <adc_set_ch>:

void adc_set_ch(uint8_t ch)
{
	//bits 4 downto 0 are used to select channel.
	ADMUX = (ADMUX & 0xE0) | (0x1F & ch);	
    1782:	ec e7       	ldi	r30, 0x7C	; 124
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	90 81       	ld	r25, Z
    1788:	8f 71       	andi	r24, 0x1F	; 31
    178a:	90 7e       	andi	r25, 0xE0	; 224
    178c:	89 2b       	or	r24, r25
    178e:	80 83       	st	Z, r24
}
    1790:	08 95       	ret

00001792 <adc_get_sample_cnt>:
uint32_t adc_get_sample_cnt()
{
	uint8_t oldSREG;
	uint32_t temp;

	oldSREG = SREG;
    1792:	8f b7       	in	r24, 0x3f	; 63
	cli();	//disable interrupts while copying the ADC data
    1794:	f8 94       	cli
	
	temp = gSample_cnt;
    1796:	20 91 40 04 	lds	r18, 0x0440
    179a:	30 91 41 04 	lds	r19, 0x0441
    179e:	40 91 42 04 	lds	r20, 0x0442
    17a2:	50 91 43 04 	lds	r21, 0x0443
		
	// reenable interrupts.
	SREG = oldSREG;
    17a6:	8f bf       	out	0x3f, r24	; 63

	return temp;
}
    17a8:	b9 01       	movw	r22, r18
    17aa:	ca 01       	movw	r24, r20
    17ac:	08 95       	ret

000017ae <adc_initialize>:
void adc_initialize( )
{
	uint8_t i;
	uint8_t high, low;
	 
	gSample_cnt = 0;
    17ae:	10 92 40 04 	sts	0x0440, r1
    17b2:	10 92 41 04 	sts	0x0441, r1
    17b6:	10 92 42 04 	sts	0x0442, r1
    17ba:	10 92 43 04 	sts	0x0443, r1
	//Clock prescale to 128.
	ADCSRA |= _BV(ADPS2);	//Clock Prescale
    17be:	80 91 7a 00 	lds	r24, 0x007A
    17c2:	84 60       	ori	r24, 0x04	; 4
    17c4:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= _BV(ADPS1);	//Clock Prescale
    17c8:	80 91 7a 00 	lds	r24, 0x007A
    17cc:	82 60       	ori	r24, 0x02	; 2
    17ce:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= _BV(ADPS0);	//Clock Prescale
    17d2:	80 91 7a 00 	lds	r24, 0x007A
    17d6:	81 60       	ori	r24, 0x01	; 1
    17d8:	80 93 7a 00 	sts	0x007A, r24
//***************************************************

void adc_set_ref(uint8_t ref)
{
	//bits 7 and 6 select the refrence voltage.
	ADMUX = (ADMUX & 0x3F) | (ref << 6);	
    17dc:	80 91 7c 00 	lds	r24, 0x007C
    17e0:	8f 73       	andi	r24, 0x3F	; 63
    17e2:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= _BV(ADPS1);	//Clock Prescale
	ADCSRA |= _BV(ADPS0);	//Clock Prescale

	//Set the reference voltage. For Pushpak Quadrotor board the refrence has to be VREF.
	adc_set_ref(ADC_REF_EXT);
	ADCSRA |= _BV(ADEN);	//Enable ADC.
    17e6:	80 91 7a 00 	lds	r24, 0x007A
    17ea:	80 68       	ori	r24, 0x80	; 128
    17ec:	80 93 7a 00 	sts	0x007A, r24
}

void adc_set_ch(uint8_t ch)
{
	//bits 4 downto 0 are used to select channel.
	ADMUX = (ADMUX & 0xE0) | (0x1F & ch);	
    17f0:	80 91 7c 00 	lds	r24, 0x007C
    17f4:	80 7e       	andi	r24, 0xE0	; 224
    17f6:	8e 61       	ori	r24, 0x1E	; 30
    17f8:	80 93 7c 00 	sts	0x007C, r24
    17fc:	88 ee       	ldi	r24, 0xE8	; 232
    17fe:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1800:	24 ef       	ldi	r18, 0xF4	; 244
    1802:	31 e0       	ldi	r19, 0x01	; 1
    1804:	f9 01       	movw	r30, r18
    1806:	31 97       	sbiw	r30, 0x01	; 1
    1808:	f1 f7       	brne	.-4      	; 0x1806 <adc_initialize+0x58>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    180a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    180c:	d9 f7       	brne	.-10     	; 0x1804 <adc_initialize+0x56>
	//Get use internal 1.1V to calibrate the ADC refrence voltage
	adc_set_ch(ADC_INP_11REF);

	_delay_ms(100); //delay needed to let the voltages stablize and accurate reading of 1.1V refrence.

	adc_ref_val = 0;
    180e:	10 92 1d 04 	sts	0x041D, r1
    1812:	10 92 1c 04 	sts	0x041C, r1
	adc_raw_ref_val = 0;	
    1816:	10 92 3f 04 	sts	0x043F, r1
    181a:	10 92 3e 04 	sts	0x043E, r1
    181e:	60 e0       	ldi	r22, 0x00	; 0

	//Sample and accumalate the internal refernce voltage
	for(i=0;i<MAX_ACCUMLATION_COUNT;++i)
	{	
		ADCSRA |= _BV(ADSC);	//start conversion
    1820:	80 91 7a 00 	lds	r24, 0x007A
    1824:	80 64       	ori	r24, 0x40	; 64
    1826:	80 93 7a 00 	sts	0x007A, r24
		
		// ADSC is cleared when the conversion finishes
		while (bit_is_set(ADCSRA, ADSC));
    182a:	80 91 7a 00 	lds	r24, 0x007A
    182e:	86 fd       	sbrc	r24, 6
    1830:	fc cf       	rjmp	.-8      	; 0x182a <adc_initialize+0x7c>
	
		low = ADCL;
    1832:	80 91 78 00 	lds	r24, 0x0078
		high = ADCH;
    1836:	20 91 79 00 	lds	r18, 0x0079
		
		adc_raw_ref_val = (high << 8 ) | low;
    183a:	52 2f       	mov	r21, r18
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	84 2b       	or	r24, r20
    1842:	95 2b       	or	r25, r21
    1844:	90 93 3f 04 	sts	0x043F, r25
    1848:	80 93 3e 04 	sts	0x043E, r24
		adc_ref_val = adc_ref_val + adc_raw_ref_val;
    184c:	20 91 1c 04 	lds	r18, 0x041C
    1850:	30 91 1d 04 	lds	r19, 0x041D
    1854:	80 91 3e 04 	lds	r24, 0x043E
    1858:	90 91 3f 04 	lds	r25, 0x043F
    185c:	82 0f       	add	r24, r18
    185e:	93 1f       	adc	r25, r19
    1860:	90 93 1d 04 	sts	0x041D, r25
    1864:	80 93 1c 04 	sts	0x041C, r24

	adc_ref_val = 0;
	adc_raw_ref_val = 0;	

	//Sample and accumalate the internal refernce voltage
	for(i=0;i<MAX_ACCUMLATION_COUNT;++i)
    1868:	6f 5f       	subi	r22, 0xFF	; 255
    186a:	60 31       	cpi	r22, 0x10	; 16
    186c:	c9 f6       	brne	.-78     	; 0x1820 <adc_initialize+0x72>
		adc_ref_val = adc_ref_val + adc_raw_ref_val;
	}
	
	//Accumlation increase bit count, but actual increase in ADC bit resolution is lesser.
	//Drop the addition bits
	adc_ref_val = adc_ref_val >> LSB_DROP_CNT; 
    186e:	80 91 1c 04 	lds	r24, 0x041C
    1872:	90 91 1d 04 	lds	r25, 0x041D
    1876:	96 95       	lsr	r25
    1878:	87 95       	ror	r24
    187a:	96 95       	lsr	r25
    187c:	87 95       	ror	r24
    187e:	90 93 1d 04 	sts	0x041D, r25
    1882:	80 93 1c 04 	sts	0x041C, r24
	
/**********************************************************************************************/
//Initialize for Autotrigger functionality.

	//disable it while setting up the Auto Trigger functionality
	ADCSRA &= ~(_BV(ADEN));
    1886:	80 91 7a 00 	lds	r24, 0x007A
    188a:	8f 77       	andi	r24, 0x7F	; 127
    188c:	80 93 7a 00 	sts	0x007A, r24
//***************************************************

void adc_set_ref(uint8_t ref)
{
	//bits 7 and 6 select the refrence voltage.
	ADMUX = (ADMUX & 0x3F) | (ref << 6);	
    1890:	80 91 7c 00 	lds	r24, 0x007C
    1894:	8f 73       	andi	r24, 0x3F	; 63
    1896:	80 93 7c 00 	sts	0x007C, r24
}

void adc_set_ch(uint8_t ch)
{
	//bits 4 downto 0 are used to select channel.
	ADMUX = (ADMUX & 0xE0) | (0x1F & ch);	
    189a:	80 91 7c 00 	lds	r24, 0x007C
    189e:	80 7e       	andi	r24, 0xE0	; 224
    18a0:	80 93 7c 00 	sts	0x007C, r24
	
	//Set the reference voltage. For Pushpak Quadrotor board the refrence has to be VREF.
	adc_set_ref(ADC_REF_EXT);
	adc_set_ch(0);

	ADCSRA |= _BV(ADATE);	//Enable Auto Trigger
    18a4:	80 91 7a 00 	lds	r24, 0x007A
    18a8:	80 62       	ori	r24, 0x20	; 32
    18aa:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= _BV(ADIE);	//Enable Interrupt
    18ae:	80 91 7a 00 	lds	r24, 0x007A
    18b2:	88 60       	ori	r24, 0x08	; 8
    18b4:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= _BV(ADEN);	//Enable ADC.
    18b8:	80 91 7a 00 	lds	r24, 0x007A
    18bc:	80 68       	ori	r24, 0x80	; 128
    18be:	80 93 7a 00 	sts	0x007A, r24
    18c2:	80 e0       	ldi	r24, 0x00	; 0
    18c4:	90 e0       	ldi	r25, 0x00	; 0
		
	//initialize all the variables
	for(i = 0; i<NUM_ADC_CH; i++)
	{
		gADC_acc[i] = 0;
    18c6:	fc 01       	movw	r30, r24
    18c8:	ee 0f       	add	r30, r30
    18ca:	ff 1f       	adc	r31, r31
    18cc:	df 01       	movw	r26, r30
    18ce:	a4 54       	subi	r26, 0x44	; 68
    18d0:	bc 4f       	sbci	r27, 0xFC	; 252
    18d2:	11 96       	adiw	r26, 0x01	; 1
    18d4:	1c 92       	st	X, r1
    18d6:	1e 92       	st	-X, r1
		gADC_sample[i] = 0;
    18d8:	e4 53       	subi	r30, 0x34	; 52
    18da:	fc 4f       	sbci	r31, 0xFC	; 252
    18dc:	11 82       	std	Z+1, r1	; 0x01
    18de:	10 82       	st	Z, r1
    18e0:	01 96       	adiw	r24, 0x01	; 1
	ADCSRA |= _BV(ADATE);	//Enable Auto Trigger
	ADCSRA |= _BV(ADIE);	//Enable Interrupt
	ADCSRA |= _BV(ADEN);	//Enable ADC.
		
	//initialize all the variables
	for(i = 0; i<NUM_ADC_CH; i++)
    18e2:	88 30       	cpi	r24, 0x08	; 8
    18e4:	91 05       	cpc	r25, r1
    18e6:	79 f7       	brne	.-34     	; 0x18c6 <adc_initialize+0x118>
    18e8:	88 ee       	ldi	r24, 0xE8	; 232
    18ea:	93 e0       	ldi	r25, 0x03	; 3
    18ec:	24 ef       	ldi	r18, 0xF4	; 244
    18ee:	31 e0       	ldi	r19, 0x01	; 1
    18f0:	f9 01       	movw	r30, r18
    18f2:	31 97       	sbiw	r30, 0x01	; 1
    18f4:	f1 f7       	brne	.-4      	; 0x18f2 <adc_initialize+0x144>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18f6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18f8:	d9 f7       	brne	.-10     	; 0x18f0 <adc_initialize+0x142>
		gADC_sample[i] = 0;
	}
	
	_delay_ms(100); //delay needed to let the voltages stablize.
			
	sei();			/* enable interrupts if they are by chance not enabled yet */
    18fa:	78 94       	sei

	//Start one conversion to set the ball rolling.
	ADCSRA |= _BV(ADSC);
    18fc:	80 91 7a 00 	lds	r24, 0x007A
    1900:	80 64       	ori	r24, 0x40	; 64
    1902:	80 93 7a 00 	sts	0x007A, r24
 	while(gADC_ch != 1)
 	{
 		--gADC_ch;
 	}
	
	gADC_ch = 1;
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	80 93 bb 03 	sts	0x03BB, r24
}

void adc_set_ch(uint8_t ch)
{
	//bits 4 downto 0 are used to select channel.
	ADMUX = (ADMUX & 0xE0) | (0x1F & ch);	
    190c:	80 91 7c 00 	lds	r24, 0x007C
    1910:	80 7e       	andi	r24, 0xE0	; 224
    1912:	81 60       	ori	r24, 0x01	; 1
    1914:	80 93 7c 00 	sts	0x007C, r24
 		--gADC_ch;
 	}
	
	gADC_ch = 1;
	adc_set_ch(gADC_ch);
}
    1918:	08 95       	ret

0000191a <adc_is_data_ready>:

//Function returns 1 when a new sample is ready. A new sample is ready once the given number of samples are
///accumlated.
uint8_t adc_is_data_ready()
{
	return gADC_new_output;
    191a:	80 91 b9 03 	lds	r24, 0x03B9
}
    191e:	08 95       	ret

00001920 <adc_get_new_samples>:
void adc_get_new_samples(void)
{
	uint8_t i;
	uint8_t oldSREG;
		
	while(gADC_new_output == 0);
    1920:	80 91 b9 03 	lds	r24, 0x03B9
    1924:	88 23       	and	r24, r24
    1926:	e1 f3       	breq	.-8      	; 0x1920 <adc_get_new_samples>
	gADC_new_output = 0; //clear the flag
    1928:	10 92 b9 03 	sts	0x03B9, r1
		
	oldSREG = SREG;
    192c:	4f b7       	in	r20, 0x3f	; 63
	cli();	//disable interrupts while copying the ADC data
    192e:	f8 94       	cli
    1930:	20 e0       	ldi	r18, 0x00	; 0
    1932:	30 e0       	ldi	r19, 0x00	; 0
	
	for(i=0; i<NUM_ADC_CH; i++)
	{
		gADC_output[i] = gADC_sample[i] >> 2;	//Divide by 4 as the LSB 2 bits contain no useful information/
    1934:	d9 01       	movw	r26, r18
    1936:	aa 0f       	add	r26, r26
    1938:	bb 1f       	adc	r27, r27
    193a:	fd 01       	movw	r30, r26
    193c:	e4 53       	subi	r30, 0x34	; 52
    193e:	fc 4f       	sbci	r31, 0xFC	; 252
    1940:	80 81       	ld	r24, Z
    1942:	91 81       	ldd	r25, Z+1	; 0x01
    1944:	96 95       	lsr	r25
    1946:	87 95       	ror	r24
    1948:	96 95       	lsr	r25
    194a:	87 95       	ror	r24
    194c:	fd 01       	movw	r30, r26
    194e:	e4 5f       	subi	r30, 0xF4	; 244
    1950:	fb 4f       	sbci	r31, 0xFB	; 251
    1952:	91 83       	std	Z+1, r25	; 0x01
    1954:	80 83       	st	Z, r24
		gADC_curr_output[i] = gADC_curr[i] >> 2; //test code
    1956:	fd 01       	movw	r30, r26
    1958:	e2 5e       	subi	r30, 0xE2	; 226
    195a:	fb 4f       	sbci	r31, 0xFB	; 251
    195c:	80 81       	ld	r24, Z
    195e:	91 81       	ldd	r25, Z+1	; 0x01
    1960:	96 95       	lsr	r25
    1962:	87 95       	ror	r24
    1964:	96 95       	lsr	r25
    1966:	87 95       	ror	r24
    1968:	a2 5d       	subi	r26, 0xD2	; 210
    196a:	bb 4f       	sbci	r27, 0xFB	; 251
    196c:	11 96       	adiw	r26, 0x01	; 1
    196e:	9c 93       	st	X, r25
    1970:	8e 93       	st	-X, r24
    1972:	2f 5f       	subi	r18, 0xFF	; 255
    1974:	3f 4f       	sbci	r19, 0xFF	; 255
	gADC_new_output = 0; //clear the flag
		
	oldSREG = SREG;
	cli();	//disable interrupts while copying the ADC data
	
	for(i=0; i<NUM_ADC_CH; i++)
    1976:	28 30       	cpi	r18, 0x08	; 8
    1978:	31 05       	cpc	r19, r1
    197a:	e1 f6       	brne	.-72     	; 0x1934 <adc_get_new_samples+0x14>
		gADC_output[i] = gADC_sample[i] >> 2;	//Divide by 4 as the LSB 2 bits contain no useful information/
		gADC_curr_output[i] = gADC_curr[i] >> 2; //test code
	}
	
	// reenable interrupts.
	SREG = oldSREG;
    197c:	4f bf       	out	0x3f, r20	; 63
}
    197e:	08 95       	ret

00001980 <__vector_24>:


///ADC conversion complete ISR.
ISR(ADC_vect)
{
    1980:	1f 92       	push	r1
    1982:	0f 92       	push	r0
    1984:	0f b6       	in	r0, 0x3f	; 63
    1986:	0f 92       	push	r0
    1988:	11 24       	eor	r1, r1
    198a:	2f 93       	push	r18
    198c:	3f 93       	push	r19
    198e:	4f 93       	push	r20
    1990:	5f 93       	push	r21
    1992:	6f 93       	push	r22
    1994:	7f 93       	push	r23
    1996:	8f 93       	push	r24
    1998:	9f 93       	push	r25
    199a:	af 93       	push	r26
    199c:	bf 93       	push	r27
    199e:	ef 93       	push	r30
    19a0:	ff 93       	push	r31
	uint8_t i;
	static uint8_t gADC_acc_cnt = 0;	//Accumlation count	
	
//	PORTB |= _BV(PIN5);	//Drive LED to measure the ISR execution time.
	
	low = ADCL;		// we have to read ADCL first; doing so locks both ADCL and ADCH until ADCH is read. 
    19a2:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;	
    19a6:	60 91 79 00 	lds	r22, 0x0079

	//Accumalate the current ADC sample.
	//In normal operation if the gADC_ch == 2, currently ADC is sampling channel 2 and result from channel 1 is available
	//read the ADC value and accumlate/average.		
	if(gADC_ch == 0)
    19aa:	70 91 bb 03 	lds	r23, 0x03BB
    19ae:	48 2f       	mov	r20, r24
    19b0:	50 e0       	ldi	r21, 0x00	; 0
    19b2:	77 23       	and	r23, r23
    19b4:	d9 f4       	brne	.+54     	; 0x19ec <__vector_24+0x6c>
	{//special condition, when Ch == 0, then channel count has wrapped around hence the result present is from that of highest channel number.
		gADC_acc[NUM_ADC_CH - 1] += (high << 8) | low; 
    19b6:	80 91 ca 03 	lds	r24, 0x03CA
    19ba:	90 91 cb 03 	lds	r25, 0x03CB
    19be:	36 2f       	mov	r19, r22
    19c0:	20 e0       	ldi	r18, 0x00	; 0
    19c2:	24 2b       	or	r18, r20
    19c4:	35 2b       	or	r19, r21
    19c6:	82 0f       	add	r24, r18
    19c8:	93 1f       	adc	r25, r19
    19ca:	90 93 cb 03 	sts	0x03CB, r25
    19ce:	80 93 ca 03 	sts	0x03CA, r24
		gADC_curr[NUM_ADC_CH - 1] = (high << 8) | low; 	   
    19d2:	30 93 2d 04 	sts	0x042D, r19
    19d6:	20 93 2c 04 	sts	0x042C, r18

	//Check if the number of accumlated samples has reached the max accumlation count.
	//This "if" statement could have been merged with above "if". Keeping them seperate for clarity.
    if(gADC_ch == 0)
    {//finished cycling through all the channels increment accumlation count
    	++gADC_acc_cnt;
    19da:	80 91 ba 03 	lds	r24, 0x03BA
    19de:	8f 5f       	subi	r24, 0xFF	; 255
    19e0:	80 93 ba 03 	sts	0x03BA, r24
		if(gADC_acc_cnt == MAX_ACCUMLATION_COUNT)
    19e4:	80 31       	cpi	r24, 0x10	; 16
    19e6:	09 f0       	breq	.+2      	; 0x19ea <__vector_24+0x6a>
    19e8:	49 c0       	rjmp	.+146    	; 0x1a7c <__vector_24+0xfc>
    19ea:	19 c0       	rjmp	.+50     	; 0x1a1e <__vector_24+0x9e>
		gADC_acc[NUM_ADC_CH - 1] += (high << 8) | low; 
		gADC_curr[NUM_ADC_CH - 1] = (high << 8) | low; 	   
	}
	else
	{
		gADC_acc[gADC_ch-1] += (high << 8) | low;
    19ec:	e7 2f       	mov	r30, r23
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	31 97       	sbiw	r30, 0x01	; 1
    19f2:	ee 0f       	add	r30, r30
    19f4:	ff 1f       	adc	r31, r31
    19f6:	df 01       	movw	r26, r30
    19f8:	a4 54       	subi	r26, 0x44	; 68
    19fa:	bc 4f       	sbci	r27, 0xFC	; 252
    19fc:	2d 91       	ld	r18, X+
    19fe:	3c 91       	ld	r19, X
    1a00:	11 97       	sbiw	r26, 0x01	; 1
    1a02:	96 2f       	mov	r25, r22
    1a04:	80 e0       	ldi	r24, 0x00	; 0
    1a06:	84 2b       	or	r24, r20
    1a08:	95 2b       	or	r25, r21
    1a0a:	28 0f       	add	r18, r24
    1a0c:	39 1f       	adc	r19, r25
    1a0e:	11 96       	adiw	r26, 0x01	; 1
    1a10:	3c 93       	st	X, r19
    1a12:	2e 93       	st	-X, r18
		gADC_curr[gADC_ch-1] = (high << 8) | low;  	   			
    1a14:	e2 5e       	subi	r30, 0xE2	; 226
    1a16:	fb 4f       	sbci	r31, 0xFB	; 251
    1a18:	91 83       	std	Z+1, r25	; 0x01
    1a1a:	80 83       	st	Z, r24
    1a1c:	2f c0       	rjmp	.+94     	; 0x1a7c <__vector_24+0xfc>
    1a1e:	20 e0       	ldi	r18, 0x00	; 0
    1a20:	30 e0       	ldi	r19, 0x00	; 0
		if(gADC_acc_cnt == MAX_ACCUMLATION_COUNT)
		{//Finished accumlating max number of samples, copy the value into output result array
			
			for(i = 0; i<NUM_ADC_CH; i++)
			{
				gADC_sample[i] = gADC_acc[i];
    1a22:	f9 01       	movw	r30, r18
    1a24:	ee 0f       	add	r30, r30
    1a26:	ff 1f       	adc	r31, r31
    1a28:	df 01       	movw	r26, r30
    1a2a:	a4 54       	subi	r26, 0x44	; 68
    1a2c:	bc 4f       	sbci	r27, 0xFC	; 252
    1a2e:	8d 91       	ld	r24, X+
    1a30:	9c 91       	ld	r25, X
    1a32:	11 97       	sbiw	r26, 0x01	; 1
    1a34:	e4 53       	subi	r30, 0x34	; 52
    1a36:	fc 4f       	sbci	r31, 0xFC	; 252
    1a38:	91 83       	std	Z+1, r25	; 0x01
    1a3a:	80 83       	st	Z, r24
				gADC_acc[i] = 0;		//reset the accumlator register
    1a3c:	11 96       	adiw	r26, 0x01	; 1
    1a3e:	1c 92       	st	X, r1
    1a40:	1e 92       	st	-X, r1
    1a42:	2f 5f       	subi	r18, 0xFF	; 255
    1a44:	3f 4f       	sbci	r19, 0xFF	; 255
    {//finished cycling through all the channels increment accumlation count
    	++gADC_acc_cnt;
		if(gADC_acc_cnt == MAX_ACCUMLATION_COUNT)
		{//Finished accumlating max number of samples, copy the value into output result array
			
			for(i = 0; i<NUM_ADC_CH; i++)
    1a46:	28 30       	cpi	r18, 0x08	; 8
    1a48:	31 05       	cpc	r19, r1
    1a4a:	59 f7       	brne	.-42     	; 0x1a22 <__vector_24+0xa2>
			{
				gADC_sample[i] = gADC_acc[i];
				gADC_acc[i] = 0;		//reset the accumlator register
			}
			
			gADC_acc_cnt = 0;
    1a4c:	10 92 ba 03 	sts	0x03BA, r1
			gADC_new_output = 1;
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	80 93 b9 03 	sts	0x03B9, r24
			++gSample_cnt;
    1a56:	80 91 40 04 	lds	r24, 0x0440
    1a5a:	90 91 41 04 	lds	r25, 0x0441
    1a5e:	a0 91 42 04 	lds	r26, 0x0442
    1a62:	b0 91 43 04 	lds	r27, 0x0443
    1a66:	01 96       	adiw	r24, 0x01	; 1
    1a68:	a1 1d       	adc	r26, r1
    1a6a:	b1 1d       	adc	r27, r1
    1a6c:	80 93 40 04 	sts	0x0440, r24
    1a70:	90 93 41 04 	sts	0x0441, r25
    1a74:	a0 93 42 04 	sts	0x0442, r26
    1a78:	b0 93 43 04 	sts	0x0443, r27
		}    
    }
   
    ++gADC_ch;
    1a7c:	87 2f       	mov	r24, r23
    1a7e:	8f 5f       	subi	r24, 0xFF	; 255
    1a80:	80 93 bb 03 	sts	0x03BB, r24
    if(gADC_ch == NUM_ADC_CH)
    1a84:	88 30       	cpi	r24, 0x08	; 8
    1a86:	11 f4       	brne	.+4      	; 0x1a8c <__vector_24+0x10c>
    {//finished cycling through all the channels
	   	gADC_ch=0; //cycle back to first channel
    1a88:	10 92 bb 03 	sts	0x03BB, r1
}

void adc_set_ch(uint8_t ch)
{
	//bits 4 downto 0 are used to select channel.
	ADMUX = (ADMUX & 0xE0) | (0x1F & ch);	
    1a8c:	90 91 7c 00 	lds	r25, 0x007C
    1a90:	80 91 bb 03 	lds	r24, 0x03BB
    1a94:	8f 71       	andi	r24, 0x1F	; 31
    1a96:	90 7e       	andi	r25, 0xE0	; 224
    1a98:	89 2b       	or	r24, r25
    1a9a:	80 93 7c 00 	sts	0x007C, r24
	//Write to channel mux register at the end so that the required 1 ADC clock time delay after start of conversion is met.
    //select the next channel     
	adc_set_ch(gADC_ch);

//	PORTB &= (~_BV(PIN5));	//Drive LED to measure the ISR execution time.
}
    1a9e:	ff 91       	pop	r31
    1aa0:	ef 91       	pop	r30
    1aa2:	bf 91       	pop	r27
    1aa4:	af 91       	pop	r26
    1aa6:	9f 91       	pop	r25
    1aa8:	8f 91       	pop	r24
    1aaa:	7f 91       	pop	r23
    1aac:	6f 91       	pop	r22
    1aae:	5f 91       	pop	r21
    1ab0:	4f 91       	pop	r20
    1ab2:	3f 91       	pop	r19
    1ab4:	2f 91       	pop	r18
    1ab6:	0f 90       	pop	r0
    1ab8:	0f be       	out	0x3f, r0	; 63
    1aba:	0f 90       	pop	r0
    1abc:	1f 90       	pop	r1
    1abe:	18 95       	reti

00001ac0 <_Z4loopv>:
	//Interrupts are enabled in the 
	//sei(); //enable interrupts

}

void loop() 
    1ac0:	1f 93       	push	r17
    1ac2:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t *ptr;
	
//	//use this for loop to reduce the data rate at which data is sent to pc.
 	for(i=0;i<50;++i)
 	{
 		adc_get_new_samples();
    1ac4:	0e 94 90 0c 	call	0x1920	; 0x1920 <adc_get_new_samples>
 		Acclmtr.process_ADC_sample(gADC_output[0], gADC_output[1], gADC_output[2]);
    1ac8:	60 91 0c 04 	lds	r22, 0x040C
    1acc:	70 91 0d 04 	lds	r23, 0x040D
    1ad0:	40 91 0e 04 	lds	r20, 0x040E
    1ad4:	50 91 0f 04 	lds	r21, 0x040F
    1ad8:	20 91 10 04 	lds	r18, 0x0410
    1adc:	30 91 11 04 	lds	r19, 0x0411
    1ae0:	84 ef       	ldi	r24, 0xF4	; 244
    1ae2:	93 e0       	ldi	r25, 0x03	; 3
    1ae4:	0e 94 7f 10 	call	0x20fe	; 0x20fe <_ZN13Accelerometer18process_ADC_sampleEjjj>
 		Gyro.process_ADC_sample(gADC_output[3], gADC_output[4], gADC_output[5]);
    1ae8:	60 91 12 04 	lds	r22, 0x0412
    1aec:	70 91 13 04 	lds	r23, 0x0413
    1af0:	40 91 14 04 	lds	r20, 0x0414
    1af4:	50 91 15 04 	lds	r21, 0x0415
    1af8:	20 91 16 04 	lds	r18, 0x0416
    1afc:	30 91 17 04 	lds	r19, 0x0417
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	94 e0       	ldi	r25, 0x04	; 4
    1b04:	0e 94 d6 10 	call	0x21ac	; 0x21ac <_ZN10GyroSensor18process_ADC_sampleEjjj>
	uint8_t	i;
	uint16_t chk_sum = 0;
	uint8_t *ptr;
	
//	//use this for loop to reduce the data rate at which data is sent to pc.
 	for(i=0;i<50;++i)
    1b08:	1f 5f       	subi	r17, 0xFF	; 255
    1b0a:	12 33       	cpi	r17, 0x32	; 50
    1b0c:	d9 f6       	brne	.-74     	; 0x1ac4 <_Z4loopv+0x4>
 		adc_get_new_samples();
 		Acclmtr.process_ADC_sample(gADC_output[0], gADC_output[1], gADC_output[2]);
 		Gyro.process_ADC_sample(gADC_output[3], gADC_output[4], gADC_output[5]);
 	}
 
 	GPIO_TOGGLE(LED); //LED is on Port D, Pin 4
    1b0e:	8b b1       	in	r24, 0x0b	; 11
    1b10:	90 e1       	ldi	r25, 0x10	; 16
    1b12:	89 27       	eor	r24, r25
    1b14:	8b b9       	out	0x0b, r24	; 11

///////////////////////////////////////////////////////////////	

///////////////////////////////////////////////////////////////	
// 	//Send Sensor data in ASCII format.
 	Serial.print(adc_get_sample_cnt());
    1b16:	0e 94 c9 0b 	call	0x1792	; 0x1792 <adc_get_sample_cnt>
    1b1a:	ab 01       	movw	r20, r22
    1b1c:	bc 01       	movw	r22, r24
    1b1e:	86 ea       	ldi	r24, 0xA6	; 166
    1b20:	93 e0       	ldi	r25, 0x03	; 3
    1b22:	0e 94 90 08 	call	0x1120	; 0x1120 <_ZN5Print5printEm>
 	Serial.print(',');
    1b26:	86 ea       	ldi	r24, 0xA6	; 166
    1b28:	93 e0       	ldi	r25, 0x03	; 3
    1b2a:	6c e2       	ldi	r22, 0x2C	; 44
    1b2c:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN5Print5printEc>
 	
	Serial.print(Acclmtr.mX);
    1b30:	60 91 f4 03 	lds	r22, 0x03F4
    1b34:	70 91 f5 03 	lds	r23, 0x03F5
    1b38:	86 ea       	ldi	r24, 0xA6	; 166
    1b3a:	93 e0       	ldi	r25, 0x03	; 3
    1b3c:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN5Print5printEi>
	Serial.print(',');
    1b40:	86 ea       	ldi	r24, 0xA6	; 166
    1b42:	93 e0       	ldi	r25, 0x03	; 3
    1b44:	6c e2       	ldi	r22, 0x2C	; 44
    1b46:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN5Print5printEc>
	Serial.print(Acclmtr.mY);
    1b4a:	60 91 f6 03 	lds	r22, 0x03F6
    1b4e:	70 91 f7 03 	lds	r23, 0x03F7
    1b52:	86 ea       	ldi	r24, 0xA6	; 166
    1b54:	93 e0       	ldi	r25, 0x03	; 3
    1b56:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN5Print5printEi>
	Serial.print(',');
    1b5a:	86 ea       	ldi	r24, 0xA6	; 166
    1b5c:	93 e0       	ldi	r25, 0x03	; 3
    1b5e:	6c e2       	ldi	r22, 0x2C	; 44
    1b60:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN5Print5printEc>
	Serial.print(Acclmtr.mZ);
    1b64:	60 91 f8 03 	lds	r22, 0x03F8
    1b68:	70 91 f9 03 	lds	r23, 0x03F9
    1b6c:	86 ea       	ldi	r24, 0xA6	; 166
    1b6e:	93 e0       	ldi	r25, 0x03	; 3
    1b70:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN5Print5printEi>
	Serial.print(',');
    1b74:	86 ea       	ldi	r24, 0xA6	; 166
    1b76:	93 e0       	ldi	r25, 0x03	; 3
    1b78:	6c e2       	ldi	r22, 0x2C	; 44
    1b7a:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN5Print5printEc>

	Serial.print(Gyro.mX);
    1b7e:	60 91 00 04 	lds	r22, 0x0400
    1b82:	70 91 01 04 	lds	r23, 0x0401
    1b86:	86 ea       	ldi	r24, 0xA6	; 166
    1b88:	93 e0       	ldi	r25, 0x03	; 3
    1b8a:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN5Print5printEi>
	Serial.print(',');
    1b8e:	86 ea       	ldi	r24, 0xA6	; 166
    1b90:	93 e0       	ldi	r25, 0x03	; 3
    1b92:	6c e2       	ldi	r22, 0x2C	; 44
    1b94:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN5Print5printEc>
	Serial.print(Gyro.mY);
    1b98:	60 91 02 04 	lds	r22, 0x0402
    1b9c:	70 91 03 04 	lds	r23, 0x0403
    1ba0:	86 ea       	ldi	r24, 0xA6	; 166
    1ba2:	93 e0       	ldi	r25, 0x03	; 3
    1ba4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN5Print5printEi>
	Serial.print(',');
    1ba8:	86 ea       	ldi	r24, 0xA6	; 166
    1baa:	93 e0       	ldi	r25, 0x03	; 3
    1bac:	6c e2       	ldi	r22, 0x2C	; 44
    1bae:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN5Print5printEc>
	Serial.print(Gyro.mZ);
    1bb2:	60 91 04 04 	lds	r22, 0x0404
    1bb6:	70 91 05 04 	lds	r23, 0x0405
    1bba:	86 ea       	ldi	r24, 0xA6	; 166
    1bbc:	93 e0       	ldi	r25, 0x03	; 3
    1bbe:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN5Print5printEi>
	Serial.print(',');
    1bc2:	86 ea       	ldi	r24, 0xA6	; 166
    1bc4:	93 e0       	ldi	r25, 0x03	; 3
    1bc6:	6c e2       	ldi	r22, 0x2C	; 44
    1bc8:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN5Print5printEc>
		
 	Serial.println();
    1bcc:	86 ea       	ldi	r24, 0xA6	; 166
    1bce:	93 e0       	ldi	r25, 0x03	; 3
    1bd0:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
//  	
//  	pkt.chk_sum = chk_sum;
//  	
//  	Serial.write((uint8_t*)&pkt, sizeof(chr6d_msg));
/////////////////////////////////////////////////////////////
}
    1bd4:	1f 91       	pop	r17
    1bd6:	08 95       	ret

00001bd8 <_Z16sensor_calibratev>:

struct chr6d_msg pkt;
///////////////////////////////////////////////////////////////////////////////


void sensor_calibrate()
    1bd8:	2f 92       	push	r2
    1bda:	3f 92       	push	r3
    1bdc:	4f 92       	push	r4
    1bde:	5f 92       	push	r5
    1be0:	6f 92       	push	r6
    1be2:	7f 92       	push	r7
    1be4:	8f 92       	push	r8
    1be6:	9f 92       	push	r9
    1be8:	af 92       	push	r10
    1bea:	bf 92       	push	r11
    1bec:	cf 92       	push	r12
    1bee:	df 92       	push	r13
    1bf0:	ef 92       	push	r14
    1bf2:	ff 92       	push	r15
    1bf4:	0f 93       	push	r16
    1bf6:	1f 93       	push	r17
    1bf8:	df 93       	push	r29
    1bfa:	cf 93       	push	r28
    1bfc:	00 d0       	rcall	.+0      	; 0x1bfe <_Z16sensor_calibratev+0x26>
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <_Z16sensor_calibratev+0x28>
    1c00:	0f 92       	push	r0
    1c02:	cd b7       	in	r28, 0x3d	; 61
    1c04:	de b7       	in	r29, 0x3e	; 62

	uint32_t gyro_x_zero, gyro_y_zero, gyro_z_zero;
	uint32_t acc_x_zeroG, acc_y_zeroG, acc_z_zeroG;
	
		
	GPIO_SET(GYRO_AUTO_ZERO); //send auto zero pulse
    1c06:	29 9a       	sbi	0x05, 1	; 5
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
    1c08:	84 ef       	ldi	r24, 0xF4	; 244
    1c0a:	91 e0       	ldi	r25, 0x01	; 1
    1c0c:	01 97       	sbiw	r24, 0x01	; 1
    1c0e:	f1 f7       	brne	.-4      	; 0x1c0c <_Z16sensor_calibratev+0x34>
	_delay_us(100);
	GPIO_CLEAR(GYRO_AUTO_ZERO); 
    1c10:	29 98       	cbi	0x05, 1	; 5
    1c12:	88 ee       	ldi	r24, 0xE8	; 232
    1c14:	93 e0       	ldi	r25, 0x03	; 3
    1c16:	24 ef       	ldi	r18, 0xF4	; 244
    1c18:	31 e0       	ldi	r19, 0x01	; 1
    1c1a:	f9 01       	movw	r30, r18
    1c1c:	31 97       	sbiw	r30, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <_Z16sensor_calibratev+0x44>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c20:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c22:	d9 f7       	brne	.-10     	; 0x1c1a <_Z16sensor_calibratev+0x42>
    1c24:	66 24       	eor	r6, r6
    1c26:	77 24       	eor	r7, r7
    1c28:	43 01       	movw	r8, r6
    1c2a:	22 24       	eor	r2, r2
    1c2c:	33 24       	eor	r3, r3
    1c2e:	21 01       	movw	r4, r2
    1c30:	19 82       	std	Y+1, r1	; 0x01
    1c32:	1a 82       	std	Y+2, r1	; 0x02
    1c34:	1b 82       	std	Y+3, r1	; 0x03
    1c36:	1c 82       	std	Y+4, r1	; 0x04
    1c38:	ee 24       	eor	r14, r14
    1c3a:	ff 24       	eor	r15, r15
    1c3c:	87 01       	movw	r16, r14
    1c3e:	aa 24       	eor	r10, r10
    1c40:	bb 24       	eor	r11, r11
    1c42:	65 01       	movw	r12, r10
    1c44:	1d 82       	std	Y+5, r1	; 0x05
 	gyro_y_zero = 0;
 	gyro_z_zero = 0;
	
	for(i=0;i<AVG_CNT;++i) //collect data for 1sec or 100 times
	{
		adc_get_new_samples();
    1c46:	0e 94 90 0c 	call	0x1920	; 0x1920 <adc_get_new_samples>
 		acc_x_zeroG += gADC_output[0];
    1c4a:	80 91 0c 04 	lds	r24, 0x040C
    1c4e:	90 91 0d 04 	lds	r25, 0x040D
    1c52:	a0 e0       	ldi	r26, 0x00	; 0
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e8 0e       	add	r14, r24
    1c58:	f9 1e       	adc	r15, r25
    1c5a:	0a 1f       	adc	r16, r26
    1c5c:	1b 1f       	adc	r17, r27
	 	acc_y_zeroG += gADC_output[1];
    1c5e:	80 91 0e 04 	lds	r24, 0x040E
    1c62:	90 91 0f 04 	lds	r25, 0x040F
    1c66:	a0 e0       	ldi	r26, 0x00	; 0
    1c68:	b0 e0       	ldi	r27, 0x00	; 0
    1c6a:	a8 0e       	add	r10, r24
    1c6c:	b9 1e       	adc	r11, r25
    1c6e:	ca 1e       	adc	r12, r26
    1c70:	db 1e       	adc	r13, r27
	 	acc_z_zeroG += gADC_output[2];
    1c72:	80 91 10 04 	lds	r24, 0x0410
    1c76:	90 91 11 04 	lds	r25, 0x0411
	 	gyro_x_zero += gADC_output[3];
    1c7a:	80 91 12 04 	lds	r24, 0x0412
    1c7e:	90 91 13 04 	lds	r25, 0x0413
    1c82:	a0 e0       	ldi	r26, 0x00	; 0
    1c84:	b0 e0       	ldi	r27, 0x00	; 0
    1c86:	68 0e       	add	r6, r24
    1c88:	79 1e       	adc	r7, r25
    1c8a:	8a 1e       	adc	r8, r26
    1c8c:	9b 1e       	adc	r9, r27
	 	gyro_y_zero += gADC_output[4];
    1c8e:	80 91 14 04 	lds	r24, 0x0414
    1c92:	90 91 15 04 	lds	r25, 0x0415
    1c96:	a0 e0       	ldi	r26, 0x00	; 0
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	28 0e       	add	r2, r24
    1c9c:	39 1e       	adc	r3, r25
    1c9e:	4a 1e       	adc	r4, r26
    1ca0:	5b 1e       	adc	r5, r27
	 	gyro_z_zero += gADC_output[5];		
    1ca2:	80 91 16 04 	lds	r24, 0x0416
    1ca6:	90 91 17 04 	lds	r25, 0x0417
    1caa:	a0 e0       	ldi	r26, 0x00	; 0
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	29 81       	ldd	r18, Y+1	; 0x01
    1cb0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb2:	4b 81       	ldd	r20, Y+3	; 0x03
    1cb4:	5c 81       	ldd	r21, Y+4	; 0x04
    1cb6:	28 0f       	add	r18, r24
    1cb8:	39 1f       	adc	r19, r25
    1cba:	4a 1f       	adc	r20, r26
    1cbc:	5b 1f       	adc	r21, r27
    1cbe:	29 83       	std	Y+1, r18	; 0x01
    1cc0:	3a 83       	std	Y+2, r19	; 0x02
    1cc2:	4b 83       	std	Y+3, r20	; 0x03
    1cc4:	5c 83       	std	Y+4, r21	; 0x04
 	acc_z_zeroG = 0;
 	gyro_x_zero = 0;
 	gyro_y_zero = 0;
 	gyro_z_zero = 0;
	
	for(i=0;i<AVG_CNT;++i) //collect data for 1sec or 100 times
    1cc6:	3d 81       	ldd	r19, Y+5	; 0x05
    1cc8:	3f 5f       	subi	r19, 0xFF	; 255
    1cca:	3d 83       	std	Y+5, r19	; 0x05
    1ccc:	34 36       	cpi	r19, 0x64	; 100
    1cce:	09 f0       	breq	.+2      	; 0x1cd2 <_Z16sensor_calibratev+0xfa>
    1cd0:	ba cf       	rjmp	.-140    	; 0x1c46 <_Z16sensor_calibratev+0x6e>
 	gyro_x_zero /= AVG_CNT;
 	gyro_y_zero /= AVG_CNT;
 	gyro_z_zero /= AVG_CNT;
	
 	//Note for Z axis using the same value as X axis. When sensor board is flat, the Z is either +/- 1G.
	Acclmtr.set_zero_values((uint16_t)acc_x_zeroG, (uint16_t)acc_y_zeroG, (uint16_t) acc_x_zeroG);	 	 	
    1cd2:	c8 01       	movw	r24, r16
    1cd4:	b7 01       	movw	r22, r14
    1cd6:	24 e6       	ldi	r18, 0x64	; 100
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	40 e0       	ldi	r20, 0x00	; 0
    1cdc:	50 e0       	ldi	r21, 0x00	; 0
    1cde:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1ce2:	79 01       	movw	r14, r18
    1ce4:	8a 01       	movw	r16, r20
    1ce6:	c6 01       	movw	r24, r12
    1ce8:	b5 01       	movw	r22, r10
    1cea:	24 e6       	ldi	r18, 0x64	; 100
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1cf6:	84 ef       	ldi	r24, 0xF4	; 244
    1cf8:	93 e0       	ldi	r25, 0x03	; 3
    1cfa:	b7 01       	movw	r22, r14
    1cfc:	a9 01       	movw	r20, r18
    1cfe:	97 01       	movw	r18, r14
    1d00:	0e 94 77 10 	call	0x20ee	; 0x20ee <_ZN13Accelerometer15set_zero_valuesEjjj>
 			
	Gyro.set_zero_values((uint16_t)gyro_x_zero, (uint16_t)gyro_y_zero, (uint16_t) gyro_z_zero);	 	 	
    1d04:	c4 01       	movw	r24, r8
    1d06:	b3 01       	movw	r22, r6
    1d08:	24 e6       	ldi	r18, 0x64	; 100
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	40 e0       	ldi	r20, 0x00	; 0
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1d14:	49 01       	movw	r8, r18
    1d16:	5a 01       	movw	r10, r20
    1d18:	c2 01       	movw	r24, r4
    1d1a:	b1 01       	movw	r22, r2
    1d1c:	24 e6       	ldi	r18, 0x64	; 100
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1d28:	69 01       	movw	r12, r18
    1d2a:	7a 01       	movw	r14, r20
    1d2c:	69 81       	ldd	r22, Y+1	; 0x01
    1d2e:	7a 81       	ldd	r23, Y+2	; 0x02
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	24 e6       	ldi	r18, 0x64	; 100
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	50 e0       	ldi	r21, 0x00	; 0
    1d3c:	0e 94 37 11 	call	0x226e	; 0x226e <__udivmodsi4>
    1d40:	89 01       	movw	r16, r18
    1d42:	9a 01       	movw	r18, r20
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	94 e0       	ldi	r25, 0x04	; 4
    1d48:	b4 01       	movw	r22, r8
    1d4a:	a6 01       	movw	r20, r12
    1d4c:	98 01       	movw	r18, r16
    1d4e:	0e 94 ce 10 	call	0x219c	; 0x219c <_ZN10GyroSensor15set_zero_valuesEjjj>
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	1f 91       	pop	r17
    1d62:	0f 91       	pop	r16
    1d64:	ff 90       	pop	r15
    1d66:	ef 90       	pop	r14
    1d68:	df 90       	pop	r13
    1d6a:	cf 90       	pop	r12
    1d6c:	bf 90       	pop	r11
    1d6e:	af 90       	pop	r10
    1d70:	9f 90       	pop	r9
    1d72:	8f 90       	pop	r8
    1d74:	7f 90       	pop	r7
    1d76:	6f 90       	pop	r6
    1d78:	5f 90       	pop	r5
    1d7a:	4f 90       	pop	r4
    1d7c:	3f 90       	pop	r3
    1d7e:	2f 90       	pop	r2
    1d80:	08 95       	ret

00001d82 <_Z5setupv>:


void setup() 
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
{

	Serial.begin(115200); 
    1d8a:	06 ea       	ldi	r16, 0xA6	; 166
    1d8c:	13 e0       	ldi	r17, 0x03	; 3
    1d8e:	c8 01       	movw	r24, r16
    1d90:	40 e0       	ldi	r20, 0x00	; 0
    1d92:	52 ec       	ldi	r21, 0xC2	; 194
    1d94:	61 e0       	ldi	r22, 0x01	; 1
    1d96:	70 e0       	ldi	r23, 0x00	; 0
    1d98:	0e 94 13 0a 	call	0x1426	; 0x1426 <_ZN14HardwareSerial5beginEl>
	Serial.println();
    1d9c:	c8 01       	movw	r24, r16
    1d9e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
	Serial.println();
    1da2:	c8 01       	movw	r24, r16
    1da4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
	Serial.println();
    1da8:	c8 01       	movw	r24, r16
    1daa:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
	Serial.println("Pushpak Quadrotor........");
    1dae:	c8 01       	movw	r24, r16
    1db0:	62 e0       	ldi	r22, 0x02	; 2
    1db2:	71 e0       	ldi	r23, 0x01	; 1
    1db4:	0e 94 dd 07 	call	0xfba	; 0xfba <_ZN5Print7printlnEPKc>
	
	GPIO_OUTPUT(LED);
    1db8:	54 9a       	sbi	0x0a, 4	; 10
	GPIO_OUTPUT(GYRO_AUTO_ZERO);
    1dba:	21 9a       	sbi	0x04, 1	; 4

	adc_initialize(); //Initialize adc at the last as this funtion enable interrupts.
    1dbc:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <adc_initialize>
	
	sensor_calibrate();
    1dc0:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <_Z16sensor_calibratev>
	
	Serial.print("Raw ADC count for 1.1V ref = ");
    1dc4:	c8 01       	movw	r24, r16
    1dc6:	6c e1       	ldi	r22, 0x1C	; 28
    1dc8:	71 e0       	ldi	r23, 0x01	; 1
    1dca:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN5Print5printEPKc>
	Serial.println(adc_raw_ref_val);
    1dce:	60 91 3e 04 	lds	r22, 0x043E
    1dd2:	70 91 3f 04 	lds	r23, 0x043F
    1dd6:	c8 01       	movw	r24, r16
    1dd8:	0e 94 a5 08 	call	0x114a	; 0x114a <_ZN5Print7printlnEj>
	Serial.print("Raw ADC millivolts per count = ");
    1ddc:	c8 01       	movw	r24, r16
    1dde:	6a e3       	ldi	r22, 0x3A	; 58
    1de0:	71 e0       	ldi	r23, 0x01	; 1
    1de2:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN5Print5printEPKc>
	Serial.println((float) (1100.0/(float)adc_raw_ref_val));
    1de6:	60 91 3e 04 	lds	r22, 0x043E
    1dea:	70 91 3f 04 	lds	r23, 0x043F
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatunsisf>
    1df6:	9b 01       	movw	r18, r22
    1df8:	ac 01       	movw	r20, r24
    1dfa:	60 e0       	ldi	r22, 0x00	; 0
    1dfc:	70 e8       	ldi	r23, 0x80	; 128
    1dfe:	89 e8       	ldi	r24, 0x89	; 137
    1e00:	94 e4       	ldi	r25, 0x44	; 68
    1e02:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
    1e06:	ab 01       	movw	r20, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	c8 01       	movw	r24, r16
    1e0c:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN5Print7printlnEd>
	
	Serial.print("Accumalated 12bit ADC count for 1.1V ref = ");
    1e10:	c8 01       	movw	r24, r16
    1e12:	6a e5       	ldi	r22, 0x5A	; 90
    1e14:	71 e0       	ldi	r23, 0x01	; 1
    1e16:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN5Print5printEPKc>
	Serial.println(adc_ref_val);
    1e1a:	60 91 1c 04 	lds	r22, 0x041C
    1e1e:	70 91 1d 04 	lds	r23, 0x041D
    1e22:	c8 01       	movw	r24, r16
    1e24:	0e 94 a5 08 	call	0x114a	; 0x114a <_ZN5Print7printlnEj>
	Serial.print("Accumalated 12bit ADC millivolts per count = ");
    1e28:	c8 01       	movw	r24, r16
    1e2a:	66 e8       	ldi	r22, 0x86	; 134
    1e2c:	71 e0       	ldi	r23, 0x01	; 1
    1e2e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN5Print5printEPKc>
	Serial.println((float) (1100.0/(float)adc_ref_val));
    1e32:	60 91 1c 04 	lds	r22, 0x041C
    1e36:	70 91 1d 04 	lds	r23, 0x041D
    1e3a:	80 e0       	ldi	r24, 0x00	; 0
    1e3c:	90 e0       	ldi	r25, 0x00	; 0
    1e3e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <__floatunsisf>
    1e42:	9b 01       	movw	r18, r22
    1e44:	ac 01       	movw	r20, r24
    1e46:	60 e0       	ldi	r22, 0x00	; 0
    1e48:	70 e8       	ldi	r23, 0x80	; 128
    1e4a:	89 e8       	ldi	r24, 0x89	; 137
    1e4c:	94 e4       	ldi	r25, 0x44	; 68
    1e4e:	0e 94 3b 03 	call	0x676	; 0x676 <__divsf3>
    1e52:	ab 01       	movw	r20, r22
    1e54:	bc 01       	movw	r22, r24
    1e56:	c8 01       	movw	r24, r16
    1e58:	0e 94 a8 09 	call	0x1350	; 0x1350 <_ZN5Print7printlnEd>
		
	Serial.print("Accelerometer calibration values, X, Y, Z: " );
    1e5c:	c8 01       	movw	r24, r16
    1e5e:	64 eb       	ldi	r22, 0xB4	; 180
    1e60:	71 e0       	ldi	r23, 0x01	; 1
    1e62:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN5Print5printEPKc>
	Serial.print(Acclmtr.mX_zero);
    1e66:	60 91 fa 03 	lds	r22, 0x03FA
    1e6a:	70 91 fb 03 	lds	r23, 0x03FB
    1e6e:	c8 01       	movw	r24, r16
    1e70:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN5Print5printEi>
	Serial.print(", ");
    1e74:	80 ee       	ldi	r24, 0xE0	; 224
    1e76:	e8 2e       	mov	r14, r24
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	f8 2e       	mov	r15, r24
    1e7c:	c8 01       	movw	r24, r16
    1e7e:	b7 01       	movw	r22, r14
    1e80:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN5Print5printEPKc>
	Serial.print(Acclmtr.mY_zero);
    1e84:	60 91 fc 03 	lds	r22, 0x03FC
    1e88:	70 91 fd 03 	lds	r23, 0x03FD
    1e8c:	c8 01       	movw	r24, r16
    1e8e:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN5Print5printEi>
	Serial.print(", ");
    1e92:	c8 01       	movw	r24, r16
    1e94:	b7 01       	movw	r22, r14
    1e96:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN5Print5printEPKc>
	Serial.print(Acclmtr.mZ_zero);
    1e9a:	60 91 fe 03 	lds	r22, 0x03FE
    1e9e:	70 91 ff 03 	lds	r23, 0x03FF
    1ea2:	c8 01       	movw	r24, r16
    1ea4:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN5Print5printEi>
	Serial.println();
    1ea8:	c8 01       	movw	r24, r16
    1eaa:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
	
	Serial.print("Gyro calibration values, X, Y, Z: " );
    1eae:	c8 01       	movw	r24, r16
    1eb0:	63 ee       	ldi	r22, 0xE3	; 227
    1eb2:	71 e0       	ldi	r23, 0x01	; 1
    1eb4:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN5Print5printEPKc>
	Serial.print(Gyro.mX_zero);
    1eb8:	60 91 06 04 	lds	r22, 0x0406
    1ebc:	70 91 07 04 	lds	r23, 0x0407
    1ec0:	c8 01       	movw	r24, r16
    1ec2:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN5Print5printEi>
	Serial.print(", ");
    1ec6:	c8 01       	movw	r24, r16
    1ec8:	b7 01       	movw	r22, r14
    1eca:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN5Print5printEPKc>
	Serial.print(Gyro.mY_zero);
    1ece:	60 91 08 04 	lds	r22, 0x0408
    1ed2:	70 91 09 04 	lds	r23, 0x0409
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN5Print5printEi>
	Serial.print(", ");
    1edc:	c8 01       	movw	r24, r16
    1ede:	b7 01       	movw	r22, r14
    1ee0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN5Print5printEPKc>
	Serial.print(Gyro.mZ_zero);
    1ee4:	60 91 0a 04 	lds	r22, 0x040A
    1ee8:	70 91 0b 04 	lds	r23, 0x040B
    1eec:	c8 01       	movw	r24, r16
    1eee:	0e 94 e5 08 	call	0x11ca	; 0x11ca <_ZN5Print5printEi>
	Serial.println();
    1ef2:	c8 01       	movw	r24, r16
    1ef4:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>

	
	Serial.println();
    1ef8:	c8 01       	movw	r24, r16
    1efa:	0e 94 b6 07 	call	0xf6c	; 0xf6c <_ZN5Print7printlnEv>
	
	pkt.hdr1 = 's';
    1efe:	83 e7       	ldi	r24, 0x73	; 115
    1f00:	80 93 e0 03 	sts	0x03E0, r24
	pkt.hdr2 = 'n';
    1f04:	8e e6       	ldi	r24, 0x6E	; 110
    1f06:	80 93 e1 03 	sts	0x03E1, r24
	pkt.hdr3 = 'p';
    1f0a:	80 e7       	ldi	r24, 0x70	; 112
    1f0c:	80 93 e2 03 	sts	0x03E2, r24
	pkt.pkt_type = 0xB7;
    1f10:	87 eb       	ldi	r24, 0xB7	; 183
    1f12:	80 93 e3 03 	sts	0x03E3, r24
	pkt.length = 13;
    1f16:	8d e0       	ldi	r24, 0x0D	; 13
    1f18:	80 93 e4 03 	sts	0x03E4, r24
	pkt.active = 0x3F;
    1f1c:	8f e3       	ldi	r24, 0x3F	; 63
    1f1e:	80 93 e5 03 	sts	0x03E5, r24
	
	//Interrupts are enabled in the 
	//sei(); //enable interrupts

}
    1f22:	1f 91       	pop	r17
    1f24:	0f 91       	pop	r16
    1f26:	ff 90       	pop	r15
    1f28:	ef 90       	pop	r14
    1f2a:	08 95       	ret

00001f2c <main>:
}


int main(void)
{
	setup();
    1f2c:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <_Z5setupv>
    
	for (;;)
	{
		loop();
    1f30:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <_Z4loopv>
    1f34:	fd cf       	rjmp	.-6      	; 0x1f30 <main+0x4>

00001f36 <_Z22send_msg_sensor_valuesv>:

	Serial.write((uint8_t*)&msg, sizeof(msg_ADC12b_type));

}

void send_msg_sensor_values(void)
    1f36:	0f 93       	push	r16
    1f38:	1f 93       	push	r17
    1f3a:	df 93       	push	r29
    1f3c:	cf 93       	push	r28
    1f3e:	cd b7       	in	r28, 0x3d	; 61
    1f40:	de b7       	in	r29, 0x3e	; 62
    1f42:	64 97       	sbiw	r28, 0x14	; 20
    1f44:	0f b6       	in	r0, 0x3f	; 63
    1f46:	f8 94       	cli
    1f48:	de bf       	out	0x3e, r29	; 62
    1f4a:	0f be       	out	0x3f, r0	; 63
    1f4c:	cd bf       	out	0x3d, r28	; 61
{
	struct msg_sensor_type msg = {0xAB, 0xCD, MSG_SENSOR_ID}; 
    1f4e:	8e 01       	movw	r16, r28
    1f50:	0f 5f       	subi	r16, 0xFF	; 255
    1f52:	1f 4f       	sbci	r17, 0xFF	; 255
    1f54:	84 e1       	ldi	r24, 0x14	; 20
    1f56:	f8 01       	movw	r30, r16
    1f58:	11 92       	st	Z+, r1
    1f5a:	8a 95       	dec	r24
    1f5c:	e9 f7       	brne	.-6      	; 0x1f58 <_Z22send_msg_sensor_valuesv+0x22>
    1f5e:	8b ea       	ldi	r24, 0xAB	; 171
    1f60:	89 83       	std	Y+1, r24	; 0x01
    1f62:	8d ec       	ldi	r24, 0xCD	; 205
    1f64:	8a 83       	std	Y+2, r24	; 0x02
    1f66:	83 e0       	ldi	r24, 0x03	; 3
    1f68:	8b 83       	std	Y+3, r24	; 0x03
	
	msg.length = sizeof(msg_sensor_type) - 4;
    1f6a:	80 e1       	ldi	r24, 0x10	; 16
    1f6c:	8c 83       	std	Y+4, r24	; 0x04
	msg.sys_time = adc_get_sample_cnt();
    1f6e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <adc_get_sample_cnt>
    1f72:	6d 83       	std	Y+5, r22	; 0x05
    1f74:	7e 83       	std	Y+6, r23	; 0x06
    1f76:	8f 83       	std	Y+7, r24	; 0x07
    1f78:	98 87       	std	Y+8, r25	; 0x08
	
 	msg.acc_x = gADC_output[0];
    1f7a:	80 91 0c 04 	lds	r24, 0x040C
    1f7e:	90 91 0d 04 	lds	r25, 0x040D
    1f82:	9a 87       	std	Y+10, r25	; 0x0a
    1f84:	89 87       	std	Y+9, r24	; 0x09
	msg.acc_y = gADC_output[1];
    1f86:	80 91 0e 04 	lds	r24, 0x040E
    1f8a:	90 91 0f 04 	lds	r25, 0x040F
    1f8e:	9c 87       	std	Y+12, r25	; 0x0c
    1f90:	8b 87       	std	Y+11, r24	; 0x0b
	msg.acc_z = gADC_output[2];
    1f92:	80 91 10 04 	lds	r24, 0x0410
    1f96:	90 91 11 04 	lds	r25, 0x0411
    1f9a:	9e 87       	std	Y+14, r25	; 0x0e
    1f9c:	8d 87       	std	Y+13, r24	; 0x0d
	msg.gyro_x = gADC_output[3];
    1f9e:	80 91 12 04 	lds	r24, 0x0412
    1fa2:	90 91 13 04 	lds	r25, 0x0413
    1fa6:	98 8b       	std	Y+16, r25	; 0x10
    1fa8:	8f 87       	std	Y+15, r24	; 0x0f
	msg.gyro_y = gADC_output[4];
    1faa:	80 91 14 04 	lds	r24, 0x0414
    1fae:	90 91 15 04 	lds	r25, 0x0415
    1fb2:	9a 8b       	std	Y+18, r25	; 0x12
    1fb4:	89 8b       	std	Y+17, r24	; 0x11
	msg.gyro_z = gADC_output[5];
    1fb6:	80 91 16 04 	lds	r24, 0x0416
    1fba:	90 91 17 04 	lds	r25, 0x0417
    1fbe:	9c 8b       	std	Y+20, r25	; 0x14
    1fc0:	8b 8b       	std	Y+19, r24	; 0x13

	Serial.write((uint8_t*)&msg, sizeof(msg_sensor_type));
    1fc2:	86 ea       	ldi	r24, 0xA6	; 166
    1fc4:	93 e0       	ldi	r25, 0x03	; 3
    1fc6:	b8 01       	movw	r22, r16
    1fc8:	44 e1       	ldi	r20, 0x14	; 20
    1fca:	50 e0       	ldi	r21, 0x00	; 0
    1fcc:	0e 94 7f 07 	call	0xefe	; 0xefe <_ZN5Print5writeEPKhj>
}
    1fd0:	64 96       	adiw	r28, 0x14	; 20
    1fd2:	0f b6       	in	r0, 0x3f	; 63
    1fd4:	f8 94       	cli
    1fd6:	de bf       	out	0x3e, r29	; 62
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	cd bf       	out	0x3d, r28	; 61
    1fdc:	cf 91       	pop	r28
    1fde:	df 91       	pop	r29
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16
    1fe4:	08 95       	ret

00001fe6 <_Z23send_msg_ADC12b_samplesv>:
	uint32_t 	sys_time;
	int16_t	adc_data[8];
};


void send_msg_ADC12b_samples(void)
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	df 93       	push	r29
    1fec:	cf 93       	push	r28
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	68 97       	sbiw	r28, 0x18	; 24
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
{
	
	struct msg_ADC12b_type msg = {0xAB, 0xCD, MSG_ADC12B_ID}; 
    1ffe:	8e 01       	movw	r16, r28
    2000:	0f 5f       	subi	r16, 0xFF	; 255
    2002:	1f 4f       	sbci	r17, 0xFF	; 255
    2004:	88 e1       	ldi	r24, 0x18	; 24
    2006:	f8 01       	movw	r30, r16
    2008:	11 92       	st	Z+, r1
    200a:	8a 95       	dec	r24
    200c:	e9 f7       	brne	.-6      	; 0x2008 <_Z23send_msg_ADC12b_samplesv+0x22>
    200e:	8b ea       	ldi	r24, 0xAB	; 171
    2010:	89 83       	std	Y+1, r24	; 0x01
    2012:	8d ec       	ldi	r24, 0xCD	; 205
    2014:	8a 83       	std	Y+2, r24	; 0x02
    2016:	82 e0       	ldi	r24, 0x02	; 2
    2018:	8b 83       	std	Y+3, r24	; 0x03
	
	msg.length = sizeof(msg_ADC12b_type) - 4;
    201a:	84 e1       	ldi	r24, 0x14	; 20
    201c:	8c 83       	std	Y+4, r24	; 0x04
	msg.sys_time = adc_get_sample_cnt();
    201e:	0e 94 c9 0b 	call	0x1792	; 0x1792 <adc_get_sample_cnt>
    2022:	6d 83       	std	Y+5, r22	; 0x05
    2024:	7e 83       	std	Y+6, r23	; 0x06
    2026:	8f 83       	std	Y+7, r24	; 0x07
    2028:	98 87       	std	Y+8, r25	; 0x08
	
	msg.adc_data[0] = gADC_output[0];
    202a:	80 91 0c 04 	lds	r24, 0x040C
    202e:	90 91 0d 04 	lds	r25, 0x040D
    2032:	9a 87       	std	Y+10, r25	; 0x0a
    2034:	89 87       	std	Y+9, r24	; 0x09
	msg.adc_data[1] = gADC_output[1];
    2036:	80 91 0e 04 	lds	r24, 0x040E
    203a:	90 91 0f 04 	lds	r25, 0x040F
    203e:	9c 87       	std	Y+12, r25	; 0x0c
    2040:	8b 87       	std	Y+11, r24	; 0x0b
	msg.adc_data[2] = gADC_output[2];
    2042:	80 91 10 04 	lds	r24, 0x0410
    2046:	90 91 11 04 	lds	r25, 0x0411
    204a:	9e 87       	std	Y+14, r25	; 0x0e
    204c:	8d 87       	std	Y+13, r24	; 0x0d
	msg.adc_data[3] = gADC_output[3];
    204e:	80 91 12 04 	lds	r24, 0x0412
    2052:	90 91 13 04 	lds	r25, 0x0413
    2056:	98 8b       	std	Y+16, r25	; 0x10
    2058:	8f 87       	std	Y+15, r24	; 0x0f
	msg.adc_data[4] = gADC_output[4];
    205a:	80 91 14 04 	lds	r24, 0x0414
    205e:	90 91 15 04 	lds	r25, 0x0415
    2062:	9a 8b       	std	Y+18, r25	; 0x12
    2064:	89 8b       	std	Y+17, r24	; 0x11
	msg.adc_data[5] = gADC_output[5];
    2066:	80 91 16 04 	lds	r24, 0x0416
    206a:	90 91 17 04 	lds	r25, 0x0417
    206e:	9c 8b       	std	Y+20, r25	; 0x14
    2070:	8b 8b       	std	Y+19, r24	; 0x13
	msg.adc_data[6] = gADC_output[6];
    2072:	80 91 18 04 	lds	r24, 0x0418
    2076:	90 91 19 04 	lds	r25, 0x0419
    207a:	9e 8b       	std	Y+22, r25	; 0x16
    207c:	8d 8b       	std	Y+21, r24	; 0x15
	msg.adc_data[7] = gADC_output[7];
    207e:	80 91 1a 04 	lds	r24, 0x041A
    2082:	90 91 1b 04 	lds	r25, 0x041B
    2086:	98 8f       	std	Y+24, r25	; 0x18
    2088:	8f 8b       	std	Y+23, r24	; 0x17

	Serial.write((uint8_t*)&msg, sizeof(msg_ADC12b_type));
    208a:	86 ea       	ldi	r24, 0xA6	; 166
    208c:	93 e0       	ldi	r25, 0x03	; 3
    208e:	b8 01       	movw	r22, r16
    2090:	48 e1       	ldi	r20, 0x18	; 24
    2092:	50 e0       	ldi	r21, 0x00	; 0
    2094:	0e 94 7f 07 	call	0xefe	; 0xefe <_ZN5Print5writeEPKhj>

}
    2098:	68 96       	adiw	r28, 0x18	; 24
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	f8 94       	cli
    209e:	de bf       	out	0x3e, r29	; 62
    20a0:	0f be       	out	0x3f, r0	; 63
    20a2:	cd bf       	out	0x3d, r28	; 61
    20a4:	cf 91       	pop	r28
    20a6:	df 91       	pop	r29
    20a8:	1f 91       	pop	r17
    20aa:	0f 91       	pop	r16
    20ac:	08 95       	ret

000020ae <_ZN13AccelerometerC2Ev>:

// Copyright (c) 2009 Brijesh Sirpatil

#include "Accelerometer.h"

Accelerometer::Accelerometer()
    20ae:	fc 01       	movw	r30, r24
{
	//Store precomputed Sensor reading. This values must be updated during sensor calibrartion.
	mX_zero = 1234;
    20b0:	82 ed       	ldi	r24, 0xD2	; 210
    20b2:	94 e0       	ldi	r25, 0x04	; 4
    20b4:	97 83       	std	Z+7, r25	; 0x07
    20b6:	86 83       	std	Z+6, r24	; 0x06
	mY_zero = 1234;
    20b8:	91 87       	std	Z+9, r25	; 0x09
    20ba:	80 87       	std	Z+8, r24	; 0x08
	mZ_zero = 1234;
    20bc:	93 87       	std	Z+11, r25	; 0x0b
    20be:	82 87       	std	Z+10, r24	; 0x0a
	
	mX = 0;
    20c0:	11 82       	std	Z+1, r1	; 0x01
    20c2:	10 82       	st	Z, r1
	mY = 0;
    20c4:	13 82       	std	Z+3, r1	; 0x03
    20c6:	12 82       	std	Z+2, r1	; 0x02
	mZ = 0;
    20c8:	15 82       	std	Z+5, r1	; 0x05
    20ca:	14 82       	std	Z+4, r1	; 0x04
}
    20cc:	08 95       	ret

000020ce <_ZN13AccelerometerC1Ev>:

// Copyright (c) 2009 Brijesh Sirpatil

#include "Accelerometer.h"

Accelerometer::Accelerometer()
    20ce:	fc 01       	movw	r30, r24
{
	//Store precomputed Sensor reading. This values must be updated during sensor calibrartion.
	mX_zero = 1234;
    20d0:	82 ed       	ldi	r24, 0xD2	; 210
    20d2:	94 e0       	ldi	r25, 0x04	; 4
    20d4:	97 83       	std	Z+7, r25	; 0x07
    20d6:	86 83       	std	Z+6, r24	; 0x06
	mY_zero = 1234;
    20d8:	91 87       	std	Z+9, r25	; 0x09
    20da:	80 87       	std	Z+8, r24	; 0x08
	mZ_zero = 1234;
    20dc:	93 87       	std	Z+11, r25	; 0x0b
    20de:	82 87       	std	Z+10, r24	; 0x0a
	
	mX = 0;
    20e0:	11 82       	std	Z+1, r1	; 0x01
    20e2:	10 82       	st	Z, r1
	mY = 0;
    20e4:	13 82       	std	Z+3, r1	; 0x03
    20e6:	12 82       	std	Z+2, r1	; 0x02
	mZ = 0;
    20e8:	15 82       	std	Z+5, r1	; 0x05
    20ea:	14 82       	std	Z+4, r1	; 0x04
}
    20ec:	08 95       	ret

000020ee <_ZN13Accelerometer15set_zero_valuesEjjj>:

void Accelerometer::set_zero_values(uint16_t x, uint16_t y, uint16_t z)
    20ee:	fc 01       	movw	r30, r24
{
	mX_zero = x;
    20f0:	77 83       	std	Z+7, r23	; 0x07
    20f2:	66 83       	std	Z+6, r22	; 0x06
	mY_zero = y;
    20f4:	51 87       	std	Z+9, r21	; 0x09
    20f6:	40 87       	std	Z+8, r20	; 0x08
	mZ_zero = z;
    20f8:	33 87       	std	Z+11, r19	; 0x0b
    20fa:	22 87       	std	Z+10, r18	; 0x0a
}
    20fc:	08 95       	ret

000020fe <_ZN13Accelerometer18process_ADC_sampleEjjj>:

void Accelerometer::process_ADC_sample(uint16_t a, uint16_t b, uint16_t c)
    20fe:	fc 01       	movw	r30, r24
{
	mX = a - mX_zero;
    2100:	86 81       	ldd	r24, Z+6	; 0x06
    2102:	97 81       	ldd	r25, Z+7	; 0x07
    2104:	68 1b       	sub	r22, r24
    2106:	79 0b       	sbc	r23, r25
    2108:	71 83       	std	Z+1, r23	; 0x01
    210a:	60 83       	st	Z, r22
	mY = b - mY_zero;
    210c:	80 85       	ldd	r24, Z+8	; 0x08
    210e:	91 85       	ldd	r25, Z+9	; 0x09
    2110:	48 1b       	sub	r20, r24
    2112:	59 0b       	sbc	r21, r25
    2114:	53 83       	std	Z+3, r21	; 0x03
    2116:	42 83       	std	Z+2, r20	; 0x02
	mZ = c - mZ_zero;
    2118:	82 85       	ldd	r24, Z+10	; 0x0a
    211a:	93 85       	ldd	r25, Z+11	; 0x0b
    211c:	28 1b       	sub	r18, r24
    211e:	39 0b       	sbc	r19, r25
    2120:	35 83       	std	Z+5, r19	; 0x05
    2122:	24 83       	std	Z+4, r18	; 0x04
}  
    2124:	08 95       	ret

00002126 <_GLOBAL__I__ZN13AccelerometerC2Ev>:
#include "Accelerometer.h"

Accelerometer::Accelerometer()
{
	//Store precomputed Sensor reading. This values must be updated during sensor calibrartion.
	mX_zero = 1234;
    2126:	82 ed       	ldi	r24, 0xD2	; 210
    2128:	94 e0       	ldi	r25, 0x04	; 4
    212a:	90 93 fb 03 	sts	0x03FB, r25
    212e:	80 93 fa 03 	sts	0x03FA, r24
	mY_zero = 1234;
    2132:	90 93 fd 03 	sts	0x03FD, r25
    2136:	80 93 fc 03 	sts	0x03FC, r24
	mZ_zero = 1234;
    213a:	90 93 ff 03 	sts	0x03FF, r25
    213e:	80 93 fe 03 	sts	0x03FE, r24
	
	mX = 0;
    2142:	10 92 f5 03 	sts	0x03F5, r1
    2146:	10 92 f4 03 	sts	0x03F4, r1
	mY = 0;
    214a:	10 92 f7 03 	sts	0x03F7, r1
    214e:	10 92 f6 03 	sts	0x03F6, r1
	mZ = 0;
    2152:	10 92 f9 03 	sts	0x03F9, r1
    2156:	10 92 f8 03 	sts	0x03F8, r1
}  


// Preinstantiate Objects //////////////////////////////////////////////////////

Accelerometer Acclmtr;
    215a:	08 95       	ret

0000215c <_ZN10GyroSensorC2Ev>:

// Copyright (c) 2009 Brijesh Sirpatil

#include "GyroSensor.h"

GyroSensor::GyroSensor()
    215c:	fc 01       	movw	r30, r24
{
	//Store precomputed Sensor reading. This values must be updated during sensor calibrartion.
	mX_zero = 1234;
    215e:	82 ed       	ldi	r24, 0xD2	; 210
    2160:	94 e0       	ldi	r25, 0x04	; 4
    2162:	97 83       	std	Z+7, r25	; 0x07
    2164:	86 83       	std	Z+6, r24	; 0x06
	mY_zero = 1234;
    2166:	91 87       	std	Z+9, r25	; 0x09
    2168:	80 87       	std	Z+8, r24	; 0x08
	mZ_zero = 1234;
    216a:	93 87       	std	Z+11, r25	; 0x0b
    216c:	82 87       	std	Z+10, r24	; 0x0a
	
	mX = 0;
    216e:	11 82       	std	Z+1, r1	; 0x01
    2170:	10 82       	st	Z, r1
	mY = 0;
    2172:	13 82       	std	Z+3, r1	; 0x03
    2174:	12 82       	std	Z+2, r1	; 0x02
	mZ = 0;
    2176:	15 82       	std	Z+5, r1	; 0x05
    2178:	14 82       	std	Z+4, r1	; 0x04
}
    217a:	08 95       	ret

0000217c <_ZN10GyroSensorC1Ev>:

// Copyright (c) 2009 Brijesh Sirpatil

#include "GyroSensor.h"

GyroSensor::GyroSensor()
    217c:	fc 01       	movw	r30, r24
{
	//Store precomputed Sensor reading. This values must be updated during sensor calibrartion.
	mX_zero = 1234;
    217e:	82 ed       	ldi	r24, 0xD2	; 210
    2180:	94 e0       	ldi	r25, 0x04	; 4
    2182:	97 83       	std	Z+7, r25	; 0x07
    2184:	86 83       	std	Z+6, r24	; 0x06
	mY_zero = 1234;
    2186:	91 87       	std	Z+9, r25	; 0x09
    2188:	80 87       	std	Z+8, r24	; 0x08
	mZ_zero = 1234;
    218a:	93 87       	std	Z+11, r25	; 0x0b
    218c:	82 87       	std	Z+10, r24	; 0x0a
	
	mX = 0;
    218e:	11 82       	std	Z+1, r1	; 0x01
    2190:	10 82       	st	Z, r1
	mY = 0;
    2192:	13 82       	std	Z+3, r1	; 0x03
    2194:	12 82       	std	Z+2, r1	; 0x02
	mZ = 0;
    2196:	15 82       	std	Z+5, r1	; 0x05
    2198:	14 82       	std	Z+4, r1	; 0x04
}
    219a:	08 95       	ret

0000219c <_ZN10GyroSensor15set_zero_valuesEjjj>:

void GyroSensor::set_zero_values(uint16_t x, uint16_t y, uint16_t z)
    219c:	fc 01       	movw	r30, r24
{
	mX_zero = x;
    219e:	77 83       	std	Z+7, r23	; 0x07
    21a0:	66 83       	std	Z+6, r22	; 0x06
	mY_zero = y;
    21a2:	51 87       	std	Z+9, r21	; 0x09
    21a4:	40 87       	std	Z+8, r20	; 0x08
	mZ_zero = z;
    21a6:	33 87       	std	Z+11, r19	; 0x0b
    21a8:	22 87       	std	Z+10, r18	; 0x0a
}
    21aa:	08 95       	ret

000021ac <_ZN10GyroSensor18process_ADC_sampleEjjj>:

void GyroSensor::process_ADC_sample(uint16_t a, uint16_t b, uint16_t c)
    21ac:	fc 01       	movw	r30, r24
{
	mX = a - mX_zero;
    21ae:	86 81       	ldd	r24, Z+6	; 0x06
    21b0:	97 81       	ldd	r25, Z+7	; 0x07
    21b2:	68 1b       	sub	r22, r24
    21b4:	79 0b       	sbc	r23, r25
    21b6:	71 83       	std	Z+1, r23	; 0x01
    21b8:	60 83       	st	Z, r22
	mY = b - mY_zero;
    21ba:	80 85       	ldd	r24, Z+8	; 0x08
    21bc:	91 85       	ldd	r25, Z+9	; 0x09
    21be:	48 1b       	sub	r20, r24
    21c0:	59 0b       	sbc	r21, r25
    21c2:	53 83       	std	Z+3, r21	; 0x03
    21c4:	42 83       	std	Z+2, r20	; 0x02
	mZ = c - mZ_zero;
    21c6:	82 85       	ldd	r24, Z+10	; 0x0a
    21c8:	93 85       	ldd	r25, Z+11	; 0x0b
    21ca:	28 1b       	sub	r18, r24
    21cc:	39 0b       	sbc	r19, r25
    21ce:	35 83       	std	Z+5, r19	; 0x05
    21d0:	24 83       	std	Z+4, r18	; 0x04
}  
    21d2:	08 95       	ret

000021d4 <_GLOBAL__I__ZN10GyroSensorC2Ev>:
#include "GyroSensor.h"

GyroSensor::GyroSensor()
{
	//Store precomputed Sensor reading. This values must be updated during sensor calibrartion.
	mX_zero = 1234;
    21d4:	82 ed       	ldi	r24, 0xD2	; 210
    21d6:	94 e0       	ldi	r25, 0x04	; 4
    21d8:	90 93 07 04 	sts	0x0407, r25
    21dc:	80 93 06 04 	sts	0x0406, r24
	mY_zero = 1234;
    21e0:	90 93 09 04 	sts	0x0409, r25
    21e4:	80 93 08 04 	sts	0x0408, r24
	mZ_zero = 1234;
    21e8:	90 93 0b 04 	sts	0x040B, r25
    21ec:	80 93 0a 04 	sts	0x040A, r24
	
	mX = 0;
    21f0:	10 92 01 04 	sts	0x0401, r1
    21f4:	10 92 00 04 	sts	0x0400, r1
	mY = 0;
    21f8:	10 92 03 04 	sts	0x0403, r1
    21fc:	10 92 02 04 	sts	0x0402, r1
	mZ = 0;
    2200:	10 92 05 04 	sts	0x0405, r1
    2204:	10 92 04 04 	sts	0x0404, r1
}  


// Preinstantiate Objects //////////////////////////////////////////////////////

GyroSensor Gyro;
    2208:	08 95       	ret

0000220a <__mulsi3>:
    220a:	62 9f       	mul	r22, r18
    220c:	d0 01       	movw	r26, r0
    220e:	73 9f       	mul	r23, r19
    2210:	f0 01       	movw	r30, r0
    2212:	82 9f       	mul	r24, r18
    2214:	e0 0d       	add	r30, r0
    2216:	f1 1d       	adc	r31, r1
    2218:	64 9f       	mul	r22, r20
    221a:	e0 0d       	add	r30, r0
    221c:	f1 1d       	adc	r31, r1
    221e:	92 9f       	mul	r25, r18
    2220:	f0 0d       	add	r31, r0
    2222:	83 9f       	mul	r24, r19
    2224:	f0 0d       	add	r31, r0
    2226:	74 9f       	mul	r23, r20
    2228:	f0 0d       	add	r31, r0
    222a:	65 9f       	mul	r22, r21
    222c:	f0 0d       	add	r31, r0
    222e:	99 27       	eor	r25, r25
    2230:	72 9f       	mul	r23, r18
    2232:	b0 0d       	add	r27, r0
    2234:	e1 1d       	adc	r30, r1
    2236:	f9 1f       	adc	r31, r25
    2238:	63 9f       	mul	r22, r19
    223a:	b0 0d       	add	r27, r0
    223c:	e1 1d       	adc	r30, r1
    223e:	f9 1f       	adc	r31, r25
    2240:	bd 01       	movw	r22, r26
    2242:	cf 01       	movw	r24, r30
    2244:	11 24       	eor	r1, r1
    2246:	08 95       	ret

00002248 <__divmodhi4>:
    2248:	97 fb       	bst	r25, 7
    224a:	09 2e       	mov	r0, r25
    224c:	07 26       	eor	r0, r23
    224e:	0a d0       	rcall	.+20     	; 0x2264 <__divmodhi4_neg1>
    2250:	77 fd       	sbrc	r23, 7
    2252:	04 d0       	rcall	.+8      	; 0x225c <__divmodhi4_neg2>
    2254:	2e d0       	rcall	.+92     	; 0x22b2 <__udivmodhi4>
    2256:	06 d0       	rcall	.+12     	; 0x2264 <__divmodhi4_neg1>
    2258:	00 20       	and	r0, r0
    225a:	1a f4       	brpl	.+6      	; 0x2262 <__divmodhi4_exit>

0000225c <__divmodhi4_neg2>:
    225c:	70 95       	com	r23
    225e:	61 95       	neg	r22
    2260:	7f 4f       	sbci	r23, 0xFF	; 255

00002262 <__divmodhi4_exit>:
    2262:	08 95       	ret

00002264 <__divmodhi4_neg1>:
    2264:	f6 f7       	brtc	.-4      	; 0x2262 <__divmodhi4_exit>
    2266:	90 95       	com	r25
    2268:	81 95       	neg	r24
    226a:	9f 4f       	sbci	r25, 0xFF	; 255
    226c:	08 95       	ret

0000226e <__udivmodsi4>:
    226e:	a1 e2       	ldi	r26, 0x21	; 33
    2270:	1a 2e       	mov	r1, r26
    2272:	aa 1b       	sub	r26, r26
    2274:	bb 1b       	sub	r27, r27
    2276:	fd 01       	movw	r30, r26
    2278:	0d c0       	rjmp	.+26     	; 0x2294 <__udivmodsi4_ep>

0000227a <__udivmodsi4_loop>:
    227a:	aa 1f       	adc	r26, r26
    227c:	bb 1f       	adc	r27, r27
    227e:	ee 1f       	adc	r30, r30
    2280:	ff 1f       	adc	r31, r31
    2282:	a2 17       	cp	r26, r18
    2284:	b3 07       	cpc	r27, r19
    2286:	e4 07       	cpc	r30, r20
    2288:	f5 07       	cpc	r31, r21
    228a:	20 f0       	brcs	.+8      	; 0x2294 <__udivmodsi4_ep>
    228c:	a2 1b       	sub	r26, r18
    228e:	b3 0b       	sbc	r27, r19
    2290:	e4 0b       	sbc	r30, r20
    2292:	f5 0b       	sbc	r31, r21

00002294 <__udivmodsi4_ep>:
    2294:	66 1f       	adc	r22, r22
    2296:	77 1f       	adc	r23, r23
    2298:	88 1f       	adc	r24, r24
    229a:	99 1f       	adc	r25, r25
    229c:	1a 94       	dec	r1
    229e:	69 f7       	brne	.-38     	; 0x227a <__udivmodsi4_loop>
    22a0:	60 95       	com	r22
    22a2:	70 95       	com	r23
    22a4:	80 95       	com	r24
    22a6:	90 95       	com	r25
    22a8:	9b 01       	movw	r18, r22
    22aa:	ac 01       	movw	r20, r24
    22ac:	bd 01       	movw	r22, r26
    22ae:	cf 01       	movw	r24, r30
    22b0:	08 95       	ret

000022b2 <__udivmodhi4>:
    22b2:	aa 1b       	sub	r26, r26
    22b4:	bb 1b       	sub	r27, r27
    22b6:	51 e1       	ldi	r21, 0x11	; 17
    22b8:	07 c0       	rjmp	.+14     	; 0x22c8 <__udivmodhi4_ep>

000022ba <__udivmodhi4_loop>:
    22ba:	aa 1f       	adc	r26, r26
    22bc:	bb 1f       	adc	r27, r27
    22be:	a6 17       	cp	r26, r22
    22c0:	b7 07       	cpc	r27, r23
    22c2:	10 f0       	brcs	.+4      	; 0x22c8 <__udivmodhi4_ep>
    22c4:	a6 1b       	sub	r26, r22
    22c6:	b7 0b       	sbc	r27, r23

000022c8 <__udivmodhi4_ep>:
    22c8:	88 1f       	adc	r24, r24
    22ca:	99 1f       	adc	r25, r25
    22cc:	5a 95       	dec	r21
    22ce:	a9 f7       	brne	.-22     	; 0x22ba <__udivmodhi4_loop>
    22d0:	80 95       	com	r24
    22d2:	90 95       	com	r25
    22d4:	bc 01       	movw	r22, r24
    22d6:	cd 01       	movw	r24, r26
    22d8:	08 95       	ret

000022da <__prologue_saves__>:
    22da:	2f 92       	push	r2
    22dc:	3f 92       	push	r3
    22de:	4f 92       	push	r4
    22e0:	5f 92       	push	r5
    22e2:	6f 92       	push	r6
    22e4:	7f 92       	push	r7
    22e6:	8f 92       	push	r8
    22e8:	9f 92       	push	r9
    22ea:	af 92       	push	r10
    22ec:	bf 92       	push	r11
    22ee:	cf 92       	push	r12
    22f0:	df 92       	push	r13
    22f2:	ef 92       	push	r14
    22f4:	ff 92       	push	r15
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	cd b7       	in	r28, 0x3d	; 61
    2300:	de b7       	in	r29, 0x3e	; 62
    2302:	ca 1b       	sub	r28, r26
    2304:	db 0b       	sbc	r29, r27
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	09 94       	ijmp

00002312 <__epilogue_restores__>:
    2312:	2a 88       	ldd	r2, Y+18	; 0x12
    2314:	39 88       	ldd	r3, Y+17	; 0x11
    2316:	48 88       	ldd	r4, Y+16	; 0x10
    2318:	5f 84       	ldd	r5, Y+15	; 0x0f
    231a:	6e 84       	ldd	r6, Y+14	; 0x0e
    231c:	7d 84       	ldd	r7, Y+13	; 0x0d
    231e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2320:	9b 84       	ldd	r9, Y+11	; 0x0b
    2322:	aa 84       	ldd	r10, Y+10	; 0x0a
    2324:	b9 84       	ldd	r11, Y+9	; 0x09
    2326:	c8 84       	ldd	r12, Y+8	; 0x08
    2328:	df 80       	ldd	r13, Y+7	; 0x07
    232a:	ee 80       	ldd	r14, Y+6	; 0x06
    232c:	fd 80       	ldd	r15, Y+5	; 0x05
    232e:	0c 81       	ldd	r16, Y+4	; 0x04
    2330:	1b 81       	ldd	r17, Y+3	; 0x03
    2332:	aa 81       	ldd	r26, Y+2	; 0x02
    2334:	b9 81       	ldd	r27, Y+1	; 0x01
    2336:	ce 0f       	add	r28, r30
    2338:	d1 1d       	adc	r29, r1
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	ed 01       	movw	r28, r26
    2346:	08 95       	ret

00002348 <__tablejump2__>:
    2348:	ee 0f       	add	r30, r30
    234a:	ff 1f       	adc	r31, r31

0000234c <__tablejump__>:
    234c:	05 90       	lpm	r0, Z+
    234e:	f4 91       	lpm	r31, Z+
    2350:	e0 2d       	mov	r30, r0
    2352:	09 94       	ijmp

00002354 <_exit>:
    2354:	f8 94       	cli

00002356 <__stop_program>:
    2356:	ff cf       	rjmp	.-2      	; 0x2356 <__stop_program>
