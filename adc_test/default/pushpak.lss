
pushpak.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  00001cf6  00001d8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f6  00800294  00800294  00001f1e  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  00001f1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000477  00000000  00000000  000020fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001956  00000000  00000000  00002575  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f4  00000000  00000000  00003ecb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f16  00000000  00000000  000046bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  000055d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000006e6  00000000  00000000  000058f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d1d  00000000  00000000  00005fde  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b8  00000000  00000000  00006cfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__ctors_end>
       4:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       8:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
       c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      10:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      14:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      18:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      1c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      20:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      24:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      28:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      2c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      30:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      34:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      38:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      3c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      40:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      44:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      48:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      4c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      50:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      54:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      58:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      5c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      60:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <__vector_24>
      64:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      68:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      6c:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      70:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      74:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>
      78:	0c 94 67 00 	jmp	0xce	; 0xce <__bad_interrupt>

0000007c <__ctors_start>:
      7c:	6a 0b       	sbc	r22, r26

0000007e <__ctors_end>:
      7e:	11 24       	eor	r1, r1
      80:	1f be       	out	0x3f, r1	; 63
      82:	cf ef       	ldi	r28, 0xFF	; 255
      84:	d0 e1       	ldi	r29, 0x10	; 16
      86:	de bf       	out	0x3e, r29	; 62
      88:	cd bf       	out	0x3d, r28	; 61

0000008a <__do_copy_data>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a0 e0       	ldi	r26, 0x00	; 0
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	e6 ef       	ldi	r30, 0xF6	; 246
      92:	fc e1       	ldi	r31, 0x1C	; 28
      94:	02 c0       	rjmp	.+4      	; 0x9a <.do_copy_data_start>

00000096 <.do_copy_data_loop>:
      96:	05 90       	lpm	r0, Z+
      98:	0d 92       	st	X+, r0

0000009a <.do_copy_data_start>:
      9a:	a4 39       	cpi	r26, 0x94	; 148
      9c:	b1 07       	cpc	r27, r17
      9e:	d9 f7       	brne	.-10     	; 0x96 <.do_copy_data_loop>

000000a0 <__do_clear_bss>:
      a0:	13 e0       	ldi	r17, 0x03	; 3
      a2:	a4 e9       	ldi	r26, 0x94	; 148
      a4:	b2 e0       	ldi	r27, 0x02	; 2
      a6:	01 c0       	rjmp	.+2      	; 0xaa <.do_clear_bss_start>

000000a8 <.do_clear_bss_loop>:
      a8:	1d 92       	st	X+, r1

000000aa <.do_clear_bss_start>:
      aa:	aa 38       	cpi	r26, 0x8A	; 138
      ac:	b1 07       	cpc	r27, r17
      ae:	e1 f7       	brne	.-8      	; 0xa8 <.do_clear_bss_loop>

000000b0 <__do_global_ctors>:
      b0:	10 e0       	ldi	r17, 0x00	; 0
      b2:	ce e7       	ldi	r28, 0x7E	; 126
      b4:	d0 e0       	ldi	r29, 0x00	; 0
      b6:	04 c0       	rjmp	.+8      	; 0xc0 <.do_global_ctors_start>

000000b8 <.do_global_ctors_loop>:
      b8:	22 97       	sbiw	r28, 0x02	; 2
      ba:	fe 01       	movw	r30, r28
      bc:	0e 94 75 0e 	call	0x1cea	; 0x1cea <__tablejump__>

000000c0 <.do_global_ctors_start>:
      c0:	cc 37       	cpi	r28, 0x7C	; 124
      c2:	d1 07       	cpc	r29, r17
      c4:	c9 f7       	brne	.-14     	; 0xb8 <.do_global_ctors_loop>
      c6:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <main>
      ca:	0c 94 79 0e 	jmp	0x1cf2	; 0x1cf2 <_exit>

000000ce <__bad_interrupt>:
      ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d2 <__fixunssfsi>:
      d2:	ef 92       	push	r14
      d4:	ff 92       	push	r15
      d6:	0f 93       	push	r16
      d8:	1f 93       	push	r17
      da:	7b 01       	movw	r14, r22
      dc:	8c 01       	movw	r16, r24
      de:	20 e0       	ldi	r18, 0x00	; 0
      e0:	30 e0       	ldi	r19, 0x00	; 0
      e2:	40 e0       	ldi	r20, 0x00	; 0
      e4:	5f e4       	ldi	r21, 0x4F	; 79
      e6:	0e 94 e5 03 	call	0x7ca	; 0x7ca <__gesf2>
      ea:	88 23       	and	r24, r24
      ec:	8c f0       	brlt	.+34     	; 0x110 <__fixunssfsi+0x3e>
      ee:	c8 01       	movw	r24, r16
      f0:	b7 01       	movw	r22, r14
      f2:	20 e0       	ldi	r18, 0x00	; 0
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	40 e0       	ldi	r20, 0x00	; 0
      f8:	5f e4       	ldi	r21, 0x4F	; 79
      fa:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__subsf3>
      fe:	0e 94 a3 04 	call	0x946	; 0x946 <__fixsfsi>
     102:	9b 01       	movw	r18, r22
     104:	ac 01       	movw	r20, r24
     106:	20 50       	subi	r18, 0x00	; 0
     108:	30 40       	sbci	r19, 0x00	; 0
     10a:	40 40       	sbci	r20, 0x00	; 0
     10c:	50 48       	sbci	r21, 0x80	; 128
     10e:	06 c0       	rjmp	.+12     	; 0x11c <__fixunssfsi+0x4a>
     110:	c8 01       	movw	r24, r16
     112:	b7 01       	movw	r22, r14
     114:	0e 94 a3 04 	call	0x946	; 0x946 <__fixsfsi>
     118:	9b 01       	movw	r18, r22
     11a:	ac 01       	movw	r20, r24
     11c:	b9 01       	movw	r22, r18
     11e:	ca 01       	movw	r24, r20
     120:	1f 91       	pop	r17
     122:	0f 91       	pop	r16
     124:	ff 90       	pop	r15
     126:	ef 90       	pop	r14
     128:	08 95       	ret

0000012a <_fpadd_parts>:
     12a:	a0 e0       	ldi	r26, 0x00	; 0
     12c:	b0 e0       	ldi	r27, 0x00	; 0
     12e:	eb e9       	ldi	r30, 0x9B	; 155
     130:	f0 e0       	ldi	r31, 0x00	; 0
     132:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__prologue_saves__>
     136:	dc 01       	movw	r26, r24
     138:	2b 01       	movw	r4, r22
     13a:	fa 01       	movw	r30, r20
     13c:	9c 91       	ld	r25, X
     13e:	92 30       	cpi	r25, 0x02	; 2
     140:	08 f4       	brcc	.+2      	; 0x144 <_fpadd_parts+0x1a>
     142:	39 c1       	rjmp	.+626    	; 0x3b6 <_fpadd_parts+0x28c>
     144:	eb 01       	movw	r28, r22
     146:	88 81       	ld	r24, Y
     148:	82 30       	cpi	r24, 0x02	; 2
     14a:	08 f4       	brcc	.+2      	; 0x14e <_fpadd_parts+0x24>
     14c:	33 c1       	rjmp	.+614    	; 0x3b4 <_fpadd_parts+0x28a>
     14e:	94 30       	cpi	r25, 0x04	; 4
     150:	69 f4       	brne	.+26     	; 0x16c <_fpadd_parts+0x42>
     152:	84 30       	cpi	r24, 0x04	; 4
     154:	09 f0       	breq	.+2      	; 0x158 <_fpadd_parts+0x2e>
     156:	2f c1       	rjmp	.+606    	; 0x3b6 <_fpadd_parts+0x28c>
     158:	11 96       	adiw	r26, 0x01	; 1
     15a:	9c 91       	ld	r25, X
     15c:	11 97       	sbiw	r26, 0x01	; 1
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	98 17       	cp	r25, r24
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x3c>
     164:	28 c1       	rjmp	.+592    	; 0x3b6 <_fpadd_parts+0x28c>
     166:	a4 e6       	ldi	r26, 0x64	; 100
     168:	b1 e0       	ldi	r27, 0x01	; 1
     16a:	25 c1       	rjmp	.+586    	; 0x3b6 <_fpadd_parts+0x28c>
     16c:	84 30       	cpi	r24, 0x04	; 4
     16e:	09 f4       	brne	.+2      	; 0x172 <_fpadd_parts+0x48>
     170:	21 c1       	rjmp	.+578    	; 0x3b4 <_fpadd_parts+0x28a>
     172:	82 30       	cpi	r24, 0x02	; 2
     174:	a9 f4       	brne	.+42     	; 0x1a0 <_fpadd_parts+0x76>
     176:	92 30       	cpi	r25, 0x02	; 2
     178:	09 f0       	breq	.+2      	; 0x17c <_fpadd_parts+0x52>
     17a:	1d c1       	rjmp	.+570    	; 0x3b6 <_fpadd_parts+0x28c>
     17c:	9a 01       	movw	r18, r20
     17e:	ad 01       	movw	r20, r26
     180:	88 e0       	ldi	r24, 0x08	; 8
     182:	ea 01       	movw	r28, r20
     184:	09 90       	ld	r0, Y+
     186:	ae 01       	movw	r20, r28
     188:	e9 01       	movw	r28, r18
     18a:	09 92       	st	Y+, r0
     18c:	9e 01       	movw	r18, r28
     18e:	81 50       	subi	r24, 0x01	; 1
     190:	c1 f7       	brne	.-16     	; 0x182 <_fpadd_parts+0x58>
     192:	e2 01       	movw	r28, r4
     194:	89 81       	ldd	r24, Y+1	; 0x01
     196:	11 96       	adiw	r26, 0x01	; 1
     198:	9c 91       	ld	r25, X
     19a:	89 23       	and	r24, r25
     19c:	81 83       	std	Z+1, r24	; 0x01
     19e:	08 c1       	rjmp	.+528    	; 0x3b0 <_fpadd_parts+0x286>
     1a0:	92 30       	cpi	r25, 0x02	; 2
     1a2:	09 f4       	brne	.+2      	; 0x1a6 <_fpadd_parts+0x7c>
     1a4:	07 c1       	rjmp	.+526    	; 0x3b4 <_fpadd_parts+0x28a>
     1a6:	12 96       	adiw	r26, 0x02	; 2
     1a8:	2d 90       	ld	r2, X+
     1aa:	3c 90       	ld	r3, X
     1ac:	13 97       	sbiw	r26, 0x03	; 3
     1ae:	eb 01       	movw	r28, r22
     1b0:	8a 81       	ldd	r24, Y+2	; 0x02
     1b2:	9b 81       	ldd	r25, Y+3	; 0x03
     1b4:	14 96       	adiw	r26, 0x04	; 4
     1b6:	ad 90       	ld	r10, X+
     1b8:	bd 90       	ld	r11, X+
     1ba:	cd 90       	ld	r12, X+
     1bc:	dc 90       	ld	r13, X
     1be:	17 97       	sbiw	r26, 0x07	; 7
     1c0:	ec 80       	ldd	r14, Y+4	; 0x04
     1c2:	fd 80       	ldd	r15, Y+5	; 0x05
     1c4:	0e 81       	ldd	r16, Y+6	; 0x06
     1c6:	1f 81       	ldd	r17, Y+7	; 0x07
     1c8:	91 01       	movw	r18, r2
     1ca:	28 1b       	sub	r18, r24
     1cc:	39 0b       	sbc	r19, r25
     1ce:	b9 01       	movw	r22, r18
     1d0:	37 ff       	sbrs	r19, 7
     1d2:	04 c0       	rjmp	.+8      	; 0x1dc <_fpadd_parts+0xb2>
     1d4:	66 27       	eor	r22, r22
     1d6:	77 27       	eor	r23, r23
     1d8:	62 1b       	sub	r22, r18
     1da:	73 0b       	sbc	r23, r19
     1dc:	60 32       	cpi	r22, 0x20	; 32
     1de:	71 05       	cpc	r23, r1
     1e0:	0c f0       	brlt	.+2      	; 0x1e4 <_fpadd_parts+0xba>
     1e2:	61 c0       	rjmp	.+194    	; 0x2a6 <_fpadd_parts+0x17c>
     1e4:	12 16       	cp	r1, r18
     1e6:	13 06       	cpc	r1, r19
     1e8:	6c f5       	brge	.+90     	; 0x244 <_fpadd_parts+0x11a>
     1ea:	37 01       	movw	r6, r14
     1ec:	48 01       	movw	r8, r16
     1ee:	06 2e       	mov	r0, r22
     1f0:	04 c0       	rjmp	.+8      	; 0x1fa <_fpadd_parts+0xd0>
     1f2:	96 94       	lsr	r9
     1f4:	87 94       	ror	r8
     1f6:	77 94       	ror	r7
     1f8:	67 94       	ror	r6
     1fa:	0a 94       	dec	r0
     1fc:	d2 f7       	brpl	.-12     	; 0x1f2 <_fpadd_parts+0xc8>
     1fe:	21 e0       	ldi	r18, 0x01	; 1
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	40 e0       	ldi	r20, 0x00	; 0
     204:	50 e0       	ldi	r21, 0x00	; 0
     206:	04 c0       	rjmp	.+8      	; 0x210 <_fpadd_parts+0xe6>
     208:	22 0f       	add	r18, r18
     20a:	33 1f       	adc	r19, r19
     20c:	44 1f       	adc	r20, r20
     20e:	55 1f       	adc	r21, r21
     210:	6a 95       	dec	r22
     212:	d2 f7       	brpl	.-12     	; 0x208 <_fpadd_parts+0xde>
     214:	21 50       	subi	r18, 0x01	; 1
     216:	30 40       	sbci	r19, 0x00	; 0
     218:	40 40       	sbci	r20, 0x00	; 0
     21a:	50 40       	sbci	r21, 0x00	; 0
     21c:	2e 21       	and	r18, r14
     21e:	3f 21       	and	r19, r15
     220:	40 23       	and	r20, r16
     222:	51 23       	and	r21, r17
     224:	21 15       	cp	r18, r1
     226:	31 05       	cpc	r19, r1
     228:	41 05       	cpc	r20, r1
     22a:	51 05       	cpc	r21, r1
     22c:	21 f0       	breq	.+8      	; 0x236 <_fpadd_parts+0x10c>
     22e:	21 e0       	ldi	r18, 0x01	; 1
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	40 e0       	ldi	r20, 0x00	; 0
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	79 01       	movw	r14, r18
     238:	8a 01       	movw	r16, r20
     23a:	e6 28       	or	r14, r6
     23c:	f7 28       	or	r15, r7
     23e:	08 29       	or	r16, r8
     240:	19 29       	or	r17, r9
     242:	3c c0       	rjmp	.+120    	; 0x2bc <_fpadd_parts+0x192>
     244:	23 2b       	or	r18, r19
     246:	d1 f1       	breq	.+116    	; 0x2bc <_fpadd_parts+0x192>
     248:	26 0e       	add	r2, r22
     24a:	37 1e       	adc	r3, r23
     24c:	35 01       	movw	r6, r10
     24e:	46 01       	movw	r8, r12
     250:	06 2e       	mov	r0, r22
     252:	04 c0       	rjmp	.+8      	; 0x25c <_fpadd_parts+0x132>
     254:	96 94       	lsr	r9
     256:	87 94       	ror	r8
     258:	77 94       	ror	r7
     25a:	67 94       	ror	r6
     25c:	0a 94       	dec	r0
     25e:	d2 f7       	brpl	.-12     	; 0x254 <_fpadd_parts+0x12a>
     260:	21 e0       	ldi	r18, 0x01	; 1
     262:	30 e0       	ldi	r19, 0x00	; 0
     264:	40 e0       	ldi	r20, 0x00	; 0
     266:	50 e0       	ldi	r21, 0x00	; 0
     268:	04 c0       	rjmp	.+8      	; 0x272 <_fpadd_parts+0x148>
     26a:	22 0f       	add	r18, r18
     26c:	33 1f       	adc	r19, r19
     26e:	44 1f       	adc	r20, r20
     270:	55 1f       	adc	r21, r21
     272:	6a 95       	dec	r22
     274:	d2 f7       	brpl	.-12     	; 0x26a <_fpadd_parts+0x140>
     276:	21 50       	subi	r18, 0x01	; 1
     278:	30 40       	sbci	r19, 0x00	; 0
     27a:	40 40       	sbci	r20, 0x00	; 0
     27c:	50 40       	sbci	r21, 0x00	; 0
     27e:	2a 21       	and	r18, r10
     280:	3b 21       	and	r19, r11
     282:	4c 21       	and	r20, r12
     284:	5d 21       	and	r21, r13
     286:	21 15       	cp	r18, r1
     288:	31 05       	cpc	r19, r1
     28a:	41 05       	cpc	r20, r1
     28c:	51 05       	cpc	r21, r1
     28e:	21 f0       	breq	.+8      	; 0x298 <_fpadd_parts+0x16e>
     290:	21 e0       	ldi	r18, 0x01	; 1
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	59 01       	movw	r10, r18
     29a:	6a 01       	movw	r12, r20
     29c:	a6 28       	or	r10, r6
     29e:	b7 28       	or	r11, r7
     2a0:	c8 28       	or	r12, r8
     2a2:	d9 28       	or	r13, r9
     2a4:	0b c0       	rjmp	.+22     	; 0x2bc <_fpadd_parts+0x192>
     2a6:	82 15       	cp	r24, r2
     2a8:	93 05       	cpc	r25, r3
     2aa:	2c f0       	brlt	.+10     	; 0x2b6 <_fpadd_parts+0x18c>
     2ac:	1c 01       	movw	r2, r24
     2ae:	aa 24       	eor	r10, r10
     2b0:	bb 24       	eor	r11, r11
     2b2:	65 01       	movw	r12, r10
     2b4:	03 c0       	rjmp	.+6      	; 0x2bc <_fpadd_parts+0x192>
     2b6:	ee 24       	eor	r14, r14
     2b8:	ff 24       	eor	r15, r15
     2ba:	87 01       	movw	r16, r14
     2bc:	11 96       	adiw	r26, 0x01	; 1
     2be:	9c 91       	ld	r25, X
     2c0:	d2 01       	movw	r26, r4
     2c2:	11 96       	adiw	r26, 0x01	; 1
     2c4:	8c 91       	ld	r24, X
     2c6:	98 17       	cp	r25, r24
     2c8:	09 f4       	brne	.+2      	; 0x2cc <_fpadd_parts+0x1a2>
     2ca:	45 c0       	rjmp	.+138    	; 0x356 <_fpadd_parts+0x22c>
     2cc:	99 23       	and	r25, r25
     2ce:	39 f0       	breq	.+14     	; 0x2de <_fpadd_parts+0x1b4>
     2d0:	a8 01       	movw	r20, r16
     2d2:	97 01       	movw	r18, r14
     2d4:	2a 19       	sub	r18, r10
     2d6:	3b 09       	sbc	r19, r11
     2d8:	4c 09       	sbc	r20, r12
     2da:	5d 09       	sbc	r21, r13
     2dc:	06 c0       	rjmp	.+12     	; 0x2ea <_fpadd_parts+0x1c0>
     2de:	a6 01       	movw	r20, r12
     2e0:	95 01       	movw	r18, r10
     2e2:	2e 19       	sub	r18, r14
     2e4:	3f 09       	sbc	r19, r15
     2e6:	40 0b       	sbc	r20, r16
     2e8:	51 0b       	sbc	r21, r17
     2ea:	57 fd       	sbrc	r21, 7
     2ec:	08 c0       	rjmp	.+16     	; 0x2fe <_fpadd_parts+0x1d4>
     2ee:	11 82       	std	Z+1, r1	; 0x01
     2f0:	33 82       	std	Z+3, r3	; 0x03
     2f2:	22 82       	std	Z+2, r2	; 0x02
     2f4:	24 83       	std	Z+4, r18	; 0x04
     2f6:	35 83       	std	Z+5, r19	; 0x05
     2f8:	46 83       	std	Z+6, r20	; 0x06
     2fa:	57 83       	std	Z+7, r21	; 0x07
     2fc:	1d c0       	rjmp	.+58     	; 0x338 <_fpadd_parts+0x20e>
     2fe:	81 e0       	ldi	r24, 0x01	; 1
     300:	81 83       	std	Z+1, r24	; 0x01
     302:	33 82       	std	Z+3, r3	; 0x03
     304:	22 82       	std	Z+2, r2	; 0x02
     306:	88 27       	eor	r24, r24
     308:	99 27       	eor	r25, r25
     30a:	dc 01       	movw	r26, r24
     30c:	82 1b       	sub	r24, r18
     30e:	93 0b       	sbc	r25, r19
     310:	a4 0b       	sbc	r26, r20
     312:	b5 0b       	sbc	r27, r21
     314:	84 83       	std	Z+4, r24	; 0x04
     316:	95 83       	std	Z+5, r25	; 0x05
     318:	a6 83       	std	Z+6, r26	; 0x06
     31a:	b7 83       	std	Z+7, r27	; 0x07
     31c:	0d c0       	rjmp	.+26     	; 0x338 <_fpadd_parts+0x20e>
     31e:	22 0f       	add	r18, r18
     320:	33 1f       	adc	r19, r19
     322:	44 1f       	adc	r20, r20
     324:	55 1f       	adc	r21, r21
     326:	24 83       	std	Z+4, r18	; 0x04
     328:	35 83       	std	Z+5, r19	; 0x05
     32a:	46 83       	std	Z+6, r20	; 0x06
     32c:	57 83       	std	Z+7, r21	; 0x07
     32e:	82 81       	ldd	r24, Z+2	; 0x02
     330:	93 81       	ldd	r25, Z+3	; 0x03
     332:	01 97       	sbiw	r24, 0x01	; 1
     334:	93 83       	std	Z+3, r25	; 0x03
     336:	82 83       	std	Z+2, r24	; 0x02
     338:	24 81       	ldd	r18, Z+4	; 0x04
     33a:	35 81       	ldd	r19, Z+5	; 0x05
     33c:	46 81       	ldd	r20, Z+6	; 0x06
     33e:	57 81       	ldd	r21, Z+7	; 0x07
     340:	da 01       	movw	r26, r20
     342:	c9 01       	movw	r24, r18
     344:	01 97       	sbiw	r24, 0x01	; 1
     346:	a1 09       	sbc	r26, r1
     348:	b1 09       	sbc	r27, r1
     34a:	8f 5f       	subi	r24, 0xFF	; 255
     34c:	9f 4f       	sbci	r25, 0xFF	; 255
     34e:	af 4f       	sbci	r26, 0xFF	; 255
     350:	bf 43       	sbci	r27, 0x3F	; 63
     352:	28 f3       	brcs	.-54     	; 0x31e <_fpadd_parts+0x1f4>
     354:	0b c0       	rjmp	.+22     	; 0x36c <_fpadd_parts+0x242>
     356:	91 83       	std	Z+1, r25	; 0x01
     358:	33 82       	std	Z+3, r3	; 0x03
     35a:	22 82       	std	Z+2, r2	; 0x02
     35c:	ea 0c       	add	r14, r10
     35e:	fb 1c       	adc	r15, r11
     360:	0c 1d       	adc	r16, r12
     362:	1d 1d       	adc	r17, r13
     364:	e4 82       	std	Z+4, r14	; 0x04
     366:	f5 82       	std	Z+5, r15	; 0x05
     368:	06 83       	std	Z+6, r16	; 0x06
     36a:	17 83       	std	Z+7, r17	; 0x07
     36c:	83 e0       	ldi	r24, 0x03	; 3
     36e:	80 83       	st	Z, r24
     370:	24 81       	ldd	r18, Z+4	; 0x04
     372:	35 81       	ldd	r19, Z+5	; 0x05
     374:	46 81       	ldd	r20, Z+6	; 0x06
     376:	57 81       	ldd	r21, Z+7	; 0x07
     378:	57 ff       	sbrs	r21, 7
     37a:	1a c0       	rjmp	.+52     	; 0x3b0 <_fpadd_parts+0x286>
     37c:	c9 01       	movw	r24, r18
     37e:	aa 27       	eor	r26, r26
     380:	97 fd       	sbrc	r25, 7
     382:	a0 95       	com	r26
     384:	ba 2f       	mov	r27, r26
     386:	81 70       	andi	r24, 0x01	; 1
     388:	90 70       	andi	r25, 0x00	; 0
     38a:	a0 70       	andi	r26, 0x00	; 0
     38c:	b0 70       	andi	r27, 0x00	; 0
     38e:	56 95       	lsr	r21
     390:	47 95       	ror	r20
     392:	37 95       	ror	r19
     394:	27 95       	ror	r18
     396:	82 2b       	or	r24, r18
     398:	93 2b       	or	r25, r19
     39a:	a4 2b       	or	r26, r20
     39c:	b5 2b       	or	r27, r21
     39e:	84 83       	std	Z+4, r24	; 0x04
     3a0:	95 83       	std	Z+5, r25	; 0x05
     3a2:	a6 83       	std	Z+6, r26	; 0x06
     3a4:	b7 83       	std	Z+7, r27	; 0x07
     3a6:	82 81       	ldd	r24, Z+2	; 0x02
     3a8:	93 81       	ldd	r25, Z+3	; 0x03
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	93 83       	std	Z+3, r25	; 0x03
     3ae:	82 83       	std	Z+2, r24	; 0x02
     3b0:	df 01       	movw	r26, r30
     3b2:	01 c0       	rjmp	.+2      	; 0x3b6 <_fpadd_parts+0x28c>
     3b4:	d2 01       	movw	r26, r4
     3b6:	cd 01       	movw	r24, r26
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	e2 e1       	ldi	r30, 0x12	; 18
     3be:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <__epilogue_restores__>

000003c2 <__subsf3>:
     3c2:	a0 e2       	ldi	r26, 0x20	; 32
     3c4:	b0 e0       	ldi	r27, 0x00	; 0
     3c6:	e7 ee       	ldi	r30, 0xE7	; 231
     3c8:	f1 e0       	ldi	r31, 0x01	; 1
     3ca:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__prologue_saves__+0x18>
     3ce:	69 83       	std	Y+1, r22	; 0x01
     3d0:	7a 83       	std	Y+2, r23	; 0x02
     3d2:	8b 83       	std	Y+3, r24	; 0x03
     3d4:	9c 83       	std	Y+4, r25	; 0x04
     3d6:	2d 83       	std	Y+5, r18	; 0x05
     3d8:	3e 83       	std	Y+6, r19	; 0x06
     3da:	4f 83       	std	Y+7, r20	; 0x07
     3dc:	58 87       	std	Y+8, r21	; 0x08
     3de:	e9 e0       	ldi	r30, 0x09	; 9
     3e0:	ee 2e       	mov	r14, r30
     3e2:	f1 2c       	mov	r15, r1
     3e4:	ec 0e       	add	r14, r28
     3e6:	fd 1e       	adc	r15, r29
     3e8:	ce 01       	movw	r24, r28
     3ea:	01 96       	adiw	r24, 0x01	; 1
     3ec:	b7 01       	movw	r22, r14
     3ee:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     3f2:	8e 01       	movw	r16, r28
     3f4:	0f 5e       	subi	r16, 0xEF	; 239
     3f6:	1f 4f       	sbci	r17, 0xFF	; 255
     3f8:	ce 01       	movw	r24, r28
     3fa:	05 96       	adiw	r24, 0x05	; 5
     3fc:	b8 01       	movw	r22, r16
     3fe:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     402:	8a 89       	ldd	r24, Y+18	; 0x12
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	89 27       	eor	r24, r25
     408:	8a 8b       	std	Y+18, r24	; 0x12
     40a:	c7 01       	movw	r24, r14
     40c:	b8 01       	movw	r22, r16
     40e:	ae 01       	movw	r20, r28
     410:	47 5e       	subi	r20, 0xE7	; 231
     412:	5f 4f       	sbci	r21, 0xFF	; 255
     414:	0e 94 95 00 	call	0x12a	; 0x12a <_fpadd_parts>
     418:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__pack_f>
     41c:	a0 96       	adiw	r28, 0x20	; 32
     41e:	e6 e0       	ldi	r30, 0x06	; 6
     420:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__epilogue_restores__+0x18>

00000424 <__addsf3>:
     424:	a0 e2       	ldi	r26, 0x20	; 32
     426:	b0 e0       	ldi	r27, 0x00	; 0
     428:	e8 e1       	ldi	r30, 0x18	; 24
     42a:	f2 e0       	ldi	r31, 0x02	; 2
     42c:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__prologue_saves__+0x18>
     430:	69 83       	std	Y+1, r22	; 0x01
     432:	7a 83       	std	Y+2, r23	; 0x02
     434:	8b 83       	std	Y+3, r24	; 0x03
     436:	9c 83       	std	Y+4, r25	; 0x04
     438:	2d 83       	std	Y+5, r18	; 0x05
     43a:	3e 83       	std	Y+6, r19	; 0x06
     43c:	4f 83       	std	Y+7, r20	; 0x07
     43e:	58 87       	std	Y+8, r21	; 0x08
     440:	f9 e0       	ldi	r31, 0x09	; 9
     442:	ef 2e       	mov	r14, r31
     444:	f1 2c       	mov	r15, r1
     446:	ec 0e       	add	r14, r28
     448:	fd 1e       	adc	r15, r29
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	b7 01       	movw	r22, r14
     450:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     454:	8e 01       	movw	r16, r28
     456:	0f 5e       	subi	r16, 0xEF	; 239
     458:	1f 4f       	sbci	r17, 0xFF	; 255
     45a:	ce 01       	movw	r24, r28
     45c:	05 96       	adiw	r24, 0x05	; 5
     45e:	b8 01       	movw	r22, r16
     460:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     464:	c7 01       	movw	r24, r14
     466:	b8 01       	movw	r22, r16
     468:	ae 01       	movw	r20, r28
     46a:	47 5e       	subi	r20, 0xE7	; 231
     46c:	5f 4f       	sbci	r21, 0xFF	; 255
     46e:	0e 94 95 00 	call	0x12a	; 0x12a <_fpadd_parts>
     472:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__pack_f>
     476:	a0 96       	adiw	r28, 0x20	; 32
     478:	e6 e0       	ldi	r30, 0x06	; 6
     47a:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__epilogue_restores__+0x18>

0000047e <__mulsf3>:
     47e:	a0 e2       	ldi	r26, 0x20	; 32
     480:	b0 e0       	ldi	r27, 0x00	; 0
     482:	e5 e4       	ldi	r30, 0x45	; 69
     484:	f2 e0       	ldi	r31, 0x02	; 2
     486:	0c 94 3c 0e 	jmp	0x1c78	; 0x1c78 <__prologue_saves__>
     48a:	69 83       	std	Y+1, r22	; 0x01
     48c:	7a 83       	std	Y+2, r23	; 0x02
     48e:	8b 83       	std	Y+3, r24	; 0x03
     490:	9c 83       	std	Y+4, r25	; 0x04
     492:	2d 83       	std	Y+5, r18	; 0x05
     494:	3e 83       	std	Y+6, r19	; 0x06
     496:	4f 83       	std	Y+7, r20	; 0x07
     498:	58 87       	std	Y+8, r21	; 0x08
     49a:	ce 01       	movw	r24, r28
     49c:	01 96       	adiw	r24, 0x01	; 1
     49e:	be 01       	movw	r22, r28
     4a0:	67 5f       	subi	r22, 0xF7	; 247
     4a2:	7f 4f       	sbci	r23, 0xFF	; 255
     4a4:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     4a8:	ce 01       	movw	r24, r28
     4aa:	05 96       	adiw	r24, 0x05	; 5
     4ac:	be 01       	movw	r22, r28
     4ae:	6f 5e       	subi	r22, 0xEF	; 239
     4b0:	7f 4f       	sbci	r23, 0xFF	; 255
     4b2:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     4b6:	99 85       	ldd	r25, Y+9	; 0x09
     4b8:	92 30       	cpi	r25, 0x02	; 2
     4ba:	88 f0       	brcs	.+34     	; 0x4de <__mulsf3+0x60>
     4bc:	89 89       	ldd	r24, Y+17	; 0x11
     4be:	82 30       	cpi	r24, 0x02	; 2
     4c0:	c8 f0       	brcs	.+50     	; 0x4f4 <__mulsf3+0x76>
     4c2:	94 30       	cpi	r25, 0x04	; 4
     4c4:	19 f4       	brne	.+6      	; 0x4cc <__mulsf3+0x4e>
     4c6:	82 30       	cpi	r24, 0x02	; 2
     4c8:	51 f4       	brne	.+20     	; 0x4de <__mulsf3+0x60>
     4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <__mulsf3+0x56>
     4cc:	84 30       	cpi	r24, 0x04	; 4
     4ce:	29 f4       	brne	.+10     	; 0x4da <__mulsf3+0x5c>
     4d0:	92 30       	cpi	r25, 0x02	; 2
     4d2:	81 f4       	brne	.+32     	; 0x4f4 <__mulsf3+0x76>
     4d4:	84 e6       	ldi	r24, 0x64	; 100
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	c6 c0       	rjmp	.+396    	; 0x666 <__mulsf3+0x1e8>
     4da:	92 30       	cpi	r25, 0x02	; 2
     4dc:	49 f4       	brne	.+18     	; 0x4f0 <__mulsf3+0x72>
     4de:	20 e0       	ldi	r18, 0x00	; 0
     4e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4e2:	8a 89       	ldd	r24, Y+18	; 0x12
     4e4:	98 13       	cpse	r25, r24
     4e6:	21 e0       	ldi	r18, 0x01	; 1
     4e8:	2a 87       	std	Y+10, r18	; 0x0a
     4ea:	ce 01       	movw	r24, r28
     4ec:	09 96       	adiw	r24, 0x09	; 9
     4ee:	bb c0       	rjmp	.+374    	; 0x666 <__mulsf3+0x1e8>
     4f0:	82 30       	cpi	r24, 0x02	; 2
     4f2:	49 f4       	brne	.+18     	; 0x506 <__mulsf3+0x88>
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4f8:	8a 89       	ldd	r24, Y+18	; 0x12
     4fa:	98 13       	cpse	r25, r24
     4fc:	21 e0       	ldi	r18, 0x01	; 1
     4fe:	2a 8b       	std	Y+18, r18	; 0x12
     500:	ce 01       	movw	r24, r28
     502:	41 96       	adiw	r24, 0x11	; 17
     504:	b0 c0       	rjmp	.+352    	; 0x666 <__mulsf3+0x1e8>
     506:	2d 84       	ldd	r2, Y+13	; 0x0d
     508:	3e 84       	ldd	r3, Y+14	; 0x0e
     50a:	4f 84       	ldd	r4, Y+15	; 0x0f
     50c:	58 88       	ldd	r5, Y+16	; 0x10
     50e:	6d 88       	ldd	r6, Y+21	; 0x15
     510:	7e 88       	ldd	r7, Y+22	; 0x16
     512:	8f 88       	ldd	r8, Y+23	; 0x17
     514:	98 8c       	ldd	r9, Y+24	; 0x18
     516:	ee 24       	eor	r14, r14
     518:	ff 24       	eor	r15, r15
     51a:	87 01       	movw	r16, r14
     51c:	aa 24       	eor	r10, r10
     51e:	bb 24       	eor	r11, r11
     520:	65 01       	movw	r12, r10
     522:	40 e0       	ldi	r20, 0x00	; 0
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	70 e0       	ldi	r23, 0x00	; 0
     52a:	e0 e0       	ldi	r30, 0x00	; 0
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	c1 01       	movw	r24, r2
     530:	81 70       	andi	r24, 0x01	; 1
     532:	90 70       	andi	r25, 0x00	; 0
     534:	89 2b       	or	r24, r25
     536:	e9 f0       	breq	.+58     	; 0x572 <__mulsf3+0xf4>
     538:	e6 0c       	add	r14, r6
     53a:	f7 1c       	adc	r15, r7
     53c:	08 1d       	adc	r16, r8
     53e:	19 1d       	adc	r17, r9
     540:	9a 01       	movw	r18, r20
     542:	ab 01       	movw	r20, r22
     544:	2a 0d       	add	r18, r10
     546:	3b 1d       	adc	r19, r11
     548:	4c 1d       	adc	r20, r12
     54a:	5d 1d       	adc	r21, r13
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	a0 e0       	ldi	r26, 0x00	; 0
     552:	b0 e0       	ldi	r27, 0x00	; 0
     554:	e6 14       	cp	r14, r6
     556:	f7 04       	cpc	r15, r7
     558:	08 05       	cpc	r16, r8
     55a:	19 05       	cpc	r17, r9
     55c:	20 f4       	brcc	.+8      	; 0x566 <__mulsf3+0xe8>
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	a0 e0       	ldi	r26, 0x00	; 0
     564:	b0 e0       	ldi	r27, 0x00	; 0
     566:	ba 01       	movw	r22, r20
     568:	a9 01       	movw	r20, r18
     56a:	48 0f       	add	r20, r24
     56c:	59 1f       	adc	r21, r25
     56e:	6a 1f       	adc	r22, r26
     570:	7b 1f       	adc	r23, r27
     572:	aa 0c       	add	r10, r10
     574:	bb 1c       	adc	r11, r11
     576:	cc 1c       	adc	r12, r12
     578:	dd 1c       	adc	r13, r13
     57a:	97 fe       	sbrs	r9, 7
     57c:	08 c0       	rjmp	.+16     	; 0x58e <__mulsf3+0x110>
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	a0 e0       	ldi	r26, 0x00	; 0
     584:	b0 e0       	ldi	r27, 0x00	; 0
     586:	a8 2a       	or	r10, r24
     588:	b9 2a       	or	r11, r25
     58a:	ca 2a       	or	r12, r26
     58c:	db 2a       	or	r13, r27
     58e:	31 96       	adiw	r30, 0x01	; 1
     590:	e0 32       	cpi	r30, 0x20	; 32
     592:	f1 05       	cpc	r31, r1
     594:	49 f0       	breq	.+18     	; 0x5a8 <__mulsf3+0x12a>
     596:	66 0c       	add	r6, r6
     598:	77 1c       	adc	r7, r7
     59a:	88 1c       	adc	r8, r8
     59c:	99 1c       	adc	r9, r9
     59e:	56 94       	lsr	r5
     5a0:	47 94       	ror	r4
     5a2:	37 94       	ror	r3
     5a4:	27 94       	ror	r2
     5a6:	c3 cf       	rjmp	.-122    	; 0x52e <__mulsf3+0xb0>
     5a8:	fa 85       	ldd	r31, Y+10	; 0x0a
     5aa:	ea 89       	ldd	r30, Y+18	; 0x12
     5ac:	2b 89       	ldd	r18, Y+19	; 0x13
     5ae:	3c 89       	ldd	r19, Y+20	; 0x14
     5b0:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b2:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b4:	28 0f       	add	r18, r24
     5b6:	39 1f       	adc	r19, r25
     5b8:	2e 5f       	subi	r18, 0xFE	; 254
     5ba:	3f 4f       	sbci	r19, 0xFF	; 255
     5bc:	17 c0       	rjmp	.+46     	; 0x5ec <__mulsf3+0x16e>
     5be:	ca 01       	movw	r24, r20
     5c0:	81 70       	andi	r24, 0x01	; 1
     5c2:	90 70       	andi	r25, 0x00	; 0
     5c4:	89 2b       	or	r24, r25
     5c6:	61 f0       	breq	.+24     	; 0x5e0 <__mulsf3+0x162>
     5c8:	16 95       	lsr	r17
     5ca:	07 95       	ror	r16
     5cc:	f7 94       	ror	r15
     5ce:	e7 94       	ror	r14
     5d0:	80 e0       	ldi	r24, 0x00	; 0
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	a0 e0       	ldi	r26, 0x00	; 0
     5d6:	b0 e8       	ldi	r27, 0x80	; 128
     5d8:	e8 2a       	or	r14, r24
     5da:	f9 2a       	or	r15, r25
     5dc:	0a 2b       	or	r16, r26
     5de:	1b 2b       	or	r17, r27
     5e0:	76 95       	lsr	r23
     5e2:	67 95       	ror	r22
     5e4:	57 95       	ror	r21
     5e6:	47 95       	ror	r20
     5e8:	2f 5f       	subi	r18, 0xFF	; 255
     5ea:	3f 4f       	sbci	r19, 0xFF	; 255
     5ec:	77 fd       	sbrc	r23, 7
     5ee:	e7 cf       	rjmp	.-50     	; 0x5be <__mulsf3+0x140>
     5f0:	0c c0       	rjmp	.+24     	; 0x60a <__mulsf3+0x18c>
     5f2:	44 0f       	add	r20, r20
     5f4:	55 1f       	adc	r21, r21
     5f6:	66 1f       	adc	r22, r22
     5f8:	77 1f       	adc	r23, r23
     5fa:	17 fd       	sbrc	r17, 7
     5fc:	41 60       	ori	r20, 0x01	; 1
     5fe:	ee 0c       	add	r14, r14
     600:	ff 1c       	adc	r15, r15
     602:	00 1f       	adc	r16, r16
     604:	11 1f       	adc	r17, r17
     606:	21 50       	subi	r18, 0x01	; 1
     608:	30 40       	sbci	r19, 0x00	; 0
     60a:	40 30       	cpi	r20, 0x00	; 0
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	59 07       	cpc	r21, r25
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	69 07       	cpc	r22, r25
     614:	90 e4       	ldi	r25, 0x40	; 64
     616:	79 07       	cpc	r23, r25
     618:	60 f3       	brcs	.-40     	; 0x5f2 <__mulsf3+0x174>
     61a:	2b 8f       	std	Y+27, r18	; 0x1b
     61c:	3c 8f       	std	Y+28, r19	; 0x1c
     61e:	db 01       	movw	r26, r22
     620:	ca 01       	movw	r24, r20
     622:	8f 77       	andi	r24, 0x7F	; 127
     624:	90 70       	andi	r25, 0x00	; 0
     626:	a0 70       	andi	r26, 0x00	; 0
     628:	b0 70       	andi	r27, 0x00	; 0
     62a:	80 34       	cpi	r24, 0x40	; 64
     62c:	91 05       	cpc	r25, r1
     62e:	a1 05       	cpc	r26, r1
     630:	b1 05       	cpc	r27, r1
     632:	61 f4       	brne	.+24     	; 0x64c <__mulsf3+0x1ce>
     634:	47 fd       	sbrc	r20, 7
     636:	0a c0       	rjmp	.+20     	; 0x64c <__mulsf3+0x1ce>
     638:	e1 14       	cp	r14, r1
     63a:	f1 04       	cpc	r15, r1
     63c:	01 05       	cpc	r16, r1
     63e:	11 05       	cpc	r17, r1
     640:	29 f0       	breq	.+10     	; 0x64c <__mulsf3+0x1ce>
     642:	40 5c       	subi	r20, 0xC0	; 192
     644:	5f 4f       	sbci	r21, 0xFF	; 255
     646:	6f 4f       	sbci	r22, 0xFF	; 255
     648:	7f 4f       	sbci	r23, 0xFF	; 255
     64a:	40 78       	andi	r20, 0x80	; 128
     64c:	1a 8e       	std	Y+26, r1	; 0x1a
     64e:	fe 17       	cp	r31, r30
     650:	11 f0       	breq	.+4      	; 0x656 <__mulsf3+0x1d8>
     652:	81 e0       	ldi	r24, 0x01	; 1
     654:	8a 8f       	std	Y+26, r24	; 0x1a
     656:	4d 8f       	std	Y+29, r20	; 0x1d
     658:	5e 8f       	std	Y+30, r21	; 0x1e
     65a:	6f 8f       	std	Y+31, r22	; 0x1f
     65c:	78 a3       	std	Y+32, r23	; 0x20
     65e:	83 e0       	ldi	r24, 0x03	; 3
     660:	89 8f       	std	Y+25, r24	; 0x19
     662:	ce 01       	movw	r24, r28
     664:	49 96       	adiw	r24, 0x19	; 25
     666:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__pack_f>
     66a:	a0 96       	adiw	r28, 0x20	; 32
     66c:	e2 e1       	ldi	r30, 0x12	; 18
     66e:	0c 94 58 0e 	jmp	0x1cb0	; 0x1cb0 <__epilogue_restores__>

00000672 <__divsf3>:
     672:	a8 e1       	ldi	r26, 0x18	; 24
     674:	b0 e0       	ldi	r27, 0x00	; 0
     676:	ef e3       	ldi	r30, 0x3F	; 63
     678:	f3 e0       	ldi	r31, 0x03	; 3
     67a:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__prologue_saves__+0x10>
     67e:	69 83       	std	Y+1, r22	; 0x01
     680:	7a 83       	std	Y+2, r23	; 0x02
     682:	8b 83       	std	Y+3, r24	; 0x03
     684:	9c 83       	std	Y+4, r25	; 0x04
     686:	2d 83       	std	Y+5, r18	; 0x05
     688:	3e 83       	std	Y+6, r19	; 0x06
     68a:	4f 83       	std	Y+7, r20	; 0x07
     68c:	58 87       	std	Y+8, r21	; 0x08
     68e:	b9 e0       	ldi	r27, 0x09	; 9
     690:	eb 2e       	mov	r14, r27
     692:	f1 2c       	mov	r15, r1
     694:	ec 0e       	add	r14, r28
     696:	fd 1e       	adc	r15, r29
     698:	ce 01       	movw	r24, r28
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	b7 01       	movw	r22, r14
     69e:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     6a2:	8e 01       	movw	r16, r28
     6a4:	0f 5e       	subi	r16, 0xEF	; 239
     6a6:	1f 4f       	sbci	r17, 0xFF	; 255
     6a8:	ce 01       	movw	r24, r28
     6aa:	05 96       	adiw	r24, 0x05	; 5
     6ac:	b8 01       	movw	r22, r16
     6ae:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     6b2:	29 85       	ldd	r18, Y+9	; 0x09
     6b4:	22 30       	cpi	r18, 0x02	; 2
     6b6:	08 f4       	brcc	.+2      	; 0x6ba <__divsf3+0x48>
     6b8:	7e c0       	rjmp	.+252    	; 0x7b6 <__divsf3+0x144>
     6ba:	39 89       	ldd	r19, Y+17	; 0x11
     6bc:	32 30       	cpi	r19, 0x02	; 2
     6be:	10 f4       	brcc	.+4      	; 0x6c4 <__divsf3+0x52>
     6c0:	b8 01       	movw	r22, r16
     6c2:	7c c0       	rjmp	.+248    	; 0x7bc <__divsf3+0x14a>
     6c4:	8a 85       	ldd	r24, Y+10	; 0x0a
     6c6:	9a 89       	ldd	r25, Y+18	; 0x12
     6c8:	89 27       	eor	r24, r25
     6ca:	8a 87       	std	Y+10, r24	; 0x0a
     6cc:	24 30       	cpi	r18, 0x04	; 4
     6ce:	11 f0       	breq	.+4      	; 0x6d4 <__divsf3+0x62>
     6d0:	22 30       	cpi	r18, 0x02	; 2
     6d2:	31 f4       	brne	.+12     	; 0x6e0 <__divsf3+0x6e>
     6d4:	23 17       	cp	r18, r19
     6d6:	09 f0       	breq	.+2      	; 0x6da <__divsf3+0x68>
     6d8:	6e c0       	rjmp	.+220    	; 0x7b6 <__divsf3+0x144>
     6da:	64 e6       	ldi	r22, 0x64	; 100
     6dc:	71 e0       	ldi	r23, 0x01	; 1
     6de:	6e c0       	rjmp	.+220    	; 0x7bc <__divsf3+0x14a>
     6e0:	34 30       	cpi	r19, 0x04	; 4
     6e2:	39 f4       	brne	.+14     	; 0x6f2 <__divsf3+0x80>
     6e4:	1d 86       	std	Y+13, r1	; 0x0d
     6e6:	1e 86       	std	Y+14, r1	; 0x0e
     6e8:	1f 86       	std	Y+15, r1	; 0x0f
     6ea:	18 8a       	std	Y+16, r1	; 0x10
     6ec:	1c 86       	std	Y+12, r1	; 0x0c
     6ee:	1b 86       	std	Y+11, r1	; 0x0b
     6f0:	04 c0       	rjmp	.+8      	; 0x6fa <__divsf3+0x88>
     6f2:	32 30       	cpi	r19, 0x02	; 2
     6f4:	21 f4       	brne	.+8      	; 0x6fe <__divsf3+0x8c>
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	89 87       	std	Y+9, r24	; 0x09
     6fa:	b7 01       	movw	r22, r14
     6fc:	5f c0       	rjmp	.+190    	; 0x7bc <__divsf3+0x14a>
     6fe:	2b 85       	ldd	r18, Y+11	; 0x0b
     700:	3c 85       	ldd	r19, Y+12	; 0x0c
     702:	8b 89       	ldd	r24, Y+19	; 0x13
     704:	9c 89       	ldd	r25, Y+20	; 0x14
     706:	28 1b       	sub	r18, r24
     708:	39 0b       	sbc	r19, r25
     70a:	3c 87       	std	Y+12, r19	; 0x0c
     70c:	2b 87       	std	Y+11, r18	; 0x0b
     70e:	ed 84       	ldd	r14, Y+13	; 0x0d
     710:	fe 84       	ldd	r15, Y+14	; 0x0e
     712:	0f 85       	ldd	r16, Y+15	; 0x0f
     714:	18 89       	ldd	r17, Y+16	; 0x10
     716:	ad 88       	ldd	r10, Y+21	; 0x15
     718:	be 88       	ldd	r11, Y+22	; 0x16
     71a:	cf 88       	ldd	r12, Y+23	; 0x17
     71c:	d8 8c       	ldd	r13, Y+24	; 0x18
     71e:	ea 14       	cp	r14, r10
     720:	fb 04       	cpc	r15, r11
     722:	0c 05       	cpc	r16, r12
     724:	1d 05       	cpc	r17, r13
     726:	40 f4       	brcc	.+16     	; 0x738 <__divsf3+0xc6>
     728:	ee 0c       	add	r14, r14
     72a:	ff 1c       	adc	r15, r15
     72c:	00 1f       	adc	r16, r16
     72e:	11 1f       	adc	r17, r17
     730:	21 50       	subi	r18, 0x01	; 1
     732:	30 40       	sbci	r19, 0x00	; 0
     734:	3c 87       	std	Y+12, r19	; 0x0c
     736:	2b 87       	std	Y+11, r18	; 0x0b
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	40 e0       	ldi	r20, 0x00	; 0
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	80 e0       	ldi	r24, 0x00	; 0
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	a0 e0       	ldi	r26, 0x00	; 0
     746:	b0 e4       	ldi	r27, 0x40	; 64
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	ea 14       	cp	r14, r10
     74e:	fb 04       	cpc	r15, r11
     750:	0c 05       	cpc	r16, r12
     752:	1d 05       	cpc	r17, r13
     754:	40 f0       	brcs	.+16     	; 0x766 <__divsf3+0xf4>
     756:	28 2b       	or	r18, r24
     758:	39 2b       	or	r19, r25
     75a:	4a 2b       	or	r20, r26
     75c:	5b 2b       	or	r21, r27
     75e:	ea 18       	sub	r14, r10
     760:	fb 08       	sbc	r15, r11
     762:	0c 09       	sbc	r16, r12
     764:	1d 09       	sbc	r17, r13
     766:	b6 95       	lsr	r27
     768:	a7 95       	ror	r26
     76a:	97 95       	ror	r25
     76c:	87 95       	ror	r24
     76e:	ee 0c       	add	r14, r14
     770:	ff 1c       	adc	r15, r15
     772:	00 1f       	adc	r16, r16
     774:	11 1f       	adc	r17, r17
     776:	6f 5f       	subi	r22, 0xFF	; 255
     778:	7f 4f       	sbci	r23, 0xFF	; 255
     77a:	6f 31       	cpi	r22, 0x1F	; 31
     77c:	71 05       	cpc	r23, r1
     77e:	31 f7       	brne	.-52     	; 0x74c <__divsf3+0xda>
     780:	da 01       	movw	r26, r20
     782:	c9 01       	movw	r24, r18
     784:	8f 77       	andi	r24, 0x7F	; 127
     786:	90 70       	andi	r25, 0x00	; 0
     788:	a0 70       	andi	r26, 0x00	; 0
     78a:	b0 70       	andi	r27, 0x00	; 0
     78c:	80 34       	cpi	r24, 0x40	; 64
     78e:	91 05       	cpc	r25, r1
     790:	a1 05       	cpc	r26, r1
     792:	b1 05       	cpc	r27, r1
     794:	61 f4       	brne	.+24     	; 0x7ae <__divsf3+0x13c>
     796:	27 fd       	sbrc	r18, 7
     798:	0a c0       	rjmp	.+20     	; 0x7ae <__divsf3+0x13c>
     79a:	e1 14       	cp	r14, r1
     79c:	f1 04       	cpc	r15, r1
     79e:	01 05       	cpc	r16, r1
     7a0:	11 05       	cpc	r17, r1
     7a2:	29 f0       	breq	.+10     	; 0x7ae <__divsf3+0x13c>
     7a4:	20 5c       	subi	r18, 0xC0	; 192
     7a6:	3f 4f       	sbci	r19, 0xFF	; 255
     7a8:	4f 4f       	sbci	r20, 0xFF	; 255
     7aa:	5f 4f       	sbci	r21, 0xFF	; 255
     7ac:	20 78       	andi	r18, 0x80	; 128
     7ae:	2d 87       	std	Y+13, r18	; 0x0d
     7b0:	3e 87       	std	Y+14, r19	; 0x0e
     7b2:	4f 87       	std	Y+15, r20	; 0x0f
     7b4:	58 8b       	std	Y+16, r21	; 0x10
     7b6:	be 01       	movw	r22, r28
     7b8:	67 5f       	subi	r22, 0xF7	; 247
     7ba:	7f 4f       	sbci	r23, 0xFF	; 255
     7bc:	cb 01       	movw	r24, r22
     7be:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__pack_f>
     7c2:	68 96       	adiw	r28, 0x18	; 24
     7c4:	ea e0       	ldi	r30, 0x0A	; 10
     7c6:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__epilogue_restores__+0x10>

000007ca <__gesf2>:
     7ca:	a8 e1       	ldi	r26, 0x18	; 24
     7cc:	b0 e0       	ldi	r27, 0x00	; 0
     7ce:	eb ee       	ldi	r30, 0xEB	; 235
     7d0:	f3 e0       	ldi	r31, 0x03	; 3
     7d2:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__prologue_saves__+0x18>
     7d6:	69 83       	std	Y+1, r22	; 0x01
     7d8:	7a 83       	std	Y+2, r23	; 0x02
     7da:	8b 83       	std	Y+3, r24	; 0x03
     7dc:	9c 83       	std	Y+4, r25	; 0x04
     7de:	2d 83       	std	Y+5, r18	; 0x05
     7e0:	3e 83       	std	Y+6, r19	; 0x06
     7e2:	4f 83       	std	Y+7, r20	; 0x07
     7e4:	58 87       	std	Y+8, r21	; 0x08
     7e6:	89 e0       	ldi	r24, 0x09	; 9
     7e8:	e8 2e       	mov	r14, r24
     7ea:	f1 2c       	mov	r15, r1
     7ec:	ec 0e       	add	r14, r28
     7ee:	fd 1e       	adc	r15, r29
     7f0:	ce 01       	movw	r24, r28
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	b7 01       	movw	r22, r14
     7f6:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     7fa:	8e 01       	movw	r16, r28
     7fc:	0f 5e       	subi	r16, 0xEF	; 239
     7fe:	1f 4f       	sbci	r17, 0xFF	; 255
     800:	ce 01       	movw	r24, r28
     802:	05 96       	adiw	r24, 0x05	; 5
     804:	b8 01       	movw	r22, r16
     806:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     80a:	89 85       	ldd	r24, Y+9	; 0x09
     80c:	82 30       	cpi	r24, 0x02	; 2
     80e:	40 f0       	brcs	.+16     	; 0x820 <__gesf2+0x56>
     810:	89 89       	ldd	r24, Y+17	; 0x11
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	28 f0       	brcs	.+10     	; 0x820 <__gesf2+0x56>
     816:	c7 01       	movw	r24, r14
     818:	b8 01       	movw	r22, r16
     81a:	0e 94 0c 07 	call	0xe18	; 0xe18 <__fpcmp_parts_f>
     81e:	01 c0       	rjmp	.+2      	; 0x822 <__gesf2+0x58>
     820:	8f ef       	ldi	r24, 0xFF	; 255
     822:	68 96       	adiw	r28, 0x18	; 24
     824:	e6 e0       	ldi	r30, 0x06	; 6
     826:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__epilogue_restores__+0x18>

0000082a <__ltsf2>:
     82a:	a8 e1       	ldi	r26, 0x18	; 24
     82c:	b0 e0       	ldi	r27, 0x00	; 0
     82e:	eb e1       	ldi	r30, 0x1B	; 27
     830:	f4 e0       	ldi	r31, 0x04	; 4
     832:	0c 94 48 0e 	jmp	0x1c90	; 0x1c90 <__prologue_saves__+0x18>
     836:	69 83       	std	Y+1, r22	; 0x01
     838:	7a 83       	std	Y+2, r23	; 0x02
     83a:	8b 83       	std	Y+3, r24	; 0x03
     83c:	9c 83       	std	Y+4, r25	; 0x04
     83e:	2d 83       	std	Y+5, r18	; 0x05
     840:	3e 83       	std	Y+6, r19	; 0x06
     842:	4f 83       	std	Y+7, r20	; 0x07
     844:	58 87       	std	Y+8, r21	; 0x08
     846:	89 e0       	ldi	r24, 0x09	; 9
     848:	e8 2e       	mov	r14, r24
     84a:	f1 2c       	mov	r15, r1
     84c:	ec 0e       	add	r14, r28
     84e:	fd 1e       	adc	r15, r29
     850:	ce 01       	movw	r24, r28
     852:	01 96       	adiw	r24, 0x01	; 1
     854:	b7 01       	movw	r22, r14
     856:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     85a:	8e 01       	movw	r16, r28
     85c:	0f 5e       	subi	r16, 0xEF	; 239
     85e:	1f 4f       	sbci	r17, 0xFF	; 255
     860:	ce 01       	movw	r24, r28
     862:	05 96       	adiw	r24, 0x05	; 5
     864:	b8 01       	movw	r22, r16
     866:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     86a:	89 85       	ldd	r24, Y+9	; 0x09
     86c:	82 30       	cpi	r24, 0x02	; 2
     86e:	40 f0       	brcs	.+16     	; 0x880 <__ltsf2+0x56>
     870:	89 89       	ldd	r24, Y+17	; 0x11
     872:	82 30       	cpi	r24, 0x02	; 2
     874:	28 f0       	brcs	.+10     	; 0x880 <__ltsf2+0x56>
     876:	c7 01       	movw	r24, r14
     878:	b8 01       	movw	r22, r16
     87a:	0e 94 0c 07 	call	0xe18	; 0xe18 <__fpcmp_parts_f>
     87e:	01 c0       	rjmp	.+2      	; 0x882 <__ltsf2+0x58>
     880:	81 e0       	ldi	r24, 0x01	; 1
     882:	68 96       	adiw	r28, 0x18	; 24
     884:	e6 e0       	ldi	r30, 0x06	; 6
     886:	0c 94 64 0e 	jmp	0x1cc8	; 0x1cc8 <__epilogue_restores__+0x18>

0000088a <__floatsisf>:
     88a:	a8 e0       	ldi	r26, 0x08	; 8
     88c:	b0 e0       	ldi	r27, 0x00	; 0
     88e:	eb e4       	ldi	r30, 0x4B	; 75
     890:	f4 e0       	ldi	r31, 0x04	; 4
     892:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <__prologue_saves__+0x12>
     896:	9b 01       	movw	r18, r22
     898:	ac 01       	movw	r20, r24
     89a:	83 e0       	ldi	r24, 0x03	; 3
     89c:	89 83       	std	Y+1, r24	; 0x01
     89e:	da 01       	movw	r26, r20
     8a0:	c9 01       	movw	r24, r18
     8a2:	88 27       	eor	r24, r24
     8a4:	b7 fd       	sbrc	r27, 7
     8a6:	83 95       	inc	r24
     8a8:	99 27       	eor	r25, r25
     8aa:	aa 27       	eor	r26, r26
     8ac:	bb 27       	eor	r27, r27
     8ae:	b8 2e       	mov	r11, r24
     8b0:	21 15       	cp	r18, r1
     8b2:	31 05       	cpc	r19, r1
     8b4:	41 05       	cpc	r20, r1
     8b6:	51 05       	cpc	r21, r1
     8b8:	19 f4       	brne	.+6      	; 0x8c0 <__floatsisf+0x36>
     8ba:	82 e0       	ldi	r24, 0x02	; 2
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	3a c0       	rjmp	.+116    	; 0x934 <__floatsisf+0xaa>
     8c0:	88 23       	and	r24, r24
     8c2:	a9 f0       	breq	.+42     	; 0x8ee <__floatsisf+0x64>
     8c4:	20 30       	cpi	r18, 0x00	; 0
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	38 07       	cpc	r19, r24
     8ca:	80 e0       	ldi	r24, 0x00	; 0
     8cc:	48 07       	cpc	r20, r24
     8ce:	80 e8       	ldi	r24, 0x80	; 128
     8d0:	58 07       	cpc	r21, r24
     8d2:	29 f4       	brne	.+10     	; 0x8de <__floatsisf+0x54>
     8d4:	60 e0       	ldi	r22, 0x00	; 0
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	80 e0       	ldi	r24, 0x00	; 0
     8da:	9f ec       	ldi	r25, 0xCF	; 207
     8dc:	30 c0       	rjmp	.+96     	; 0x93e <__floatsisf+0xb4>
     8de:	ee 24       	eor	r14, r14
     8e0:	ff 24       	eor	r15, r15
     8e2:	87 01       	movw	r16, r14
     8e4:	e2 1a       	sub	r14, r18
     8e6:	f3 0a       	sbc	r15, r19
     8e8:	04 0b       	sbc	r16, r20
     8ea:	15 0b       	sbc	r17, r21
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__floatsisf+0x68>
     8ee:	79 01       	movw	r14, r18
     8f0:	8a 01       	movw	r16, r20
     8f2:	8e e1       	ldi	r24, 0x1E	; 30
     8f4:	c8 2e       	mov	r12, r24
     8f6:	d1 2c       	mov	r13, r1
     8f8:	dc 82       	std	Y+4, r13	; 0x04
     8fa:	cb 82       	std	Y+3, r12	; 0x03
     8fc:	ed 82       	std	Y+5, r14	; 0x05
     8fe:	fe 82       	std	Y+6, r15	; 0x06
     900:	0f 83       	std	Y+7, r16	; 0x07
     902:	18 87       	std	Y+8, r17	; 0x08
     904:	c8 01       	movw	r24, r16
     906:	b7 01       	movw	r22, r14
     908:	0e 94 70 05 	call	0xae0	; 0xae0 <__clzsi2>
     90c:	01 97       	sbiw	r24, 0x01	; 1
     90e:	18 16       	cp	r1, r24
     910:	19 06       	cpc	r1, r25
     912:	84 f4       	brge	.+32     	; 0x934 <__floatsisf+0xaa>
     914:	08 2e       	mov	r0, r24
     916:	04 c0       	rjmp	.+8      	; 0x920 <__floatsisf+0x96>
     918:	ee 0c       	add	r14, r14
     91a:	ff 1c       	adc	r15, r15
     91c:	00 1f       	adc	r16, r16
     91e:	11 1f       	adc	r17, r17
     920:	0a 94       	dec	r0
     922:	d2 f7       	brpl	.-12     	; 0x918 <__floatsisf+0x8e>
     924:	ed 82       	std	Y+5, r14	; 0x05
     926:	fe 82       	std	Y+6, r15	; 0x06
     928:	0f 83       	std	Y+7, r16	; 0x07
     92a:	18 87       	std	Y+8, r17	; 0x08
     92c:	c8 1a       	sub	r12, r24
     92e:	d9 0a       	sbc	r13, r25
     930:	dc 82       	std	Y+4, r13	; 0x04
     932:	cb 82       	std	Y+3, r12	; 0x03
     934:	ba 82       	std	Y+2, r11	; 0x02
     936:	ce 01       	movw	r24, r28
     938:	01 96       	adiw	r24, 0x01	; 1
     93a:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__pack_f>
     93e:	28 96       	adiw	r28, 0x08	; 8
     940:	e9 e0       	ldi	r30, 0x09	; 9
     942:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <__epilogue_restores__+0x12>

00000946 <__fixsfsi>:
     946:	ac e0       	ldi	r26, 0x0C	; 12
     948:	b0 e0       	ldi	r27, 0x00	; 0
     94a:	e9 ea       	ldi	r30, 0xA9	; 169
     94c:	f4 e0       	ldi	r31, 0x04	; 4
     94e:	0c 94 4c 0e 	jmp	0x1c98	; 0x1c98 <__prologue_saves__+0x20>
     952:	69 83       	std	Y+1, r22	; 0x01
     954:	7a 83       	std	Y+2, r23	; 0x02
     956:	8b 83       	std	Y+3, r24	; 0x03
     958:	9c 83       	std	Y+4, r25	; 0x04
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	be 01       	movw	r22, r28
     960:	6b 5f       	subi	r22, 0xFB	; 251
     962:	7f 4f       	sbci	r23, 0xFF	; 255
     964:	0e 94 94 06 	call	0xd28	; 0xd28 <__unpack_f>
     968:	8d 81       	ldd	r24, Y+5	; 0x05
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	61 f1       	breq	.+88     	; 0x9c6 <__fixsfsi+0x80>
     96e:	82 30       	cpi	r24, 0x02	; 2
     970:	50 f1       	brcs	.+84     	; 0x9c6 <__fixsfsi+0x80>
     972:	84 30       	cpi	r24, 0x04	; 4
     974:	21 f4       	brne	.+8      	; 0x97e <__fixsfsi+0x38>
     976:	8e 81       	ldd	r24, Y+6	; 0x06
     978:	88 23       	and	r24, r24
     97a:	51 f1       	breq	.+84     	; 0x9d0 <__fixsfsi+0x8a>
     97c:	2e c0       	rjmp	.+92     	; 0x9da <__fixsfsi+0x94>
     97e:	2f 81       	ldd	r18, Y+7	; 0x07
     980:	38 85       	ldd	r19, Y+8	; 0x08
     982:	37 fd       	sbrc	r19, 7
     984:	20 c0       	rjmp	.+64     	; 0x9c6 <__fixsfsi+0x80>
     986:	6e 81       	ldd	r22, Y+6	; 0x06
     988:	2f 31       	cpi	r18, 0x1F	; 31
     98a:	31 05       	cpc	r19, r1
     98c:	1c f0       	brlt	.+6      	; 0x994 <__fixsfsi+0x4e>
     98e:	66 23       	and	r22, r22
     990:	f9 f0       	breq	.+62     	; 0x9d0 <__fixsfsi+0x8a>
     992:	23 c0       	rjmp	.+70     	; 0x9da <__fixsfsi+0x94>
     994:	8e e1       	ldi	r24, 0x1E	; 30
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	82 1b       	sub	r24, r18
     99a:	93 0b       	sbc	r25, r19
     99c:	29 85       	ldd	r18, Y+9	; 0x09
     99e:	3a 85       	ldd	r19, Y+10	; 0x0a
     9a0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9a2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9a4:	04 c0       	rjmp	.+8      	; 0x9ae <__fixsfsi+0x68>
     9a6:	56 95       	lsr	r21
     9a8:	47 95       	ror	r20
     9aa:	37 95       	ror	r19
     9ac:	27 95       	ror	r18
     9ae:	8a 95       	dec	r24
     9b0:	d2 f7       	brpl	.-12     	; 0x9a6 <__fixsfsi+0x60>
     9b2:	66 23       	and	r22, r22
     9b4:	b1 f0       	breq	.+44     	; 0x9e2 <__fixsfsi+0x9c>
     9b6:	50 95       	com	r21
     9b8:	40 95       	com	r20
     9ba:	30 95       	com	r19
     9bc:	21 95       	neg	r18
     9be:	3f 4f       	sbci	r19, 0xFF	; 255
     9c0:	4f 4f       	sbci	r20, 0xFF	; 255
     9c2:	5f 4f       	sbci	r21, 0xFF	; 255
     9c4:	0e c0       	rjmp	.+28     	; 0x9e2 <__fixsfsi+0x9c>
     9c6:	20 e0       	ldi	r18, 0x00	; 0
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	40 e0       	ldi	r20, 0x00	; 0
     9cc:	50 e0       	ldi	r21, 0x00	; 0
     9ce:	09 c0       	rjmp	.+18     	; 0x9e2 <__fixsfsi+0x9c>
     9d0:	2f ef       	ldi	r18, 0xFF	; 255
     9d2:	3f ef       	ldi	r19, 0xFF	; 255
     9d4:	4f ef       	ldi	r20, 0xFF	; 255
     9d6:	5f e7       	ldi	r21, 0x7F	; 127
     9d8:	04 c0       	rjmp	.+8      	; 0x9e2 <__fixsfsi+0x9c>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	40 e0       	ldi	r20, 0x00	; 0
     9e0:	50 e8       	ldi	r21, 0x80	; 128
     9e2:	b9 01       	movw	r22, r18
     9e4:	ca 01       	movw	r24, r20
     9e6:	2c 96       	adiw	r28, 0x0c	; 12
     9e8:	e2 e0       	ldi	r30, 0x02	; 2
     9ea:	0c 94 68 0e 	jmp	0x1cd0	; 0x1cd0 <__epilogue_restores__+0x20>

000009ee <__floatunsisf>:
     9ee:	a8 e0       	ldi	r26, 0x08	; 8
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	ed ef       	ldi	r30, 0xFD	; 253
     9f4:	f4 e0       	ldi	r31, 0x04	; 4
     9f6:	0c 94 44 0e 	jmp	0x1c88	; 0x1c88 <__prologue_saves__+0x10>
     9fa:	7b 01       	movw	r14, r22
     9fc:	8c 01       	movw	r16, r24
     9fe:	61 15       	cp	r22, r1
     a00:	71 05       	cpc	r23, r1
     a02:	81 05       	cpc	r24, r1
     a04:	91 05       	cpc	r25, r1
     a06:	19 f4       	brne	.+6      	; 0xa0e <__floatunsisf+0x20>
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	89 83       	std	Y+1, r24	; 0x01
     a0c:	60 c0       	rjmp	.+192    	; 0xace <__floatunsisf+0xe0>
     a0e:	83 e0       	ldi	r24, 0x03	; 3
     a10:	89 83       	std	Y+1, r24	; 0x01
     a12:	8e e1       	ldi	r24, 0x1E	; 30
     a14:	c8 2e       	mov	r12, r24
     a16:	d1 2c       	mov	r13, r1
     a18:	dc 82       	std	Y+4, r13	; 0x04
     a1a:	cb 82       	std	Y+3, r12	; 0x03
     a1c:	ed 82       	std	Y+5, r14	; 0x05
     a1e:	fe 82       	std	Y+6, r15	; 0x06
     a20:	0f 83       	std	Y+7, r16	; 0x07
     a22:	18 87       	std	Y+8, r17	; 0x08
     a24:	c8 01       	movw	r24, r16
     a26:	b7 01       	movw	r22, r14
     a28:	0e 94 70 05 	call	0xae0	; 0xae0 <__clzsi2>
     a2c:	fc 01       	movw	r30, r24
     a2e:	31 97       	sbiw	r30, 0x01	; 1
     a30:	f7 ff       	sbrs	r31, 7
     a32:	3b c0       	rjmp	.+118    	; 0xaaa <__floatunsisf+0xbc>
     a34:	22 27       	eor	r18, r18
     a36:	33 27       	eor	r19, r19
     a38:	2e 1b       	sub	r18, r30
     a3a:	3f 0b       	sbc	r19, r31
     a3c:	57 01       	movw	r10, r14
     a3e:	68 01       	movw	r12, r16
     a40:	02 2e       	mov	r0, r18
     a42:	04 c0       	rjmp	.+8      	; 0xa4c <__floatunsisf+0x5e>
     a44:	d6 94       	lsr	r13
     a46:	c7 94       	ror	r12
     a48:	b7 94       	ror	r11
     a4a:	a7 94       	ror	r10
     a4c:	0a 94       	dec	r0
     a4e:	d2 f7       	brpl	.-12     	; 0xa44 <__floatunsisf+0x56>
     a50:	40 e0       	ldi	r20, 0x00	; 0
     a52:	50 e0       	ldi	r21, 0x00	; 0
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	70 e0       	ldi	r23, 0x00	; 0
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	a0 e0       	ldi	r26, 0x00	; 0
     a5e:	b0 e0       	ldi	r27, 0x00	; 0
     a60:	04 c0       	rjmp	.+8      	; 0xa6a <__floatunsisf+0x7c>
     a62:	88 0f       	add	r24, r24
     a64:	99 1f       	adc	r25, r25
     a66:	aa 1f       	adc	r26, r26
     a68:	bb 1f       	adc	r27, r27
     a6a:	2a 95       	dec	r18
     a6c:	d2 f7       	brpl	.-12     	; 0xa62 <__floatunsisf+0x74>
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	a1 09       	sbc	r26, r1
     a72:	b1 09       	sbc	r27, r1
     a74:	8e 21       	and	r24, r14
     a76:	9f 21       	and	r25, r15
     a78:	a0 23       	and	r26, r16
     a7a:	b1 23       	and	r27, r17
     a7c:	00 97       	sbiw	r24, 0x00	; 0
     a7e:	a1 05       	cpc	r26, r1
     a80:	b1 05       	cpc	r27, r1
     a82:	21 f0       	breq	.+8      	; 0xa8c <__floatunsisf+0x9e>
     a84:	41 e0       	ldi	r20, 0x01	; 1
     a86:	50 e0       	ldi	r21, 0x00	; 0
     a88:	60 e0       	ldi	r22, 0x00	; 0
     a8a:	70 e0       	ldi	r23, 0x00	; 0
     a8c:	4a 29       	or	r20, r10
     a8e:	5b 29       	or	r21, r11
     a90:	6c 29       	or	r22, r12
     a92:	7d 29       	or	r23, r13
     a94:	4d 83       	std	Y+5, r20	; 0x05
     a96:	5e 83       	std	Y+6, r21	; 0x06
     a98:	6f 83       	std	Y+7, r22	; 0x07
     a9a:	78 87       	std	Y+8, r23	; 0x08
     a9c:	8e e1       	ldi	r24, 0x1E	; 30
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	8e 1b       	sub	r24, r30
     aa2:	9f 0b       	sbc	r25, r31
     aa4:	9c 83       	std	Y+4, r25	; 0x04
     aa6:	8b 83       	std	Y+3, r24	; 0x03
     aa8:	12 c0       	rjmp	.+36     	; 0xace <__floatunsisf+0xe0>
     aaa:	30 97       	sbiw	r30, 0x00	; 0
     aac:	81 f0       	breq	.+32     	; 0xace <__floatunsisf+0xe0>
     aae:	0e 2e       	mov	r0, r30
     ab0:	04 c0       	rjmp	.+8      	; 0xaba <__floatunsisf+0xcc>
     ab2:	ee 0c       	add	r14, r14
     ab4:	ff 1c       	adc	r15, r15
     ab6:	00 1f       	adc	r16, r16
     ab8:	11 1f       	adc	r17, r17
     aba:	0a 94       	dec	r0
     abc:	d2 f7       	brpl	.-12     	; 0xab2 <__floatunsisf+0xc4>
     abe:	ed 82       	std	Y+5, r14	; 0x05
     ac0:	fe 82       	std	Y+6, r15	; 0x06
     ac2:	0f 83       	std	Y+7, r16	; 0x07
     ac4:	18 87       	std	Y+8, r17	; 0x08
     ac6:	ce 1a       	sub	r12, r30
     ac8:	df 0a       	sbc	r13, r31
     aca:	dc 82       	std	Y+4, r13	; 0x04
     acc:	cb 82       	std	Y+3, r12	; 0x03
     ace:	1a 82       	std	Y+2, r1	; 0x02
     ad0:	ce 01       	movw	r24, r28
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	0e 94 bf 05 	call	0xb7e	; 0xb7e <__pack_f>
     ad8:	28 96       	adiw	r28, 0x08	; 8
     ada:	ea e0       	ldi	r30, 0x0A	; 10
     adc:	0c 94 60 0e 	jmp	0x1cc0	; 0x1cc0 <__epilogue_restores__+0x10>

00000ae0 <__clzsi2>:
     ae0:	ef 92       	push	r14
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	7b 01       	movw	r14, r22
     aea:	8c 01       	movw	r16, r24
     aec:	80 e0       	ldi	r24, 0x00	; 0
     aee:	e8 16       	cp	r14, r24
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	f8 06       	cpc	r15, r24
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	08 07       	cpc	r16, r24
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	18 07       	cpc	r17, r24
     afc:	88 f4       	brcc	.+34     	; 0xb20 <__clzsi2+0x40>
     afe:	8f ef       	ldi	r24, 0xFF	; 255
     b00:	e8 16       	cp	r14, r24
     b02:	f1 04       	cpc	r15, r1
     b04:	01 05       	cpc	r16, r1
     b06:	11 05       	cpc	r17, r1
     b08:	31 f0       	breq	.+12     	; 0xb16 <__clzsi2+0x36>
     b0a:	28 f0       	brcs	.+10     	; 0xb16 <__clzsi2+0x36>
     b0c:	88 e0       	ldi	r24, 0x08	; 8
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	a0 e0       	ldi	r26, 0x00	; 0
     b12:	b0 e0       	ldi	r27, 0x00	; 0
     b14:	17 c0       	rjmp	.+46     	; 0xb44 <__clzsi2+0x64>
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	a0 e0       	ldi	r26, 0x00	; 0
     b1c:	b0 e0       	ldi	r27, 0x00	; 0
     b1e:	12 c0       	rjmp	.+36     	; 0xb44 <__clzsi2+0x64>
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	e8 16       	cp	r14, r24
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	f8 06       	cpc	r15, r24
     b28:	80 e0       	ldi	r24, 0x00	; 0
     b2a:	08 07       	cpc	r16, r24
     b2c:	81 e0       	ldi	r24, 0x01	; 1
     b2e:	18 07       	cpc	r17, r24
     b30:	28 f0       	brcs	.+10     	; 0xb3c <__clzsi2+0x5c>
     b32:	88 e1       	ldi	r24, 0x18	; 24
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	a0 e0       	ldi	r26, 0x00	; 0
     b38:	b0 e0       	ldi	r27, 0x00	; 0
     b3a:	04 c0       	rjmp	.+8      	; 0xb44 <__clzsi2+0x64>
     b3c:	80 e1       	ldi	r24, 0x10	; 16
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	a0 e0       	ldi	r26, 0x00	; 0
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	20 e2       	ldi	r18, 0x20	; 32
     b46:	30 e0       	ldi	r19, 0x00	; 0
     b48:	40 e0       	ldi	r20, 0x00	; 0
     b4a:	50 e0       	ldi	r21, 0x00	; 0
     b4c:	28 1b       	sub	r18, r24
     b4e:	39 0b       	sbc	r19, r25
     b50:	4a 0b       	sbc	r20, r26
     b52:	5b 0b       	sbc	r21, r27
     b54:	04 c0       	rjmp	.+8      	; 0xb5e <__clzsi2+0x7e>
     b56:	16 95       	lsr	r17
     b58:	07 95       	ror	r16
     b5a:	f7 94       	ror	r15
     b5c:	e7 94       	ror	r14
     b5e:	8a 95       	dec	r24
     b60:	d2 f7       	brpl	.-12     	; 0xb56 <__clzsi2+0x76>
     b62:	f7 01       	movw	r30, r14
     b64:	e4 59       	subi	r30, 0x94	; 148
     b66:	fe 4f       	sbci	r31, 0xFE	; 254
     b68:	80 81       	ld	r24, Z
     b6a:	28 1b       	sub	r18, r24
     b6c:	31 09       	sbc	r19, r1
     b6e:	41 09       	sbc	r20, r1
     b70:	51 09       	sbc	r21, r1
     b72:	c9 01       	movw	r24, r18
     b74:	1f 91       	pop	r17
     b76:	0f 91       	pop	r16
     b78:	ff 90       	pop	r15
     b7a:	ef 90       	pop	r14
     b7c:	08 95       	ret

00000b7e <__pack_f>:
     b7e:	df 92       	push	r13
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	0f 93       	push	r16
     b86:	1f 93       	push	r17
     b88:	fc 01       	movw	r30, r24
     b8a:	e4 80       	ldd	r14, Z+4	; 0x04
     b8c:	f5 80       	ldd	r15, Z+5	; 0x05
     b8e:	06 81       	ldd	r16, Z+6	; 0x06
     b90:	17 81       	ldd	r17, Z+7	; 0x07
     b92:	d1 80       	ldd	r13, Z+1	; 0x01
     b94:	80 81       	ld	r24, Z
     b96:	82 30       	cpi	r24, 0x02	; 2
     b98:	48 f4       	brcc	.+18     	; 0xbac <__pack_f+0x2e>
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e1       	ldi	r26, 0x10	; 16
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e8 2a       	or	r14, r24
     ba4:	f9 2a       	or	r15, r25
     ba6:	0a 2b       	or	r16, r26
     ba8:	1b 2b       	or	r17, r27
     baa:	a5 c0       	rjmp	.+330    	; 0xcf6 <__pack_f+0x178>
     bac:	84 30       	cpi	r24, 0x04	; 4
     bae:	09 f4       	brne	.+2      	; 0xbb2 <__pack_f+0x34>
     bb0:	9f c0       	rjmp	.+318    	; 0xcf0 <__pack_f+0x172>
     bb2:	82 30       	cpi	r24, 0x02	; 2
     bb4:	21 f4       	brne	.+8      	; 0xbbe <__pack_f+0x40>
     bb6:	ee 24       	eor	r14, r14
     bb8:	ff 24       	eor	r15, r15
     bba:	87 01       	movw	r16, r14
     bbc:	05 c0       	rjmp	.+10     	; 0xbc8 <__pack_f+0x4a>
     bbe:	e1 14       	cp	r14, r1
     bc0:	f1 04       	cpc	r15, r1
     bc2:	01 05       	cpc	r16, r1
     bc4:	11 05       	cpc	r17, r1
     bc6:	19 f4       	brne	.+6      	; 0xbce <__pack_f+0x50>
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	96 c0       	rjmp	.+300    	; 0xcfa <__pack_f+0x17c>
     bce:	62 81       	ldd	r22, Z+2	; 0x02
     bd0:	73 81       	ldd	r23, Z+3	; 0x03
     bd2:	9f ef       	ldi	r25, 0xFF	; 255
     bd4:	62 38       	cpi	r22, 0x82	; 130
     bd6:	79 07       	cpc	r23, r25
     bd8:	0c f0       	brlt	.+2      	; 0xbdc <__pack_f+0x5e>
     bda:	5b c0       	rjmp	.+182    	; 0xc92 <__pack_f+0x114>
     bdc:	22 e8       	ldi	r18, 0x82	; 130
     bde:	3f ef       	ldi	r19, 0xFF	; 255
     be0:	26 1b       	sub	r18, r22
     be2:	37 0b       	sbc	r19, r23
     be4:	2a 31       	cpi	r18, 0x1A	; 26
     be6:	31 05       	cpc	r19, r1
     be8:	2c f0       	brlt	.+10     	; 0xbf4 <__pack_f+0x76>
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	50 e0       	ldi	r21, 0x00	; 0
     bf2:	2a c0       	rjmp	.+84     	; 0xc48 <__pack_f+0xca>
     bf4:	b8 01       	movw	r22, r16
     bf6:	a7 01       	movw	r20, r14
     bf8:	02 2e       	mov	r0, r18
     bfa:	04 c0       	rjmp	.+8      	; 0xc04 <__pack_f+0x86>
     bfc:	76 95       	lsr	r23
     bfe:	67 95       	ror	r22
     c00:	57 95       	ror	r21
     c02:	47 95       	ror	r20
     c04:	0a 94       	dec	r0
     c06:	d2 f7       	brpl	.-12     	; 0xbfc <__pack_f+0x7e>
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	a0 e0       	ldi	r26, 0x00	; 0
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	04 c0       	rjmp	.+8      	; 0xc1a <__pack_f+0x9c>
     c12:	88 0f       	add	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	aa 1f       	adc	r26, r26
     c18:	bb 1f       	adc	r27, r27
     c1a:	2a 95       	dec	r18
     c1c:	d2 f7       	brpl	.-12     	; 0xc12 <__pack_f+0x94>
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	a1 09       	sbc	r26, r1
     c22:	b1 09       	sbc	r27, r1
     c24:	8e 21       	and	r24, r14
     c26:	9f 21       	and	r25, r15
     c28:	a0 23       	and	r26, r16
     c2a:	b1 23       	and	r27, r17
     c2c:	00 97       	sbiw	r24, 0x00	; 0
     c2e:	a1 05       	cpc	r26, r1
     c30:	b1 05       	cpc	r27, r1
     c32:	21 f0       	breq	.+8      	; 0xc3c <__pack_f+0xbe>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	a0 e0       	ldi	r26, 0x00	; 0
     c3a:	b0 e0       	ldi	r27, 0x00	; 0
     c3c:	9a 01       	movw	r18, r20
     c3e:	ab 01       	movw	r20, r22
     c40:	28 2b       	or	r18, r24
     c42:	39 2b       	or	r19, r25
     c44:	4a 2b       	or	r20, r26
     c46:	5b 2b       	or	r21, r27
     c48:	da 01       	movw	r26, r20
     c4a:	c9 01       	movw	r24, r18
     c4c:	8f 77       	andi	r24, 0x7F	; 127
     c4e:	90 70       	andi	r25, 0x00	; 0
     c50:	a0 70       	andi	r26, 0x00	; 0
     c52:	b0 70       	andi	r27, 0x00	; 0
     c54:	80 34       	cpi	r24, 0x40	; 64
     c56:	91 05       	cpc	r25, r1
     c58:	a1 05       	cpc	r26, r1
     c5a:	b1 05       	cpc	r27, r1
     c5c:	39 f4       	brne	.+14     	; 0xc6c <__pack_f+0xee>
     c5e:	27 ff       	sbrs	r18, 7
     c60:	09 c0       	rjmp	.+18     	; 0xc74 <__pack_f+0xf6>
     c62:	20 5c       	subi	r18, 0xC0	; 192
     c64:	3f 4f       	sbci	r19, 0xFF	; 255
     c66:	4f 4f       	sbci	r20, 0xFF	; 255
     c68:	5f 4f       	sbci	r21, 0xFF	; 255
     c6a:	04 c0       	rjmp	.+8      	; 0xc74 <__pack_f+0xf6>
     c6c:	21 5c       	subi	r18, 0xC1	; 193
     c6e:	3f 4f       	sbci	r19, 0xFF	; 255
     c70:	4f 4f       	sbci	r20, 0xFF	; 255
     c72:	5f 4f       	sbci	r21, 0xFF	; 255
     c74:	e0 e0       	ldi	r30, 0x00	; 0
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	20 30       	cpi	r18, 0x00	; 0
     c7a:	a0 e0       	ldi	r26, 0x00	; 0
     c7c:	3a 07       	cpc	r19, r26
     c7e:	a0 e0       	ldi	r26, 0x00	; 0
     c80:	4a 07       	cpc	r20, r26
     c82:	a0 e4       	ldi	r26, 0x40	; 64
     c84:	5a 07       	cpc	r21, r26
     c86:	10 f0       	brcs	.+4      	; 0xc8c <__pack_f+0x10e>
     c88:	e1 e0       	ldi	r30, 0x01	; 1
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	79 01       	movw	r14, r18
     c8e:	8a 01       	movw	r16, r20
     c90:	27 c0       	rjmp	.+78     	; 0xce0 <__pack_f+0x162>
     c92:	60 38       	cpi	r22, 0x80	; 128
     c94:	71 05       	cpc	r23, r1
     c96:	64 f5       	brge	.+88     	; 0xcf0 <__pack_f+0x172>
     c98:	fb 01       	movw	r30, r22
     c9a:	e1 58       	subi	r30, 0x81	; 129
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	d8 01       	movw	r26, r16
     ca0:	c7 01       	movw	r24, r14
     ca2:	8f 77       	andi	r24, 0x7F	; 127
     ca4:	90 70       	andi	r25, 0x00	; 0
     ca6:	a0 70       	andi	r26, 0x00	; 0
     ca8:	b0 70       	andi	r27, 0x00	; 0
     caa:	80 34       	cpi	r24, 0x40	; 64
     cac:	91 05       	cpc	r25, r1
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	39 f4       	brne	.+14     	; 0xcc2 <__pack_f+0x144>
     cb4:	e7 fe       	sbrs	r14, 7
     cb6:	0d c0       	rjmp	.+26     	; 0xcd2 <__pack_f+0x154>
     cb8:	80 e4       	ldi	r24, 0x40	; 64
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	a0 e0       	ldi	r26, 0x00	; 0
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	04 c0       	rjmp	.+8      	; 0xcca <__pack_f+0x14c>
     cc2:	8f e3       	ldi	r24, 0x3F	; 63
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	a0 e0       	ldi	r26, 0x00	; 0
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e8 0e       	add	r14, r24
     ccc:	f9 1e       	adc	r15, r25
     cce:	0a 1f       	adc	r16, r26
     cd0:	1b 1f       	adc	r17, r27
     cd2:	17 ff       	sbrs	r17, 7
     cd4:	05 c0       	rjmp	.+10     	; 0xce0 <__pack_f+0x162>
     cd6:	16 95       	lsr	r17
     cd8:	07 95       	ror	r16
     cda:	f7 94       	ror	r15
     cdc:	e7 94       	ror	r14
     cde:	31 96       	adiw	r30, 0x01	; 1
     ce0:	87 e0       	ldi	r24, 0x07	; 7
     ce2:	16 95       	lsr	r17
     ce4:	07 95       	ror	r16
     ce6:	f7 94       	ror	r15
     ce8:	e7 94       	ror	r14
     cea:	8a 95       	dec	r24
     cec:	d1 f7       	brne	.-12     	; 0xce2 <__pack_f+0x164>
     cee:	05 c0       	rjmp	.+10     	; 0xcfa <__pack_f+0x17c>
     cf0:	ee 24       	eor	r14, r14
     cf2:	ff 24       	eor	r15, r15
     cf4:	87 01       	movw	r16, r14
     cf6:	ef ef       	ldi	r30, 0xFF	; 255
     cf8:	f0 e0       	ldi	r31, 0x00	; 0
     cfa:	6e 2f       	mov	r22, r30
     cfc:	67 95       	ror	r22
     cfe:	66 27       	eor	r22, r22
     d00:	67 95       	ror	r22
     d02:	90 2f       	mov	r25, r16
     d04:	9f 77       	andi	r25, 0x7F	; 127
     d06:	d7 94       	ror	r13
     d08:	dd 24       	eor	r13, r13
     d0a:	d7 94       	ror	r13
     d0c:	8e 2f       	mov	r24, r30
     d0e:	86 95       	lsr	r24
     d10:	49 2f       	mov	r20, r25
     d12:	46 2b       	or	r20, r22
     d14:	58 2f       	mov	r21, r24
     d16:	5d 29       	or	r21, r13
     d18:	b7 01       	movw	r22, r14
     d1a:	ca 01       	movw	r24, r20
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	ff 90       	pop	r15
     d22:	ef 90       	pop	r14
     d24:	df 90       	pop	r13
     d26:	08 95       	ret

00000d28 <__unpack_f>:
     d28:	fc 01       	movw	r30, r24
     d2a:	db 01       	movw	r26, r22
     d2c:	40 81       	ld	r20, Z
     d2e:	51 81       	ldd	r21, Z+1	; 0x01
     d30:	22 81       	ldd	r18, Z+2	; 0x02
     d32:	62 2f       	mov	r22, r18
     d34:	6f 77       	andi	r22, 0x7F	; 127
     d36:	70 e0       	ldi	r23, 0x00	; 0
     d38:	22 1f       	adc	r18, r18
     d3a:	22 27       	eor	r18, r18
     d3c:	22 1f       	adc	r18, r18
     d3e:	93 81       	ldd	r25, Z+3	; 0x03
     d40:	89 2f       	mov	r24, r25
     d42:	88 0f       	add	r24, r24
     d44:	82 2b       	or	r24, r18
     d46:	28 2f       	mov	r18, r24
     d48:	30 e0       	ldi	r19, 0x00	; 0
     d4a:	99 1f       	adc	r25, r25
     d4c:	99 27       	eor	r25, r25
     d4e:	99 1f       	adc	r25, r25
     d50:	11 96       	adiw	r26, 0x01	; 1
     d52:	9c 93       	st	X, r25
     d54:	11 97       	sbiw	r26, 0x01	; 1
     d56:	21 15       	cp	r18, r1
     d58:	31 05       	cpc	r19, r1
     d5a:	a9 f5       	brne	.+106    	; 0xdc6 <__unpack_f+0x9e>
     d5c:	41 15       	cp	r20, r1
     d5e:	51 05       	cpc	r21, r1
     d60:	61 05       	cpc	r22, r1
     d62:	71 05       	cpc	r23, r1
     d64:	11 f4       	brne	.+4      	; 0xd6a <__unpack_f+0x42>
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	37 c0       	rjmp	.+110    	; 0xdd8 <__unpack_f+0xb0>
     d6a:	82 e8       	ldi	r24, 0x82	; 130
     d6c:	9f ef       	ldi	r25, 0xFF	; 255
     d6e:	13 96       	adiw	r26, 0x03	; 3
     d70:	9c 93       	st	X, r25
     d72:	8e 93       	st	-X, r24
     d74:	12 97       	sbiw	r26, 0x02	; 2
     d76:	9a 01       	movw	r18, r20
     d78:	ab 01       	movw	r20, r22
     d7a:	67 e0       	ldi	r22, 0x07	; 7
     d7c:	22 0f       	add	r18, r18
     d7e:	33 1f       	adc	r19, r19
     d80:	44 1f       	adc	r20, r20
     d82:	55 1f       	adc	r21, r21
     d84:	6a 95       	dec	r22
     d86:	d1 f7       	brne	.-12     	; 0xd7c <__unpack_f+0x54>
     d88:	83 e0       	ldi	r24, 0x03	; 3
     d8a:	8c 93       	st	X, r24
     d8c:	0d c0       	rjmp	.+26     	; 0xda8 <__unpack_f+0x80>
     d8e:	22 0f       	add	r18, r18
     d90:	33 1f       	adc	r19, r19
     d92:	44 1f       	adc	r20, r20
     d94:	55 1f       	adc	r21, r21
     d96:	12 96       	adiw	r26, 0x02	; 2
     d98:	8d 91       	ld	r24, X+
     d9a:	9c 91       	ld	r25, X
     d9c:	13 97       	sbiw	r26, 0x03	; 3
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	13 96       	adiw	r26, 0x03	; 3
     da2:	9c 93       	st	X, r25
     da4:	8e 93       	st	-X, r24
     da6:	12 97       	sbiw	r26, 0x02	; 2
     da8:	20 30       	cpi	r18, 0x00	; 0
     daa:	80 e0       	ldi	r24, 0x00	; 0
     dac:	38 07       	cpc	r19, r24
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	48 07       	cpc	r20, r24
     db2:	80 e4       	ldi	r24, 0x40	; 64
     db4:	58 07       	cpc	r21, r24
     db6:	58 f3       	brcs	.-42     	; 0xd8e <__unpack_f+0x66>
     db8:	14 96       	adiw	r26, 0x04	; 4
     dba:	2d 93       	st	X+, r18
     dbc:	3d 93       	st	X+, r19
     dbe:	4d 93       	st	X+, r20
     dc0:	5c 93       	st	X, r21
     dc2:	17 97       	sbiw	r26, 0x07	; 7
     dc4:	08 95       	ret
     dc6:	2f 3f       	cpi	r18, 0xFF	; 255
     dc8:	31 05       	cpc	r19, r1
     dca:	79 f4       	brne	.+30     	; 0xdea <__unpack_f+0xc2>
     dcc:	41 15       	cp	r20, r1
     dce:	51 05       	cpc	r21, r1
     dd0:	61 05       	cpc	r22, r1
     dd2:	71 05       	cpc	r23, r1
     dd4:	19 f4       	brne	.+6      	; 0xddc <__unpack_f+0xb4>
     dd6:	84 e0       	ldi	r24, 0x04	; 4
     dd8:	8c 93       	st	X, r24
     dda:	08 95       	ret
     ddc:	64 ff       	sbrs	r22, 4
     dde:	03 c0       	rjmp	.+6      	; 0xde6 <__unpack_f+0xbe>
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	8c 93       	st	X, r24
     de4:	12 c0       	rjmp	.+36     	; 0xe0a <__unpack_f+0xe2>
     de6:	1c 92       	st	X, r1
     de8:	10 c0       	rjmp	.+32     	; 0xe0a <__unpack_f+0xe2>
     dea:	2f 57       	subi	r18, 0x7F	; 127
     dec:	30 40       	sbci	r19, 0x00	; 0
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	3c 93       	st	X, r19
     df2:	2e 93       	st	-X, r18
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	83 e0       	ldi	r24, 0x03	; 3
     df8:	8c 93       	st	X, r24
     dfa:	87 e0       	ldi	r24, 0x07	; 7
     dfc:	44 0f       	add	r20, r20
     dfe:	55 1f       	adc	r21, r21
     e00:	66 1f       	adc	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	8a 95       	dec	r24
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0xd4>
     e08:	70 64       	ori	r23, 0x40	; 64
     e0a:	14 96       	adiw	r26, 0x04	; 4
     e0c:	4d 93       	st	X+, r20
     e0e:	5d 93       	st	X+, r21
     e10:	6d 93       	st	X+, r22
     e12:	7c 93       	st	X, r23
     e14:	17 97       	sbiw	r26, 0x07	; 7
     e16:	08 95       	ret

00000e18 <__fpcmp_parts_f>:
     e18:	1f 93       	push	r17
     e1a:	dc 01       	movw	r26, r24
     e1c:	fb 01       	movw	r30, r22
     e1e:	9c 91       	ld	r25, X
     e20:	92 30       	cpi	r25, 0x02	; 2
     e22:	08 f4       	brcc	.+2      	; 0xe26 <__fpcmp_parts_f+0xe>
     e24:	47 c0       	rjmp	.+142    	; 0xeb4 <__fpcmp_parts_f+0x9c>
     e26:	80 81       	ld	r24, Z
     e28:	82 30       	cpi	r24, 0x02	; 2
     e2a:	08 f4       	brcc	.+2      	; 0xe2e <__fpcmp_parts_f+0x16>
     e2c:	43 c0       	rjmp	.+134    	; 0xeb4 <__fpcmp_parts_f+0x9c>
     e2e:	94 30       	cpi	r25, 0x04	; 4
     e30:	51 f4       	brne	.+20     	; 0xe46 <__fpcmp_parts_f+0x2e>
     e32:	11 96       	adiw	r26, 0x01	; 1
     e34:	1c 91       	ld	r17, X
     e36:	84 30       	cpi	r24, 0x04	; 4
     e38:	99 f5       	brne	.+102    	; 0xea0 <__fpcmp_parts_f+0x88>
     e3a:	81 81       	ldd	r24, Z+1	; 0x01
     e3c:	68 2f       	mov	r22, r24
     e3e:	70 e0       	ldi	r23, 0x00	; 0
     e40:	61 1b       	sub	r22, r17
     e42:	71 09       	sbc	r23, r1
     e44:	3f c0       	rjmp	.+126    	; 0xec4 <__fpcmp_parts_f+0xac>
     e46:	84 30       	cpi	r24, 0x04	; 4
     e48:	21 f0       	breq	.+8      	; 0xe52 <__fpcmp_parts_f+0x3a>
     e4a:	92 30       	cpi	r25, 0x02	; 2
     e4c:	31 f4       	brne	.+12     	; 0xe5a <__fpcmp_parts_f+0x42>
     e4e:	82 30       	cpi	r24, 0x02	; 2
     e50:	b9 f1       	breq	.+110    	; 0xec0 <__fpcmp_parts_f+0xa8>
     e52:	81 81       	ldd	r24, Z+1	; 0x01
     e54:	88 23       	and	r24, r24
     e56:	89 f1       	breq	.+98     	; 0xeba <__fpcmp_parts_f+0xa2>
     e58:	2d c0       	rjmp	.+90     	; 0xeb4 <__fpcmp_parts_f+0x9c>
     e5a:	11 96       	adiw	r26, 0x01	; 1
     e5c:	1c 91       	ld	r17, X
     e5e:	11 97       	sbiw	r26, 0x01	; 1
     e60:	82 30       	cpi	r24, 0x02	; 2
     e62:	f1 f0       	breq	.+60     	; 0xea0 <__fpcmp_parts_f+0x88>
     e64:	81 81       	ldd	r24, Z+1	; 0x01
     e66:	18 17       	cp	r17, r24
     e68:	d9 f4       	brne	.+54     	; 0xea0 <__fpcmp_parts_f+0x88>
     e6a:	12 96       	adiw	r26, 0x02	; 2
     e6c:	2d 91       	ld	r18, X+
     e6e:	3c 91       	ld	r19, X
     e70:	13 97       	sbiw	r26, 0x03	; 3
     e72:	82 81       	ldd	r24, Z+2	; 0x02
     e74:	93 81       	ldd	r25, Z+3	; 0x03
     e76:	82 17       	cp	r24, r18
     e78:	93 07       	cpc	r25, r19
     e7a:	94 f0       	brlt	.+36     	; 0xea0 <__fpcmp_parts_f+0x88>
     e7c:	28 17       	cp	r18, r24
     e7e:	39 07       	cpc	r19, r25
     e80:	bc f0       	brlt	.+46     	; 0xeb0 <__fpcmp_parts_f+0x98>
     e82:	14 96       	adiw	r26, 0x04	; 4
     e84:	8d 91       	ld	r24, X+
     e86:	9d 91       	ld	r25, X+
     e88:	0d 90       	ld	r0, X+
     e8a:	bc 91       	ld	r27, X
     e8c:	a0 2d       	mov	r26, r0
     e8e:	24 81       	ldd	r18, Z+4	; 0x04
     e90:	35 81       	ldd	r19, Z+5	; 0x05
     e92:	46 81       	ldd	r20, Z+6	; 0x06
     e94:	57 81       	ldd	r21, Z+7	; 0x07
     e96:	28 17       	cp	r18, r24
     e98:	39 07       	cpc	r19, r25
     e9a:	4a 07       	cpc	r20, r26
     e9c:	5b 07       	cpc	r21, r27
     e9e:	18 f4       	brcc	.+6      	; 0xea6 <__fpcmp_parts_f+0x8e>
     ea0:	11 23       	and	r17, r17
     ea2:	41 f0       	breq	.+16     	; 0xeb4 <__fpcmp_parts_f+0x9c>
     ea4:	0a c0       	rjmp	.+20     	; 0xeba <__fpcmp_parts_f+0xa2>
     ea6:	82 17       	cp	r24, r18
     ea8:	93 07       	cpc	r25, r19
     eaa:	a4 07       	cpc	r26, r20
     eac:	b5 07       	cpc	r27, r21
     eae:	40 f4       	brcc	.+16     	; 0xec0 <__fpcmp_parts_f+0xa8>
     eb0:	11 23       	and	r17, r17
     eb2:	19 f0       	breq	.+6      	; 0xeba <__fpcmp_parts_f+0xa2>
     eb4:	61 e0       	ldi	r22, 0x01	; 1
     eb6:	70 e0       	ldi	r23, 0x00	; 0
     eb8:	05 c0       	rjmp	.+10     	; 0xec4 <__fpcmp_parts_f+0xac>
     eba:	6f ef       	ldi	r22, 0xFF	; 255
     ebc:	7f ef       	ldi	r23, 0xFF	; 255
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <__fpcmp_parts_f+0xac>
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	70 e0       	ldi	r23, 0x00	; 0
     ec4:	cb 01       	movw	r24, r22
     ec6:	1f 91       	pop	r17
     ec8:	08 95       	ret

00000eca <_ZN5Print5writeEPKc>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	cf 93       	push	r28
     ed0:	df 93       	push	r29
     ed2:	8c 01       	movw	r16, r24
     ed4:	eb 01       	movw	r28, r22
     ed6:	09 c0       	rjmp	.+18     	; 0xeea <_ZN5Print5writeEPKc+0x20>
{
  while (*str)
    write(*str++);
     ed8:	21 96       	adiw	r28, 0x01	; 1
     eda:	d8 01       	movw	r26, r16
     edc:	ed 91       	ld	r30, X+
     ede:	fc 91       	ld	r31, X
     ee0:	01 90       	ld	r0, Z+
     ee2:	f0 81       	ld	r31, Z
     ee4:	e0 2d       	mov	r30, r0
     ee6:	c8 01       	movw	r24, r16
     ee8:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
     eea:	68 81       	ld	r22, Y
     eec:	66 23       	and	r22, r22
     eee:	a1 f7       	brne	.-24     	; 0xed8 <_ZN5Print5writeEPKc+0xe>
    write(*str++);
}
     ef0:	df 91       	pop	r29
     ef2:	cf 91       	pop	r28
     ef4:	1f 91       	pop	r17
     ef6:	0f 91       	pop	r16
     ef8:	08 95       	ret

00000efa <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	8c 01       	movw	r16, r24
     f08:	7b 01       	movw	r14, r22
     f0a:	ea 01       	movw	r28, r20
     f0c:	0c c0       	rjmp	.+24     	; 0xf26 <_ZN5Print5writeEPKhj+0x2c>
{
  while (size--)
    write(*buffer++);
     f0e:	d7 01       	movw	r26, r14
     f10:	6d 91       	ld	r22, X+
     f12:	7d 01       	movw	r14, r26
     f14:	d8 01       	movw	r26, r16
     f16:	ed 91       	ld	r30, X+
     f18:	fc 91       	ld	r31, X
     f1a:	01 90       	ld	r0, Z+
     f1c:	f0 81       	ld	r31, Z
     f1e:	e0 2d       	mov	r30, r0
     f20:	c8 01       	movw	r24, r16
     f22:	09 95       	icall
     f24:	21 97       	sbiw	r28, 0x01	; 1
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
     f26:	20 97       	sbiw	r28, 0x00	; 0
     f28:	91 f7       	brne	.-28     	; 0xf0e <_ZN5Print5writeEPKhj+0x14>
    write(*buffer++);
}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	1f 91       	pop	r17
     f30:	0f 91       	pop	r16
     f32:	ff 90       	pop	r15
     f34:	ef 90       	pop	r14
     f36:	08 95       	ret

00000f38 <_ZN5Print5printEh>:

void Print::print(uint8_t b)
     f38:	dc 01       	movw	r26, r24
{
  this->write(b);
     f3a:	ed 91       	ld	r30, X+
     f3c:	fc 91       	ld	r31, X
     f3e:	01 90       	ld	r0, Z+
     f40:	f0 81       	ld	r31, Z
     f42:	e0 2d       	mov	r30, r0
     f44:	09 95       	icall
}
     f46:	08 95       	ret

00000f48 <_ZN5Print5printEc>:

void Print::print(char c)
     f48:	dc 01       	movw	r26, r24
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
     f4a:	ed 91       	ld	r30, X+
     f4c:	fc 91       	ld	r31, X
     f4e:	01 90       	ld	r0, Z+
     f50:	f0 81       	ld	r31, Z
     f52:	e0 2d       	mov	r30, r0
     f54:	09 95       	icall
}

void Print::print(char c)
{
  print((byte) c);
}
     f56:	08 95       	ret

00000f58 <_ZN5Print5printEPKc>:

void Print::print(const char str[])
     f58:	dc 01       	movw	r26, r24
{
  write(str);
     f5a:	ed 91       	ld	r30, X+
     f5c:	fc 91       	ld	r31, X
     f5e:	02 80       	ldd	r0, Z+2	; 0x02
     f60:	f3 81       	ldd	r31, Z+3	; 0x03
     f62:	e0 2d       	mov	r30, r0
     f64:	09 95       	icall
}
     f66:	08 95       	ret

00000f68 <_ZN5Print7printlnEv>:
void Print::print(double n)
{
  printFloat(n, 2);
}

void Print::println(void)
     f68:	0f 93       	push	r16
     f6a:	1f 93       	push	r17
     f6c:	8c 01       	movw	r16, r24
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
     f6e:	dc 01       	movw	r26, r24
     f70:	ed 91       	ld	r30, X+
     f72:	fc 91       	ld	r31, X
     f74:	01 90       	ld	r0, Z+
     f76:	f0 81       	ld	r31, Z
     f78:	e0 2d       	mov	r30, r0
     f7a:	6d e0       	ldi	r22, 0x0D	; 13
     f7c:	09 95       	icall

void Print::println(void)
{
  print('\r');
  print('\n');  
}
     f7e:	d8 01       	movw	r26, r16
     f80:	ed 91       	ld	r30, X+
     f82:	fc 91       	ld	r31, X
     f84:	01 90       	ld	r0, Z+
     f86:	f0 81       	ld	r31, Z
     f88:	e0 2d       	mov	r30, r0
     f8a:	c8 01       	movw	r24, r16
     f8c:	6a e0       	ldi	r22, 0x0A	; 10
     f8e:	09 95       	icall
     f90:	1f 91       	pop	r17
     f92:	0f 91       	pop	r16
     f94:	08 95       	ret

00000f96 <_ZN5Print7printlnEc>:

void Print::println(char c)
     f96:	0f 93       	push	r16
     f98:	1f 93       	push	r17
     f9a:	8c 01       	movw	r16, r24
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
     f9c:	dc 01       	movw	r26, r24
     f9e:	ed 91       	ld	r30, X+
     fa0:	fc 91       	ld	r31, X
     fa2:	01 90       	ld	r0, Z+
     fa4:	f0 81       	ld	r31, Z
     fa6:	e0 2d       	mov	r30, r0
     fa8:	09 95       	icall
}

void Print::println(char c)
{
  print(c);
  println();  
     faa:	c8 01       	movw	r24, r16
     fac:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Print7printlnEv>
}
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	08 95       	ret

00000fb6 <_ZN5Print7printlnEPKc>:

void Print::println(const char c[])
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	8c 01       	movw	r16, r24
{
  print(c);
     fbc:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN5Print5printEPKc>
  println();
     fc0:	c8 01       	movw	r24, r16
     fc2:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Print7printlnEv>
}
     fc6:	1f 91       	pop	r17
     fc8:	0f 91       	pop	r16
     fca:	08 95       	ret

00000fcc <_ZN5Print7printlnEh>:

void Print::println(uint8_t b)
     fcc:	0f 93       	push	r16
     fce:	1f 93       	push	r17
     fd0:	8c 01       	movw	r16, r24
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
     fd2:	dc 01       	movw	r26, r24
     fd4:	ed 91       	ld	r30, X+
     fd6:	fc 91       	ld	r31, X
     fd8:	01 90       	ld	r0, Z+
     fda:	f0 81       	ld	r31, Z
     fdc:	e0 2d       	mov	r30, r0
     fde:	09 95       	icall
}

void Print::println(uint8_t b)
{
  print(b);
  println();
     fe0:	c8 01       	movw	r24, r16
     fe2:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Print7printlnEv>
}
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	08 95       	ret

00000fec <_ZN5Print11printNumberEmh>:
  println();
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
     fec:	2f 92       	push	r2
     fee:	3f 92       	push	r3
     ff0:	4f 92       	push	r4
     ff2:	5f 92       	push	r5
     ff4:	6f 92       	push	r6
     ff6:	7f 92       	push	r7
     ff8:	8f 92       	push	r8
     ffa:	9f 92       	push	r9
     ffc:	af 92       	push	r10
     ffe:	bf 92       	push	r11
    1000:	cf 92       	push	r12
    1002:	df 92       	push	r13
    1004:	ef 92       	push	r14
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	cd b7       	in	r28, 0x3d	; 61
    1012:	de b7       	in	r29, 0x3e	; 62
    1014:	a0 97       	sbiw	r28, 0x20	; 32
    1016:	0f b6       	in	r0, 0x3f	; 63
    1018:	f8 94       	cli
    101a:	de bf       	out	0x3e, r29	; 62
    101c:	0f be       	out	0x3f, r0	; 63
    101e:	cd bf       	out	0x3d, r28	; 61
    1020:	1c 01       	movw	r2, r24
    1022:	6a 01       	movw	r12, r20
    1024:	7b 01       	movw	r14, r22
{
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;

  if (n == 0) {
    1026:	41 15       	cp	r20, r1
    1028:	51 05       	cpc	r21, r1
    102a:	61 05       	cpc	r22, r1
    102c:	71 05       	cpc	r23, r1
    102e:	49 f4       	brne	.+18     	; 0x1042 <_ZN5Print11printNumberEmh+0x56>
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
    1030:	dc 01       	movw	r26, r24
    1032:	ed 91       	ld	r30, X+
    1034:	fc 91       	ld	r31, X
    1036:	01 90       	ld	r0, Z+
    1038:	f0 81       	ld	r31, Z
    103a:	e0 2d       	mov	r30, r0
    103c:	60 e3       	ldi	r22, 0x30	; 48
    103e:	09 95       	icall
    1040:	54 c0       	rjmp	.+168    	; 0x10ea <_ZN5Print11printNumberEmh+0xfe>
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;

  if (n == 0) {
    print('0');
    return;
    1042:	88 24       	eor	r8, r8
    1044:	99 24       	eor	r9, r9
    1046:	54 01       	movw	r10, r8
  } 

  while (n > 0) {
    buf[i++] = n % base;
    1048:	42 2e       	mov	r4, r18
    104a:	55 24       	eor	r5, r5
    104c:	66 24       	eor	r6, r6
    104e:	77 24       	eor	r7, r7
    1050:	01 e0       	ldi	r16, 0x01	; 1
    1052:	10 e0       	ldi	r17, 0x00	; 0
    1054:	0c 0f       	add	r16, r28
    1056:	1d 1f       	adc	r17, r29
    1058:	08 0d       	add	r16, r8
    105a:	19 1d       	adc	r17, r9
    105c:	c7 01       	movw	r24, r14
    105e:	b6 01       	movw	r22, r12
    1060:	a3 01       	movw	r20, r6
    1062:	92 01       	movw	r18, r4
    1064:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
    1068:	f8 01       	movw	r30, r16
    106a:	60 83       	st	Z, r22
    106c:	08 94       	sec
    106e:	81 1c       	adc	r8, r1
    1070:	91 1c       	adc	r9, r1
    1072:	a1 1c       	adc	r10, r1
    1074:	b1 1c       	adc	r11, r1
    n /= base;
    1076:	c7 01       	movw	r24, r14
    1078:	b6 01       	movw	r22, r12
    107a:	a3 01       	movw	r20, r6
    107c:	92 01       	movw	r18, r4
    107e:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
    1082:	c9 01       	movw	r24, r18
    1084:	da 01       	movw	r26, r20
    1086:	6c 01       	movw	r12, r24
    1088:	7d 01       	movw	r14, r26
  if (n == 0) {
    print('0');
    return;
  } 

  while (n > 0) {
    108a:	c1 14       	cp	r12, r1
    108c:	d1 04       	cpc	r13, r1
    108e:	e1 04       	cpc	r14, r1
    1090:	f1 04       	cpc	r15, r1
    1092:	f1 f6       	brne	.-68     	; 0x1050 <_ZN5Print11printNumberEmh+0x64>
    1094:	81 e0       	ldi	r24, 0x01	; 1
    1096:	e8 2e       	mov	r14, r24
    1098:	f1 2c       	mov	r15, r1
    109a:	ec 0e       	add	r14, r28
    109c:	fd 1e       	adc	r15, r29
    109e:	e8 0c       	add	r14, r8
    10a0:	f9 1c       	adc	r15, r9
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    10a2:	3e 01       	movw	r6, r28
    10a4:	08 94       	sec
    10a6:	61 1c       	adc	r6, r1
    10a8:	71 1c       	adc	r7, r1
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
    10aa:	d5 01       	movw	r26, r10
    10ac:	c4 01       	movw	r24, r8
    10ae:	01 97       	sbiw	r24, 0x01	; 1
    10b0:	a1 09       	sbc	r26, r1
    10b2:	b1 09       	sbc	r27, r1
    10b4:	6c 01       	movw	r12, r24
    10b6:	c8 18       	sub	r12, r8
    10b8:	d9 08       	sbc	r13, r9
    10ba:	14 c0       	rjmp	.+40     	; 0x10e4 <_ZN5Print11printNumberEmh+0xf8>
    10bc:	f6 01       	movw	r30, r12
    10be:	ee 0d       	add	r30, r14
    10c0:	ff 1d       	adc	r31, r15
    10c2:	60 81       	ld	r22, Z
    10c4:	6a 30       	cpi	r22, 0x0A	; 10
    10c6:	10 f4       	brcc	.+4      	; 0x10cc <_ZN5Print11printNumberEmh+0xe0>
    10c8:	60 5d       	subi	r22, 0xD0	; 208
    10ca:	01 c0       	rjmp	.+2      	; 0x10ce <_ZN5Print11printNumberEmh+0xe2>
    10cc:	69 5c       	subi	r22, 0xC9	; 201
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
    10ce:	d1 01       	movw	r26, r2
    10d0:	ed 91       	ld	r30, X+
    10d2:	fc 91       	ld	r31, X
    10d4:	01 90       	ld	r0, Z+
    10d6:	f0 81       	ld	r31, Z
    10d8:	e0 2d       	mov	r30, r0
    10da:	c1 01       	movw	r24, r2
    10dc:	09 95       	icall
    10de:	08 94       	sec
    10e0:	e1 08       	sbc	r14, r1
    10e2:	f1 08       	sbc	r15, r1
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
    10e4:	6e 14       	cp	r6, r14
    10e6:	7f 04       	cpc	r7, r15
    10e8:	49 f7       	brne	.-46     	; 0x10bc <_ZN5Print11printNumberEmh+0xd0>
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
    10ea:	a0 96       	adiw	r28, 0x20	; 32
    10ec:	0f b6       	in	r0, 0x3f	; 63
    10ee:	f8 94       	cli
    10f0:	de bf       	out	0x3e, r29	; 62
    10f2:	0f be       	out	0x3f, r0	; 63
    10f4:	cd bf       	out	0x3d, r28	; 61
    10f6:	cf 91       	pop	r28
    10f8:	df 91       	pop	r29
    10fa:	1f 91       	pop	r17
    10fc:	0f 91       	pop	r16
    10fe:	ff 90       	pop	r15
    1100:	ef 90       	pop	r14
    1102:	df 90       	pop	r13
    1104:	cf 90       	pop	r12
    1106:	bf 90       	pop	r11
    1108:	af 90       	pop	r10
    110a:	9f 90       	pop	r9
    110c:	8f 90       	pop	r8
    110e:	7f 90       	pop	r7
    1110:	6f 90       	pop	r6
    1112:	5f 90       	pop	r5
    1114:	4f 90       	pop	r4
    1116:	3f 90       	pop	r3
    1118:	2f 90       	pop	r2
    111a:	08 95       	ret

0000111c <_ZN5Print5printEm>:
  printNumber(n, 10);
}

void Print::print(unsigned long n)
{
  printNumber(n, 10);
    111c:	2a e0       	ldi	r18, 0x0A	; 10
    111e:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN5Print11printNumberEmh>
}
    1122:	08 95       	ret

00001124 <_ZN5Print7printlnEm>:
{
  print(n);
  println();  
}

void Print::println(unsigned long n)
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	8c 01       	movw	r16, r24
{
  print(n);
    112a:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN5Print5printEm>
  println();  
    112e:	c8 01       	movw	r24, r16
    1130:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Print7printlnEv>
}
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	08 95       	ret

0000113a <_ZN5Print5printEj>:
  print((long) n);
}

void Print::print(unsigned int n)
{
  print((unsigned long) n);
    113a:	ab 01       	movw	r20, r22
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	70 e0       	ldi	r23, 0x00	; 0
    1140:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN5Print5printEm>
}
    1144:	08 95       	ret

00001146 <_ZN5Print7printlnEj>:
{
  print(n);
  println();
}

void Print::println(unsigned int n)
    1146:	0f 93       	push	r16
    1148:	1f 93       	push	r17
    114a:	8c 01       	movw	r16, r24
  print((long) n);
}

void Print::print(unsigned int n)
{
  print((unsigned long) n);
    114c:	ab 01       	movw	r20, r22
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN5Print5printEm>
}

void Print::println(unsigned int n)
{
  print(n);
  println();
    1156:	c8 01       	movw	r24, r16
    1158:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Print7printlnEv>
}
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	08 95       	ret

00001162 <_ZN5Print5printEl>:
void Print::print(unsigned int n)
{
  print((unsigned long) n);
}

void Print::print(long n)
    1162:	ef 92       	push	r14
    1164:	ff 92       	push	r15
    1166:	0f 93       	push	r16
    1168:	1f 93       	push	r17
    116a:	cf 93       	push	r28
    116c:	df 93       	push	r29
    116e:	ec 01       	movw	r28, r24
    1170:	7a 01       	movw	r14, r20
    1172:	8b 01       	movw	r16, r22
{
  if (n < 0) {
    1174:	77 ff       	sbrs	r23, 7
    1176:	0f c0       	rjmp	.+30     	; 0x1196 <_ZN5Print5printEl+0x34>
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
    1178:	e8 81       	ld	r30, Y
    117a:	f9 81       	ldd	r31, Y+1	; 0x01
    117c:	01 90       	ld	r0, Z+
    117e:	f0 81       	ld	r31, Z
    1180:	e0 2d       	mov	r30, r0
    1182:	6d e2       	ldi	r22, 0x2D	; 45
    1184:	09 95       	icall

void Print::print(long n)
{
  if (n < 0) {
    print('-');
    n = -n;
    1186:	10 95       	com	r17
    1188:	00 95       	com	r16
    118a:	f0 94       	com	r15
    118c:	e0 94       	com	r14
    118e:	e1 1c       	adc	r14, r1
    1190:	f1 1c       	adc	r15, r1
    1192:	01 1d       	adc	r16, r1
    1194:	11 1d       	adc	r17, r1
  }
  printNumber(n, 10);
    1196:	ce 01       	movw	r24, r28
    1198:	b8 01       	movw	r22, r16
    119a:	a7 01       	movw	r20, r14
    119c:	2a e0       	ldi	r18, 0x0A	; 10
    119e:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN5Print11printNumberEmh>
}
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	08 95       	ret

000011b0 <_ZN5Print7printlnEl>:
{
  print(n);
  println();
}

void Print::println(long n)
    11b0:	0f 93       	push	r16
    11b2:	1f 93       	push	r17
    11b4:	8c 01       	movw	r16, r24
{
  print(n);
    11b6:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN5Print5printEl>
  println();  
    11ba:	c8 01       	movw	r24, r16
    11bc:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Print7printlnEv>
}
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	08 95       	ret

000011c6 <_ZN5Print5printEi>:
void Print::print(const char str[])
{
  write(str);
}

void Print::print(int n)
    11c6:	ab 01       	movw	r20, r22
{
  print((long) n);
    11c8:	66 27       	eor	r22, r22
    11ca:	57 fd       	sbrc	r21, 7
    11cc:	60 95       	com	r22
    11ce:	76 2f       	mov	r23, r22
    11d0:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN5Print5printEl>
}
    11d4:	08 95       	ret

000011d6 <_ZN5Print7printlnEi>:
{
  print(b);
  println();
}

void Print::println(int n)
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	8c 01       	movw	r16, r24
    11dc:	ab 01       	movw	r20, r22
  write(str);
}

void Print::print(int n)
{
  print((long) n);
    11de:	66 27       	eor	r22, r22
    11e0:	57 fd       	sbrc	r21, 7
    11e2:	60 95       	com	r22
    11e4:	76 2f       	mov	r23, r22
    11e6:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN5Print5printEl>
}

void Print::println(int n)
{
  print(n);
  println();
    11ea:	c8 01       	movw	r24, r16
    11ec:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Print7printlnEv>
}
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	08 95       	ret

000011f6 <_ZN5Print5printEli>:
void Print::print(unsigned long n)
{
  printNumber(n, 10);
}

void Print::print(long n, int base)
    11f6:	dc 01       	movw	r26, r24
{
  if (base == 0)
    11f8:	21 15       	cp	r18, r1
    11fa:	31 05       	cpc	r19, r1
    11fc:	41 f4       	brne	.+16     	; 0x120e <_ZN5Print5printEli+0x18>
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
    11fe:	ed 91       	ld	r30, X+
    1200:	fc 91       	ld	r31, X
    1202:	01 90       	ld	r0, Z+
    1204:	f0 81       	ld	r31, Z
    1206:	e0 2d       	mov	r30, r0
    1208:	64 2f       	mov	r22, r20
    120a:	09 95       	icall
    120c:	08 95       	ret

void Print::print(long n, int base)
{
  if (base == 0)
    print((char) n);
  else if (base == 10)
    120e:	2a 30       	cpi	r18, 0x0A	; 10
    1210:	31 05       	cpc	r19, r1
    1212:	19 f4       	brne	.+6      	; 0x121a <_ZN5Print5printEli+0x24>
    print(n);
    1214:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN5Print5printEl>
    1218:	08 95       	ret
  else
    printNumber(n, base);
    121a:	0e 94 f6 07 	call	0xfec	; 0xfec <_ZN5Print11printNumberEmh>
    121e:	08 95       	ret

00001220 <_ZN5Print7printlnEli>:
{
  print(n);
  println();  
}

void Print::println(long n, int base)
    1220:	0f 93       	push	r16
    1222:	1f 93       	push	r17
    1224:	8c 01       	movw	r16, r24
{
  print(n, base);
    1226:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <_ZN5Print5printEli>
  println();
    122a:	c8 01       	movw	r24, r16
    122c:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Print7printlnEv>
}
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	08 95       	ret

00001236 <_ZN5Print10printFloatEdh>:
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void Print::printFloat(double number, uint8_t digits) 
    1236:	9f 92       	push	r9
    1238:	af 92       	push	r10
    123a:	bf 92       	push	r11
    123c:	cf 92       	push	r12
    123e:	df 92       	push	r13
    1240:	ef 92       	push	r14
    1242:	ff 92       	push	r15
    1244:	0f 93       	push	r16
    1246:	1f 93       	push	r17
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	ec 01       	movw	r28, r24
    124e:	7a 01       	movw	r14, r20
    1250:	8b 01       	movw	r16, r22
    1252:	92 2e       	mov	r9, r18
{ 
  // Handle negative numbers
  if (number < 0.0)
    1254:	cb 01       	movw	r24, r22
    1256:	ba 01       	movw	r22, r20
    1258:	20 e0       	ldi	r18, 0x00	; 0
    125a:	30 e0       	ldi	r19, 0x00	; 0
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	50 e0       	ldi	r21, 0x00	; 0
    1260:	0e 94 15 04 	call	0x82a	; 0x82a <__ltsf2>
    1264:	88 23       	and	r24, r24
    1266:	64 f4       	brge	.+24     	; 0x1280 <_ZN5Print10printFloatEdh+0x4a>
    write(*buffer++);
}

void Print::print(uint8_t b)
{
  this->write(b);
    1268:	e8 81       	ld	r30, Y
    126a:	f9 81       	ldd	r31, Y+1	; 0x01
    126c:	01 90       	ld	r0, Z+
    126e:	f0 81       	ld	r31, Z
    1270:	e0 2d       	mov	r30, r0
    1272:	ce 01       	movw	r24, r28
    1274:	6d e2       	ldi	r22, 0x2D	; 45
    1276:	09 95       	icall
{ 
  // Handle negative numbers
  if (number < 0.0)
  {
     print('-');
     number = -number;
    1278:	17 fb       	bst	r17, 7
    127a:	10 95       	com	r17
    127c:	17 f9       	bld	r17, 7
    127e:	10 95       	com	r17
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	40 e0       	ldi	r20, 0x00	; 0
    1286:	5f e3       	ldi	r21, 0x3F	; 63
    1288:	aa 24       	eor	r10, r10
    128a:	0b c0       	rjmp	.+22     	; 0x12a2 <_ZN5Print10printFloatEdh+0x6c>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
    128c:	ca 01       	movw	r24, r20
    128e:	b9 01       	movw	r22, r18
    1290:	20 e0       	ldi	r18, 0x00	; 0
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	40 e2       	ldi	r20, 0x20	; 32
    1296:	51 e4       	ldi	r21, 0x41	; 65
    1298:	0e 94 39 03 	call	0x672	; 0x672 <__divsf3>
    129c:	9b 01       	movw	r18, r22
    129e:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    12a0:	a3 94       	inc	r10
    12a2:	a9 14       	cp	r10, r9
    12a4:	98 f3       	brcs	.-26     	; 0x128c <_ZN5Print10printFloatEdh+0x56>
    rounding /= 10.0;
  
  number += rounding;
    12a6:	c8 01       	movw	r24, r16
    12a8:	b7 01       	movw	r22, r14
    12aa:	0e 94 12 02 	call	0x424	; 0x424 <__addsf3>
    12ae:	5b 01       	movw	r10, r22
    12b0:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    12b2:	0e 94 69 00 	call	0xd2	; 0xd2 <__fixunssfsi>
    12b6:	7b 01       	movw	r14, r22
    12b8:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  print(int_part);
    12ba:	ce 01       	movw	r24, r28
    12bc:	b8 01       	movw	r22, r16
    12be:	a7 01       	movw	r20, r14
    12c0:	0e 94 8e 08 	call	0x111c	; 0x111c <_ZN5Print5printEm>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    12c4:	99 20       	and	r9, r9
    12c6:	29 f0       	breq	.+10     	; 0x12d2 <_ZN5Print10printFloatEdh+0x9c>
    print("."); 
    12c8:	ce 01       	movw	r24, r28
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	71 e0       	ldi	r23, 0x01	; 1
    12ce:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN5Print5printEPKc>
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    12d2:	c8 01       	movw	r24, r16
    12d4:	b7 01       	movw	r22, r14
    12d6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__floatunsisf>
    12da:	9b 01       	movw	r18, r22
    12dc:	ac 01       	movw	r20, r24
    12de:	c6 01       	movw	r24, r12
    12e0:	b5 01       	movw	r22, r10
    12e2:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__subsf3>
    12e6:	20 c0       	rjmp	.+64     	; 0x1328 <_ZN5Print10printFloatEdh+0xf2>
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    12e8:	20 e0       	ldi	r18, 0x00	; 0
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	40 e2       	ldi	r20, 0x20	; 32
    12ee:	51 e4       	ldi	r21, 0x41	; 65
    12f0:	0e 94 3f 02 	call	0x47e	; 0x47e <__mulsf3>
    12f4:	7b 01       	movw	r14, r22
    12f6:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
    12f8:	0e 94 a3 04 	call	0x946	; 0x946 <__fixsfsi>
    12fc:	5b 01       	movw	r10, r22
    12fe:	6c 01       	movw	r12, r24
  write(str);
}

void Print::print(int n)
{
  print((long) n);
    1300:	cc 24       	eor	r12, r12
    1302:	b7 fc       	sbrc	r11, 7
    1304:	c0 94       	com	r12
    1306:	dc 2c       	mov	r13, r12
    1308:	ce 01       	movw	r24, r28
    130a:	b6 01       	movw	r22, r12
    130c:	a5 01       	movw	r20, r10
    130e:	0e 94 b1 08 	call	0x1162	; 0x1162 <_ZN5Print5printEl>
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
    1312:	c6 01       	movw	r24, r12
    1314:	b5 01       	movw	r22, r10
    1316:	0e 94 45 04 	call	0x88a	; 0x88a <__floatsisf>
    131a:	9b 01       	movw	r18, r22
    131c:	ac 01       	movw	r20, r24
    131e:	c8 01       	movw	r24, r16
    1320:	b7 01       	movw	r22, r14
    1322:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <__subsf3>
    1326:	9a 94       	dec	r9
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1328:	99 20       	and	r9, r9
    132a:	f1 f6       	brne	.-68     	; 0x12e8 <_ZN5Print10printFloatEdh+0xb2>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	1f 91       	pop	r17
    1332:	0f 91       	pop	r16
    1334:	ff 90       	pop	r15
    1336:	ef 90       	pop	r14
    1338:	df 90       	pop	r13
    133a:	cf 90       	pop	r12
    133c:	bf 90       	pop	r11
    133e:	af 90       	pop	r10
    1340:	9f 90       	pop	r9
    1342:	08 95       	ret

00001344 <_ZN5Print5printEd>:
    printNumber(n, base);
}

void Print::print(double n)
{
  printFloat(n, 2);
    1344:	22 e0       	ldi	r18, 0x02	; 2
    1346:	0e 94 1b 09 	call	0x1236	; 0x1236 <_ZN5Print10printFloatEdh>
}
    134a:	08 95       	ret

0000134c <_ZN5Print7printlnEd>:
{
  print(n, base);
  println();
}

void Print::println(double n)
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	8c 01       	movw	r16, r24
{
  print(n);
    1352:	0e 94 a2 09 	call	0x1344	; 0x1344 <_ZN5Print5printEd>
  println();
    1356:	c8 01       	movw	r24, r16
    1358:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Print7printlnEv>
}
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	08 95       	ret

00001362 <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    1362:	8f 92       	push	r8
    1364:	af 92       	push	r10
    1366:	cf 92       	push	r12
    1368:	df 92       	push	r13
    136a:	ef 92       	push	r14
    136c:	ff 92       	push	r15
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	cd b7       	in	r28, 0x3d	; 61
    1378:	de b7       	in	r29, 0x3e	; 62
    137a:	fc 01       	movw	r30, r24
    137c:	8e e8       	ldi	r24, 0x8E	; 142
    137e:	92 e0       	ldi	r25, 0x02	; 2
    1380:	91 83       	std	Z+1, r25	; 0x01
    1382:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1384:	73 83       	std	Z+3, r23	; 0x03
    1386:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    1388:	55 83       	std	Z+5, r21	; 0x05
    138a:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    138c:	37 83       	std	Z+7, r19	; 0x07
    138e:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    1390:	11 87       	std	Z+9, r17	; 0x09
    1392:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    1394:	f3 86       	std	Z+11, r15	; 0x0b
    1396:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    1398:	d5 86       	std	Z+13, r13	; 0x0d
    139a:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    139c:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    139e:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    13a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    13a2:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    13a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    13a6:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    13a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    13aa:	82 8b       	std	Z+18, r24	; 0x12
}
    13ac:	cf 91       	pop	r28
    13ae:	df 91       	pop	r29
    13b0:	1f 91       	pop	r17
    13b2:	0f 91       	pop	r16
    13b4:	ff 90       	pop	r15
    13b6:	ef 90       	pop	r14
    13b8:	df 90       	pop	r13
    13ba:	cf 90       	pop	r12
    13bc:	af 90       	pop	r10
    13be:	8f 90       	pop	r8
    13c0:	08 95       	ret

000013c2 <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    13c2:	8f 92       	push	r8
    13c4:	af 92       	push	r10
    13c6:	cf 92       	push	r12
    13c8:	df 92       	push	r13
    13ca:	ef 92       	push	r14
    13cc:	ff 92       	push	r15
    13ce:	0f 93       	push	r16
    13d0:	1f 93       	push	r17
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
    13da:	fc 01       	movw	r30, r24
    13dc:	8e e8       	ldi	r24, 0x8E	; 142
    13de:	92 e0       	ldi	r25, 0x02	; 2
    13e0:	91 83       	std	Z+1, r25	; 0x01
    13e2:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    13e4:	73 83       	std	Z+3, r23	; 0x03
    13e6:	62 83       	std	Z+2, r22	; 0x02
  _ubrrh = ubrrh;
    13e8:	55 83       	std	Z+5, r21	; 0x05
    13ea:	44 83       	std	Z+4, r20	; 0x04
  _ubrrl = ubrrl;
    13ec:	37 83       	std	Z+7, r19	; 0x07
    13ee:	26 83       	std	Z+6, r18	; 0x06
  _ucsra = ucsra;
    13f0:	11 87       	std	Z+9, r17	; 0x09
    13f2:	00 87       	std	Z+8, r16	; 0x08
  _ucsrb = ucsrb;
    13f4:	f3 86       	std	Z+11, r15	; 0x0b
    13f6:	e2 86       	std	Z+10, r14	; 0x0a
  _udr = udr;
    13f8:	d5 86       	std	Z+13, r13	; 0x0d
    13fa:	c4 86       	std	Z+12, r12	; 0x0c
  _rxen = rxen;
    13fc:	a6 86       	std	Z+14, r10	; 0x0e
  _txen = txen;
    13fe:	87 86       	std	Z+15, r8	; 0x0f
  _rxcie = rxcie;
    1400:	8d 85       	ldd	r24, Y+13	; 0x0d
    1402:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
    1404:	8e 85       	ldd	r24, Y+14	; 0x0e
    1406:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
    1408:	8f 85       	ldd	r24, Y+15	; 0x0f
    140a:	82 8b       	std	Z+18, r24	; 0x12
}
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	1f 91       	pop	r17
    1412:	0f 91       	pop	r16
    1414:	ff 90       	pop	r15
    1416:	ef 90       	pop	r14
    1418:	df 90       	pop	r13
    141a:	cf 90       	pop	r12
    141c:	af 90       	pop	r10
    141e:	8f 90       	pop	r8
    1420:	08 95       	ret

00001422 <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
    1422:	8f 92       	push	r8
    1424:	9f 92       	push	r9
    1426:	af 92       	push	r10
    1428:	bf 92       	push	r11
    142a:	cf 92       	push	r12
    142c:	df 92       	push	r13
    142e:	ef 92       	push	r14
    1430:	ff 92       	push	r15
    1432:	0f 93       	push	r16
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	4c 01       	movw	r8, r24
{
  uint16_t baud_setting;
  bool use_u2x;

  // U2X mode is needed for baud rates higher than (CPU Hz / 16)
  if (baud > F_CPU / 16) {
    143c:	7a 01       	movw	r14, r20
    143e:	8b 01       	movw	r16, r22
    1440:	81 ed       	ldi	r24, 0xD1	; 209
    1442:	e8 16       	cp	r14, r24
    1444:	82 e1       	ldi	r24, 0x12	; 18
    1446:	f8 06       	cpc	r15, r24
    1448:	83 e1       	ldi	r24, 0x13	; 19
    144a:	08 07       	cpc	r16, r24
    144c:	80 e0       	ldi	r24, 0x00	; 0
    144e:	18 07       	cpc	r17, r24
    1450:	08 f0       	brcs	.+2      	; 0x1454 <_ZN14HardwareSerial5beginEl+0x32>
    1452:	73 c0       	rjmp	.+230    	; 0x153a <_ZN14HardwareSerial5beginEl+0x118>
  } else {
    // figure out if U2X mode would allow for a better connection
    
    // calculate the percent difference between the baud-rate specified and
    // the real baud rate for both U2X and non-U2X mode (0-255 error percent)
    uint8_t nonu2x_baud_error = abs((int)(255-((F_CPU/(16*(((F_CPU/8/baud-1)/2)+1))*255)/baud)));
    1454:	60 ea       	ldi	r22, 0xA0	; 160
    1456:	75 e2       	ldi	r23, 0x25	; 37
    1458:	86 e2       	ldi	r24, 0x26	; 38
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	a8 01       	movw	r20, r16
    145e:	97 01       	movw	r18, r14
    1460:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
    1464:	59 01       	movw	r10, r18
    1466:	6a 01       	movw	r12, r20
    1468:	08 94       	sec
    146a:	a1 08       	sbc	r10, r1
    146c:	b1 08       	sbc	r11, r1
    146e:	c1 08       	sbc	r12, r1
    1470:	d1 08       	sbc	r13, r1
    1472:	d6 94       	lsr	r13
    1474:	c7 94       	ror	r12
    1476:	b7 94       	ror	r11
    1478:	a7 94       	ror	r10
    
    // prefer non-U2X mode because it handles clock skew better
    use_u2x = (nonu2x_baud_error > u2x_baud_error);
  }
  
  if (use_u2x) {
    147a:	a6 01       	movw	r20, r12
    147c:	95 01       	movw	r18, r10
    147e:	2f 5f       	subi	r18, 0xFF	; 255
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	4f 4f       	sbci	r20, 0xFF	; 255
    1484:	5f 4f       	sbci	r21, 0xFF	; 255
    1486:	74 e0       	ldi	r23, 0x04	; 4
    1488:	22 0f       	add	r18, r18
    148a:	33 1f       	adc	r19, r19
    148c:	44 1f       	adc	r20, r20
    148e:	55 1f       	adc	r21, r21
    1490:	7a 95       	dec	r23
    1492:	d1 f7       	brne	.-12     	; 0x1488 <_ZN14HardwareSerial5beginEl+0x66>
    1494:	60 e0       	ldi	r22, 0x00	; 0
    1496:	7d e2       	ldi	r23, 0x2D	; 45
    1498:	81 e3       	ldi	r24, 0x31	; 49
    149a:	91 e0       	ldi	r25, 0x01	; 1
    149c:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
    14a0:	ca 01       	movw	r24, r20
    14a2:	b9 01       	movw	r22, r18
    14a4:	2f ef       	ldi	r18, 0xFF	; 255
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e0       	ldi	r20, 0x00	; 0
    14aa:	50 e0       	ldi	r21, 0x00	; 0
    14ac:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsi3>
    14b0:	a8 01       	movw	r20, r16
    14b2:	97 01       	movw	r18, r14
    14b4:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
    14b8:	cf ef       	ldi	r28, 0xFF	; 255
    14ba:	d0 e0       	ldi	r29, 0x00	; 0
    14bc:	c2 1b       	sub	r28, r18
    14be:	d3 0b       	sbc	r29, r19
    14c0:	d7 ff       	sbrs	r29, 7
    14c2:	03 c0       	rjmp	.+6      	; 0x14ca <_ZN14HardwareSerial5beginEl+0xa8>
    14c4:	d0 95       	com	r29
    14c6:	c1 95       	neg	r28
    14c8:	df 4f       	sbci	r29, 0xFF	; 255
    14ca:	60 e4       	ldi	r22, 0x40	; 64
    14cc:	7b e4       	ldi	r23, 0x4B	; 75
    14ce:	8c e4       	ldi	r24, 0x4C	; 76
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	a8 01       	movw	r20, r16
    14d4:	97 01       	movw	r18, r14
    14d6:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
    14da:	21 50       	subi	r18, 0x01	; 1
    14dc:	30 40       	sbci	r19, 0x00	; 0
    14de:	40 40       	sbci	r20, 0x00	; 0
    14e0:	50 40       	sbci	r21, 0x00	; 0
    14e2:	56 95       	lsr	r21
    14e4:	47 95       	ror	r20
    14e6:	37 95       	ror	r19
    14e8:	27 95       	ror	r18
    14ea:	2f 5f       	subi	r18, 0xFF	; 255
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	4f 4f       	sbci	r20, 0xFF	; 255
    14f0:	5f 4f       	sbci	r21, 0xFF	; 255
    14f2:	93 e0       	ldi	r25, 0x03	; 3
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
    14f8:	44 1f       	adc	r20, r20
    14fa:	55 1f       	adc	r21, r21
    14fc:	9a 95       	dec	r25
    14fe:	d1 f7       	brne	.-12     	; 0x14f4 <_ZN14HardwareSerial5beginEl+0xd2>
    1500:	60 e0       	ldi	r22, 0x00	; 0
    1502:	7d e2       	ldi	r23, 0x2D	; 45
    1504:	81 e3       	ldi	r24, 0x31	; 49
    1506:	91 e0       	ldi	r25, 0x01	; 1
    1508:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
    150c:	ca 01       	movw	r24, r20
    150e:	b9 01       	movw	r22, r18
    1510:	2f ef       	ldi	r18, 0xFF	; 255
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e0       	ldi	r20, 0x00	; 0
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <__mulsi3>
    151c:	a8 01       	movw	r20, r16
    151e:	97 01       	movw	r18, r14
    1520:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
    1524:	8f ef       	ldi	r24, 0xFF	; 255
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	82 1b       	sub	r24, r18
    152a:	93 0b       	sbc	r25, r19
    152c:	97 ff       	sbrs	r25, 7
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <_ZN14HardwareSerial5beginEl+0x114>
    1530:	90 95       	com	r25
    1532:	81 95       	neg	r24
    1534:	9f 4f       	sbci	r25, 0xFF	; 255
    1536:	8c 17       	cp	r24, r28
    1538:	10 f5       	brcc	.+68     	; 0x157e <_ZN14HardwareSerial5beginEl+0x15c>
    *_ucsra = 1 << _u2x;
    153a:	d4 01       	movw	r26, r8
    153c:	18 96       	adiw	r26, 0x08	; 8
    153e:	ed 91       	ld	r30, X+
    1540:	fc 91       	ld	r31, X
    1542:	19 97       	sbiw	r26, 0x09	; 9
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	52 96       	adiw	r26, 0x12	; 18
    154a:	0c 90       	ld	r0, X
    154c:	02 c0       	rjmp	.+4      	; 0x1552 <_ZN14HardwareSerial5beginEl+0x130>
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	0a 94       	dec	r0
    1554:	e2 f7       	brpl	.-8      	; 0x154e <_ZN14HardwareSerial5beginEl+0x12c>
    1556:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1558:	60 e4       	ldi	r22, 0x40	; 64
    155a:	7b e4       	ldi	r23, 0x4B	; 75
    155c:	8c e4       	ldi	r24, 0x4C	; 76
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	a8 01       	movw	r20, r16
    1562:	97 01       	movw	r18, r14
    1564:	0e 94 06 0e 	call	0x1c0c	; 0x1c0c <__udivmodsi4>
    1568:	21 50       	subi	r18, 0x01	; 1
    156a:	30 40       	sbci	r19, 0x00	; 0
    156c:	40 40       	sbci	r20, 0x00	; 0
    156e:	50 40       	sbci	r21, 0x00	; 0
    1570:	56 95       	lsr	r21
    1572:	47 95       	ror	r20
    1574:	37 95       	ror	r19
    1576:	27 95       	ror	r18
    1578:	82 2f       	mov	r24, r18
    157a:	23 2f       	mov	r18, r19
    157c:	08 c0       	rjmp	.+16     	; 0x158e <_ZN14HardwareSerial5beginEl+0x16c>
  } else {
    *_ucsra = 0;
    157e:	d4 01       	movw	r26, r8
    1580:	18 96       	adiw	r26, 0x08	; 8
    1582:	ed 91       	ld	r30, X+
    1584:	fc 91       	ld	r31, X
    1586:	19 97       	sbiw	r26, 0x09	; 9
    1588:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    158a:	8a 2d       	mov	r24, r10
    158c:	2b 2d       	mov	r18, r11
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    158e:	d4 01       	movw	r26, r8
    1590:	14 96       	adiw	r26, 0x04	; 4
    1592:	ed 91       	ld	r30, X+
    1594:	fc 91       	ld	r31, X
    1596:	15 97       	sbiw	r26, 0x05	; 5
    1598:	20 83       	st	Z, r18
  *_ubrrl = baud_setting;
    159a:	16 96       	adiw	r26, 0x06	; 6
    159c:	ed 91       	ld	r30, X+
    159e:	fc 91       	ld	r31, X
    15a0:	17 97       	sbiw	r26, 0x07	; 7
    15a2:	80 83       	st	Z, r24

  sbi(*_ucsrb, _rxen);
    15a4:	1a 96       	adiw	r26, 0x0a	; 10
    15a6:	ed 91       	ld	r30, X+
    15a8:	fc 91       	ld	r31, X
    15aa:	1b 97       	sbiw	r26, 0x0b	; 11
    15ac:	20 81       	ld	r18, Z
    15ae:	41 e0       	ldi	r20, 0x01	; 1
    15b0:	50 e0       	ldi	r21, 0x00	; 0
    15b2:	ca 01       	movw	r24, r20
    15b4:	1e 96       	adiw	r26, 0x0e	; 14
    15b6:	0c 90       	ld	r0, X
    15b8:	1e 97       	sbiw	r26, 0x0e	; 14
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <_ZN14HardwareSerial5beginEl+0x19e>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <_ZN14HardwareSerial5beginEl+0x19a>
    15c4:	28 2b       	or	r18, r24
    15c6:	20 83       	st	Z, r18
  sbi(*_ucsrb, _txen);
    15c8:	1a 96       	adiw	r26, 0x0a	; 10
    15ca:	ed 91       	ld	r30, X+
    15cc:	fc 91       	ld	r31, X
    15ce:	1b 97       	sbiw	r26, 0x0b	; 11
    15d0:	20 81       	ld	r18, Z
    15d2:	ca 01       	movw	r24, r20
    15d4:	1f 96       	adiw	r26, 0x0f	; 15
    15d6:	0c 90       	ld	r0, X
    15d8:	1f 97       	sbiw	r26, 0x0f	; 15
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <_ZN14HardwareSerial5beginEl+0x1be>
    15dc:	88 0f       	add	r24, r24
    15de:	99 1f       	adc	r25, r25
    15e0:	0a 94       	dec	r0
    15e2:	e2 f7       	brpl	.-8      	; 0x15dc <_ZN14HardwareSerial5beginEl+0x1ba>
    15e4:	28 2b       	or	r18, r24
    15e6:	20 83       	st	Z, r18
  sbi(*_ucsrb, _rxcie);
    15e8:	1a 96       	adiw	r26, 0x0a	; 10
    15ea:	ed 91       	ld	r30, X+
    15ec:	fc 91       	ld	r31, X
    15ee:	1b 97       	sbiw	r26, 0x0b	; 11
    15f0:	80 81       	ld	r24, Z
    15f2:	50 96       	adiw	r26, 0x10	; 16
    15f4:	0c 90       	ld	r0, X
    15f6:	02 c0       	rjmp	.+4      	; 0x15fc <_ZN14HardwareSerial5beginEl+0x1da>
    15f8:	44 0f       	add	r20, r20
    15fa:	55 1f       	adc	r21, r21
    15fc:	0a 94       	dec	r0
    15fe:	e2 f7       	brpl	.-8      	; 0x15f8 <_ZN14HardwareSerial5beginEl+0x1d6>
    1600:	84 2b       	or	r24, r20
    1602:	80 83       	st	Z, r24
}
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	1f 91       	pop	r17
    160a:	0f 91       	pop	r16
    160c:	ff 90       	pop	r15
    160e:	ef 90       	pop	r14
    1610:	df 90       	pop	r13
    1612:	cf 90       	pop	r12
    1614:	bf 90       	pop	r11
    1616:	af 90       	pop	r10
    1618:	9f 90       	pop	r9
    161a:	8f 90       	pop	r8
    161c:	08 95       	ret

0000161e <_ZN14HardwareSerial9availableEv>:

uint8_t HardwareSerial::available(void)
{
  return (RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
    161e:	dc 01       	movw	r26, r24
    1620:	12 96       	adiw	r26, 0x02	; 2
    1622:	ed 91       	ld	r30, X+
    1624:	fc 91       	ld	r31, X
    1626:	13 97       	sbiw	r26, 0x03	; 3
    1628:	e0 58       	subi	r30, 0x80	; 128
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	81 91       	ld	r24, Z+
    162e:	91 91       	ld	r25, Z+
    1630:	80 58       	subi	r24, 0x80	; 128
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	20 81       	ld	r18, Z
    1636:	31 81       	ldd	r19, Z+1	; 0x01
    1638:	82 1b       	sub	r24, r18
    163a:	93 0b       	sbc	r25, r19
    163c:	60 e8       	ldi	r22, 0x80	; 128
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__divmodhi4>
}
    1644:	08 95       	ret

00001646 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    164a:	dc 01       	movw	r26, r24
    164c:	12 96       	adiw	r26, 0x02	; 2
    164e:	ed 91       	ld	r30, X+
    1650:	fc 91       	ld	r31, X
    1652:	13 97       	sbiw	r26, 0x03	; 3
    1654:	ef 01       	movw	r28, r30
    1656:	ce 57       	subi	r28, 0x7E	; 126
    1658:	df 4f       	sbci	r29, 0xFF	; 255
    165a:	48 81       	ld	r20, Y
    165c:	59 81       	ldd	r21, Y+1	; 0x01
    165e:	e0 58       	subi	r30, 0x80	; 128
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	80 81       	ld	r24, Z
    1664:	91 81       	ldd	r25, Z+1	; 0x01
    1666:	e0 58       	subi	r30, 0x80	; 128
    1668:	f0 40       	sbci	r31, 0x00	; 0
    166a:	84 17       	cp	r24, r20
    166c:	95 07       	cpc	r25, r21
    166e:	19 f4       	brne	.+6      	; 0x1676 <_ZN14HardwareSerial4readEv+0x30>
    1670:	2f ef       	ldi	r18, 0xFF	; 255
    1672:	3f ef       	ldi	r19, 0xFF	; 255
    1674:	0c c0       	rjmp	.+24     	; 0x168e <_ZN14HardwareSerial4readEv+0x48>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1676:	e4 0f       	add	r30, r20
    1678:	f5 1f       	adc	r31, r21
    167a:	20 81       	ld	r18, Z
    _rx_buffer->tail = (_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
    167c:	ca 01       	movw	r24, r20
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	60 e8       	ldi	r22, 0x80	; 128
    1682:	70 e0       	ldi	r23, 0x00	; 0
    1684:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <__divmodhi4>
    1688:	99 83       	std	Y+1, r25	; 0x01
    168a:	88 83       	st	Y, r24
    return c;
    168c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
    168e:	c9 01       	movw	r24, r18
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	08 95       	ret

00001696 <_ZN14HardwareSerial5flushEv>:
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
    1696:	dc 01       	movw	r26, r24
    1698:	12 96       	adiw	r26, 0x02	; 2
    169a:	ed 91       	ld	r30, X+
    169c:	fc 91       	ld	r31, X
    169e:	13 97       	sbiw	r26, 0x03	; 3
    16a0:	ee 57       	subi	r30, 0x7E	; 126
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	92 93       	st	-Z, r25
    16aa:	82 93       	st	-Z, r24
}
    16ac:	08 95       	ret

000016ae <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
    16ae:	fc 01       	movw	r30, r24
{
  while (!((*_ucsra) & (1 << _udre)))
    16b0:	a0 85       	ldd	r26, Z+8	; 0x08
    16b2:	b1 85       	ldd	r27, Z+9	; 0x09
    16b4:	21 89       	ldd	r18, Z+17	; 0x11
    16b6:	8c 91       	ld	r24, X
    16b8:	90 e0       	ldi	r25, 0x00	; 0
    16ba:	02 2e       	mov	r0, r18
    16bc:	02 c0       	rjmp	.+4      	; 0x16c2 <_ZN14HardwareSerial5writeEh+0x14>
    16be:	95 95       	asr	r25
    16c0:	87 95       	ror	r24
    16c2:	0a 94       	dec	r0
    16c4:	e2 f7       	brpl	.-8      	; 0x16be <_ZN14HardwareSerial5writeEh+0x10>
    16c6:	80 ff       	sbrs	r24, 0
    16c8:	f6 cf       	rjmp	.-20     	; 0x16b6 <_ZN14HardwareSerial5writeEh+0x8>
    ;

  *_udr = c;
    16ca:	04 84       	ldd	r0, Z+12	; 0x0c
    16cc:	f5 85       	ldd	r31, Z+13	; 0x0d
    16ce:	e0 2d       	mov	r30, r0
    16d0:	60 83       	st	Z, r22
}
    16d2:	08 95       	ret

000016d4 <_GLOBAL__I_rx_buffer>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
    16d4:	8e e8       	ldi	r24, 0x8E	; 142
    16d6:	92 e0       	ldi	r25, 0x02	; 2
    16d8:	90 93 19 03 	sts	0x0319, r25
    16dc:	80 93 18 03 	sts	0x0318, r24
{
  _rx_buffer = rx_buffer;
    16e0:	84 e9       	ldi	r24, 0x94	; 148
    16e2:	92 e0       	ldi	r25, 0x02	; 2
    16e4:	90 93 1b 03 	sts	0x031B, r25
    16e8:	80 93 1a 03 	sts	0x031A, r24
  _ubrrh = ubrrh;
    16ec:	85 ec       	ldi	r24, 0xC5	; 197
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	90 93 1d 03 	sts	0x031D, r25
    16f4:	80 93 1c 03 	sts	0x031C, r24
  _ubrrl = ubrrl;
    16f8:	84 ec       	ldi	r24, 0xC4	; 196
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	90 93 1f 03 	sts	0x031F, r25
    1700:	80 93 1e 03 	sts	0x031E, r24
  _ucsra = ucsra;
    1704:	80 ec       	ldi	r24, 0xC0	; 192
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	90 93 21 03 	sts	0x0321, r25
    170c:	80 93 20 03 	sts	0x0320, r24
  _ucsrb = ucsrb;
    1710:	81 ec       	ldi	r24, 0xC1	; 193
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	90 93 23 03 	sts	0x0323, r25
    1718:	80 93 22 03 	sts	0x0322, r24
  _udr = udr;
    171c:	86 ec       	ldi	r24, 0xC6	; 198
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	90 93 25 03 	sts	0x0325, r25
    1724:	80 93 24 03 	sts	0x0324, r24
  _rxen = rxen;
    1728:	84 e0       	ldi	r24, 0x04	; 4
    172a:	80 93 26 03 	sts	0x0326, r24
  _txen = txen;
    172e:	83 e0       	ldi	r24, 0x03	; 3
    1730:	80 93 27 03 	sts	0x0327, r24
  _rxcie = rxcie;
    1734:	87 e0       	ldi	r24, 0x07	; 7
    1736:	80 93 28 03 	sts	0x0328, r24
  _udre = udre;
    173a:	85 e0       	ldi	r24, 0x05	; 5
    173c:	80 93 29 03 	sts	0x0329, r24
  _u2x = u2x;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	80 93 2a 03 	sts	0x032A, r24
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(__AVR_ATmega8__)
HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#else
HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
    1746:	08 95       	ret

00001748 <__cxa_guard_acquire>:
//!
#include <stdlib.h> 
#include "cpp_hack.h"


int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    1748:	fc 01       	movw	r30, r24
    174a:	20 e0       	ldi	r18, 0x00	; 0
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	88 23       	and	r24, r24
    1752:	11 f4       	brne	.+4      	; 0x1758 <__cxa_guard_acquire+0x10>
    1754:	21 e0       	ldi	r18, 0x01	; 1
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	c9 01       	movw	r24, r18
    175a:	08 95       	ret

0000175c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    175c:	fc 01       	movw	r30, r24
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	80 83       	st	Z, r24
    1762:	08 95       	ret

00001764 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    1764:	08 95       	ret

00001766 <__cxa_pure_virtual>:
    1766:	08 95       	ret

00001768 <adc_set_ref>:
//***************************************************

void adc_set_ref(uint8_t ref)
{
	//bits 7 and 6 select the refrence voltage.
	ADMUX = (ADMUX & 0x3F) | (ref << 6);	
    1768:	ec e7       	ldi	r30, 0x7C	; 124
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	90 81       	ld	r25, Z
    176e:	82 95       	swap	r24
    1770:	88 0f       	add	r24, r24
    1772:	88 0f       	add	r24, r24
    1774:	80 7c       	andi	r24, 0xC0	; 192
    1776:	9f 73       	andi	r25, 0x3F	; 63
    1778:	98 2b       	or	r25, r24
    177a:	90 83       	st	Z, r25
}
    177c:	08 95       	ret

0000177e <adc_set_ch>:

void adc_set_ch(uint8_t ch)
{
	//bits 4 downto 0 are used to select channel.
	ADMUX = (ADMUX & 0xE0) | (0x1F & ch);	
    177e:	ec e7       	ldi	r30, 0x7C	; 124
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	90 81       	ld	r25, Z
    1784:	8f 71       	andi	r24, 0x1F	; 31
    1786:	90 7e       	andi	r25, 0xE0	; 224
    1788:	89 2b       	or	r24, r25
    178a:	80 83       	st	Z, r24
}
    178c:	08 95       	ret

0000178e <adc_get_sample_cnt>:
uint32_t adc_get_sample_cnt()
{
	uint8_t oldSREG;
	uint32_t temp;

	oldSREG = SREG;
    178e:	8f b7       	in	r24, 0x3f	; 63
	cli();	//disable interrupts while copying the ADC data
    1790:	f8 94       	cli
	
	temp = gSample_cnt;
    1792:	20 91 86 03 	lds	r18, 0x0386
    1796:	30 91 87 03 	lds	r19, 0x0387
    179a:	40 91 88 03 	lds	r20, 0x0388
    179e:	50 91 89 03 	lds	r21, 0x0389
		
	// reenable interrupts.
	SREG = oldSREG;
    17a2:	8f bf       	out	0x3f, r24	; 63

	return temp;
}
    17a4:	b9 01       	movw	r22, r18
    17a6:	ca 01       	movw	r24, r20
    17a8:	08 95       	ret

000017aa <adc_initialize>:
void adc_initialize( )
{
	uint8_t i;
	uint8_t high, low;
	 
	gSample_cnt = 0;
    17aa:	10 92 86 03 	sts	0x0386, r1
    17ae:	10 92 87 03 	sts	0x0387, r1
    17b2:	10 92 88 03 	sts	0x0388, r1
    17b6:	10 92 89 03 	sts	0x0389, r1
	//Clock prescale to 128.
	ADCSRA |= _BV(ADPS2);	//Clock Prescale
    17ba:	80 91 7a 00 	lds	r24, 0x007A
    17be:	84 60       	ori	r24, 0x04	; 4
    17c0:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= _BV(ADPS1);	//Clock Prescale
    17c4:	80 91 7a 00 	lds	r24, 0x007A
    17c8:	82 60       	ori	r24, 0x02	; 2
    17ca:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= _BV(ADPS0);	//Clock Prescale
    17ce:	80 91 7a 00 	lds	r24, 0x007A
    17d2:	81 60       	ori	r24, 0x01	; 1
    17d4:	80 93 7a 00 	sts	0x007A, r24
//***************************************************

void adc_set_ref(uint8_t ref)
{
	//bits 7 and 6 select the refrence voltage.
	ADMUX = (ADMUX & 0x3F) | (ref << 6);	
    17d8:	80 91 7c 00 	lds	r24, 0x007C
    17dc:	8f 73       	andi	r24, 0x3F	; 63
    17de:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA |= _BV(ADPS1);	//Clock Prescale
	ADCSRA |= _BV(ADPS0);	//Clock Prescale

	//Set the reference voltage. For Pushpak Quadrotor board the refrence has to be VREF.
	adc_set_ref(ADC_REF_EXT);
	ADCSRA |= _BV(ADEN);	//Enable ADC.
    17e2:	80 91 7a 00 	lds	r24, 0x007A
    17e6:	80 68       	ori	r24, 0x80	; 128
    17e8:	80 93 7a 00 	sts	0x007A, r24
}

void adc_set_ch(uint8_t ch)
{
	//bits 4 downto 0 are used to select channel.
	ADMUX = (ADMUX & 0xE0) | (0x1F & ch);	
    17ec:	80 91 7c 00 	lds	r24, 0x007C
    17f0:	80 7e       	andi	r24, 0xE0	; 224
    17f2:	8e 61       	ori	r24, 0x1E	; 30
    17f4:	80 93 7c 00 	sts	0x007C, r24
    17f8:	88 ee       	ldi	r24, 0xE8	; 232
    17fa:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    17fc:	24 ef       	ldi	r18, 0xF4	; 244
    17fe:	31 e0       	ldi	r19, 0x01	; 1
    1800:	f9 01       	movw	r30, r18
    1802:	31 97       	sbiw	r30, 0x01	; 1
    1804:	f1 f7       	brne	.-4      	; 0x1802 <adc_initialize+0x58>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1806:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1808:	d9 f7       	brne	.-10     	; 0x1800 <adc_initialize+0x56>
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	40 e0       	ldi	r20, 0x00	; 0
    180e:	50 e0       	ldi	r21, 0x00	; 0
	adc_raw_ref_val = 0;	

	//Sample and accumalate the internal refernce voltage
	for(i=0;i<MAX_ACCUMLATION_COUNT;++i)
	{	
		ADCSRA |= _BV(ADSC);	//start conversion
    1810:	80 91 7a 00 	lds	r24, 0x007A
    1814:	80 64       	ori	r24, 0x40	; 64
    1816:	80 93 7a 00 	sts	0x007A, r24
		
		// ADSC is cleared when the conversion finishes
		while (bit_is_set(ADCSRA, ADSC));
    181a:	80 91 7a 00 	lds	r24, 0x007A
    181e:	86 fd       	sbrc	r24, 6
    1820:	fc cf       	rjmp	.-8      	; 0x181a <adc_initialize+0x70>
	
		low = ADCL;
    1822:	90 91 78 00 	lds	r25, 0x0078
		high = ADCH;
    1826:	80 91 79 00 	lds	r24, 0x0079
		
		adc_raw_ref_val = (high << 8 ) | low;
    182a:	38 2f       	mov	r19, r24
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	89 2f       	mov	r24, r25
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	82 2b       	or	r24, r18
    1834:	93 2b       	or	r25, r19
		adc_ref_val = adc_ref_val + adc_raw_ref_val;
    1836:	48 0f       	add	r20, r24
    1838:	59 1f       	adc	r21, r25

	adc_ref_val = 0;
	adc_raw_ref_val = 0;	

	//Sample and accumalate the internal refernce voltage
	for(i=0;i<MAX_ACCUMLATION_COUNT;++i)
    183a:	6f 5f       	subi	r22, 0xFF	; 255
    183c:	60 31       	cpi	r22, 0x10	; 16
    183e:	41 f7       	brne	.-48     	; 0x1810 <adc_initialize+0x66>
		adc_ref_val = adc_ref_val + adc_raw_ref_val;
	}
	
	//Accumlation increase bit count, but actual increase in ADC bit resolution is lesser.
	//Drop the addition bits
	adc_raw_ref_val = adc_raw_ref_val >> LSB_DROP_CNT;
    1840:	96 95       	lsr	r25
    1842:	87 95       	ror	r24
    1844:	96 95       	lsr	r25
    1846:	87 95       	ror	r24
    1848:	90 93 85 03 	sts	0x0385, r25
    184c:	80 93 84 03 	sts	0x0384, r24
	adc_ref_val = adc_ref_val >> LSB_DROP_CNT; 
    1850:	56 95       	lsr	r21
    1852:	47 95       	ror	r20
    1854:	56 95       	lsr	r21
    1856:	47 95       	ror	r20
    1858:	50 93 63 03 	sts	0x0363, r21
    185c:	40 93 62 03 	sts	0x0362, r20
	
/**********************************************************************************************/
//Initialize for Autotrigger functionality.

	//disable it while setting up the Auto Trigger functionality
	ADCSRA &= ~(_BV(ADEN));
    1860:	80 91 7a 00 	lds	r24, 0x007A
    1864:	8f 77       	andi	r24, 0x7F	; 127
    1866:	80 93 7a 00 	sts	0x007A, r24
//***************************************************

void adc_set_ref(uint8_t ref)
{
	//bits 7 and 6 select the refrence voltage.
	ADMUX = (ADMUX & 0x3F) | (ref << 6);	
    186a:	80 91 7c 00 	lds	r24, 0x007C
    186e:	8f 73       	andi	r24, 0x3F	; 63
    1870:	80 93 7c 00 	sts	0x007C, r24
}

void adc_set_ch(uint8_t ch)
{
	//bits 4 downto 0 are used to select channel.
	ADMUX = (ADMUX & 0xE0) | (0x1F & ch);	
    1874:	80 91 7c 00 	lds	r24, 0x007C
    1878:	80 7e       	andi	r24, 0xE0	; 224
    187a:	80 93 7c 00 	sts	0x007C, r24
	
	//Set the reference voltage. For Pushpak Quadrotor board the refrence has to be VREF.
	adc_set_ref(ADC_REF_EXT);
	adc_set_ch(0);

	ADCSRA |= _BV(ADATE);	//Enable Auto Trigger
    187e:	80 91 7a 00 	lds	r24, 0x007A
    1882:	80 62       	ori	r24, 0x20	; 32
    1884:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= _BV(ADIE);	//Enable Interrupt
    1888:	80 91 7a 00 	lds	r24, 0x007A
    188c:	88 60       	ori	r24, 0x08	; 8
    188e:	80 93 7a 00 	sts	0x007A, r24
	ADCSRA |= _BV(ADEN);	//Enable ADC.
    1892:	80 91 7a 00 	lds	r24, 0x007A
    1896:	80 68       	ori	r24, 0x80	; 128
    1898:	80 93 7a 00 	sts	0x007A, r24
    189c:	80 e0       	ldi	r24, 0x00	; 0
    189e:	90 e0       	ldi	r25, 0x00	; 0
		
	//initialize all the variables
	for(i = 0; i<NUM_ADC_CH; i++)
	{
		gADC_acc[i] = 0;
    18a0:	fc 01       	movw	r30, r24
    18a2:	ee 0f       	add	r30, r30
    18a4:	ff 1f       	adc	r31, r31
    18a6:	df 01       	movw	r26, r30
    18a8:	a2 5d       	subi	r26, 0xD2	; 210
    18aa:	bc 4f       	sbci	r27, 0xFC	; 252
    18ac:	11 96       	adiw	r26, 0x01	; 1
    18ae:	1c 92       	st	X, r1
    18b0:	1e 92       	st	-X, r1
		gADC_sample[i] = 0;
    18b2:	e2 5c       	subi	r30, 0xC2	; 194
    18b4:	fc 4f       	sbci	r31, 0xFC	; 252
    18b6:	11 82       	std	Z+1, r1	; 0x01
    18b8:	10 82       	st	Z, r1
    18ba:	01 96       	adiw	r24, 0x01	; 1
	ADCSRA |= _BV(ADATE);	//Enable Auto Trigger
	ADCSRA |= _BV(ADIE);	//Enable Interrupt
	ADCSRA |= _BV(ADEN);	//Enable ADC.
		
	//initialize all the variables
	for(i = 0; i<NUM_ADC_CH; i++)
    18bc:	88 30       	cpi	r24, 0x08	; 8
    18be:	91 05       	cpc	r25, r1
    18c0:	79 f7       	brne	.-34     	; 0x18a0 <adc_initialize+0xf6>
    18c2:	88 ee       	ldi	r24, 0xE8	; 232
    18c4:	93 e0       	ldi	r25, 0x03	; 3
    18c6:	24 ef       	ldi	r18, 0xF4	; 244
    18c8:	31 e0       	ldi	r19, 0x01	; 1
    18ca:	f9 01       	movw	r30, r18
    18cc:	31 97       	sbiw	r30, 0x01	; 1
    18ce:	f1 f7       	brne	.-4      	; 0x18cc <adc_initialize+0x122>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    18d0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    18d2:	d9 f7       	brne	.-10     	; 0x18ca <adc_initialize+0x120>
		gADC_sample[i] = 0;
	}
	
	_delay_ms(100); //delay needed to let the voltages stablize.
			
	sei();			/* enable interrupts if they are by chance not enabled yet */
    18d4:	78 94       	sei

	//Start one conversion to set the ball rolling.
	ADCSRA |= _BV(ADSC);
    18d6:	80 91 7a 00 	lds	r24, 0x007A
    18da:	80 64       	ori	r24, 0x40	; 64
    18dc:	80 93 7a 00 	sts	0x007A, r24
 	while(gADC_ch != 1)
 	{
 		--gADC_ch;
 	}
	
	gADC_ch = 1;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	80 93 2d 03 	sts	0x032D, r24
}

void adc_set_ch(uint8_t ch)
{
	//bits 4 downto 0 are used to select channel.
	ADMUX = (ADMUX & 0xE0) | (0x1F & ch);	
    18e6:	80 91 7c 00 	lds	r24, 0x007C
    18ea:	80 7e       	andi	r24, 0xE0	; 224
    18ec:	81 60       	ori	r24, 0x01	; 1
    18ee:	80 93 7c 00 	sts	0x007C, r24
 		--gADC_ch;
 	}
	
	gADC_ch = 1;
	adc_set_ch(gADC_ch);
}
    18f2:	08 95       	ret

000018f4 <adc_is_data_ready>:

//Function returns 1 when a new sample is ready. A new sample is ready once the given number of samples are
///accumlated.
uint8_t adc_is_data_ready()
{
	return gADC_new_output;
    18f4:	80 91 2b 03 	lds	r24, 0x032B
}
    18f8:	08 95       	ret

000018fa <adc_get_new_samples>:
void adc_get_new_samples(void)
{
	uint8_t i;
	uint8_t oldSREG;
		
	while(gADC_new_output == 0);
    18fa:	80 91 2b 03 	lds	r24, 0x032B
    18fe:	88 23       	and	r24, r24
    1900:	e1 f3       	breq	.-8      	; 0x18fa <adc_get_new_samples>
	gADC_new_output = 0; //clear the flag
    1902:	10 92 2b 03 	sts	0x032B, r1
		
	oldSREG = SREG;
    1906:	4f b7       	in	r20, 0x3f	; 63
	cli();	//disable interrupts while copying the ADC data
    1908:	f8 94       	cli
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
	
	for(i=0; i<NUM_ADC_CH; i++)
	{
		gADC_output[i] = gADC_sample[i] >> 2;	//Divide by 4 as the LSB 2 bits contain no useful information/
    190e:	d9 01       	movw	r26, r18
    1910:	aa 0f       	add	r26, r26
    1912:	bb 1f       	adc	r27, r27
    1914:	fd 01       	movw	r30, r26
    1916:	e2 5c       	subi	r30, 0xC2	; 194
    1918:	fc 4f       	sbci	r31, 0xFC	; 252
    191a:	80 81       	ld	r24, Z
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	96 95       	lsr	r25
    1920:	87 95       	ror	r24
    1922:	96 95       	lsr	r25
    1924:	87 95       	ror	r24
    1926:	fd 01       	movw	r30, r26
    1928:	ee 5a       	subi	r30, 0xAE	; 174
    192a:	fc 4f       	sbci	r31, 0xFC	; 252
    192c:	91 83       	std	Z+1, r25	; 0x01
    192e:	80 83       	st	Z, r24
		gADC_curr_output[i] = gADC_curr[i] >> 2; //test code
    1930:	fd 01       	movw	r30, r26
    1932:	ec 59       	subi	r30, 0x9C	; 156
    1934:	fc 4f       	sbci	r31, 0xFC	; 252
    1936:	80 81       	ld	r24, Z
    1938:	91 81       	ldd	r25, Z+1	; 0x01
    193a:	96 95       	lsr	r25
    193c:	87 95       	ror	r24
    193e:	96 95       	lsr	r25
    1940:	87 95       	ror	r24
    1942:	ac 58       	subi	r26, 0x8C	; 140
    1944:	bc 4f       	sbci	r27, 0xFC	; 252
    1946:	11 96       	adiw	r26, 0x01	; 1
    1948:	9c 93       	st	X, r25
    194a:	8e 93       	st	-X, r24
    194c:	2f 5f       	subi	r18, 0xFF	; 255
    194e:	3f 4f       	sbci	r19, 0xFF	; 255
	gADC_new_output = 0; //clear the flag
		
	oldSREG = SREG;
	cli();	//disable interrupts while copying the ADC data
	
	for(i=0; i<NUM_ADC_CH; i++)
    1950:	28 30       	cpi	r18, 0x08	; 8
    1952:	31 05       	cpc	r19, r1
    1954:	e1 f6       	brne	.-72     	; 0x190e <adc_get_new_samples+0x14>
		gADC_output[i] = gADC_sample[i] >> 2;	//Divide by 4 as the LSB 2 bits contain no useful information/
		gADC_curr_output[i] = gADC_curr[i] >> 2; //test code
	}
	
	// reenable interrupts.
	SREG = oldSREG;
    1956:	4f bf       	out	0x3f, r20	; 63
}
    1958:	08 95       	ret

0000195a <__vector_24>:


///ADC conversion complete ISR.
ISR(ADC_vect)
{
    195a:	1f 92       	push	r1
    195c:	0f 92       	push	r0
    195e:	0f b6       	in	r0, 0x3f	; 63
    1960:	0f 92       	push	r0
    1962:	11 24       	eor	r1, r1
    1964:	2f 93       	push	r18
    1966:	3f 93       	push	r19
    1968:	4f 93       	push	r20
    196a:	5f 93       	push	r21
    196c:	6f 93       	push	r22
    196e:	7f 93       	push	r23
    1970:	8f 93       	push	r24
    1972:	9f 93       	push	r25
    1974:	af 93       	push	r26
    1976:	bf 93       	push	r27
    1978:	ef 93       	push	r30
    197a:	ff 93       	push	r31
	uint8_t i;
	static uint8_t gADC_acc_cnt = 0;	//Accumlation count	
	
//	PORTB |= _BV(PIN5);	//Drive LED to measure the ISR execution time.
	
	low = ADCL;		// we have to read ADCL first; doing so locks both ADCL and ADCH until ADCH is read. 
    197c:	80 91 78 00 	lds	r24, 0x0078
	high = ADCH;	
    1980:	60 91 79 00 	lds	r22, 0x0079

	//Accumalate the current ADC sample.
	//In normal operation if the gADC_ch == 2, currently ADC is sampling channel 2 and result from channel 1 is available
	//read the ADC value and accumlate/average.		
	if(gADC_ch == 0)
    1984:	70 91 2d 03 	lds	r23, 0x032D
    1988:	48 2f       	mov	r20, r24
    198a:	50 e0       	ldi	r21, 0x00	; 0
    198c:	77 23       	and	r23, r23
    198e:	d9 f4       	brne	.+54     	; 0x19c6 <__vector_24+0x6c>
	{//special condition, when Ch == 0, then channel count has wrapped around hence the result present is from that of highest channel number.
		gADC_acc[NUM_ADC_CH - 1] += (high << 8) | low; 
    1990:	80 91 3c 03 	lds	r24, 0x033C
    1994:	90 91 3d 03 	lds	r25, 0x033D
    1998:	36 2f       	mov	r19, r22
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	24 2b       	or	r18, r20
    199e:	35 2b       	or	r19, r21
    19a0:	82 0f       	add	r24, r18
    19a2:	93 1f       	adc	r25, r19
    19a4:	90 93 3d 03 	sts	0x033D, r25
    19a8:	80 93 3c 03 	sts	0x033C, r24
		gADC_curr[NUM_ADC_CH - 1] = (high << 8) | low; 	   
    19ac:	30 93 73 03 	sts	0x0373, r19
    19b0:	20 93 72 03 	sts	0x0372, r18

	//Check if the number of accumlated samples has reached the max accumlation count.
	//This "if" statement could have been merged with above "if". Keeping them seperate for clarity.
    if(gADC_ch == 0)
    {//finished cycling through all the channels increment accumlation count
    	++gADC_acc_cnt;
    19b4:	80 91 2c 03 	lds	r24, 0x032C
    19b8:	8f 5f       	subi	r24, 0xFF	; 255
    19ba:	80 93 2c 03 	sts	0x032C, r24
		if(gADC_acc_cnt == MAX_ACCUMLATION_COUNT)
    19be:	80 31       	cpi	r24, 0x10	; 16
    19c0:	09 f0       	breq	.+2      	; 0x19c4 <__vector_24+0x6a>
    19c2:	49 c0       	rjmp	.+146    	; 0x1a56 <__vector_24+0xfc>
    19c4:	19 c0       	rjmp	.+50     	; 0x19f8 <__vector_24+0x9e>
		gADC_acc[NUM_ADC_CH - 1] += (high << 8) | low; 
		gADC_curr[NUM_ADC_CH - 1] = (high << 8) | low; 	   
	}
	else
	{
		gADC_acc[gADC_ch-1] += (high << 8) | low;
    19c6:	e7 2f       	mov	r30, r23
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	31 97       	sbiw	r30, 0x01	; 1
    19cc:	ee 0f       	add	r30, r30
    19ce:	ff 1f       	adc	r31, r31
    19d0:	df 01       	movw	r26, r30
    19d2:	a2 5d       	subi	r26, 0xD2	; 210
    19d4:	bc 4f       	sbci	r27, 0xFC	; 252
    19d6:	2d 91       	ld	r18, X+
    19d8:	3c 91       	ld	r19, X
    19da:	11 97       	sbiw	r26, 0x01	; 1
    19dc:	96 2f       	mov	r25, r22
    19de:	80 e0       	ldi	r24, 0x00	; 0
    19e0:	84 2b       	or	r24, r20
    19e2:	95 2b       	or	r25, r21
    19e4:	28 0f       	add	r18, r24
    19e6:	39 1f       	adc	r19, r25
    19e8:	11 96       	adiw	r26, 0x01	; 1
    19ea:	3c 93       	st	X, r19
    19ec:	2e 93       	st	-X, r18
		gADC_curr[gADC_ch-1] = (high << 8) | low;  	   			
    19ee:	ec 59       	subi	r30, 0x9C	; 156
    19f0:	fc 4f       	sbci	r31, 0xFC	; 252
    19f2:	91 83       	std	Z+1, r25	; 0x01
    19f4:	80 83       	st	Z, r24
    19f6:	2f c0       	rjmp	.+94     	; 0x1a56 <__vector_24+0xfc>
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
		if(gADC_acc_cnt == MAX_ACCUMLATION_COUNT)
		{//Finished accumlating max number of samples, copy the value into output result array
			
			for(i = 0; i<NUM_ADC_CH; i++)
			{
				gADC_sample[i] = gADC_acc[i];
    19fc:	f9 01       	movw	r30, r18
    19fe:	ee 0f       	add	r30, r30
    1a00:	ff 1f       	adc	r31, r31
    1a02:	df 01       	movw	r26, r30
    1a04:	a2 5d       	subi	r26, 0xD2	; 210
    1a06:	bc 4f       	sbci	r27, 0xFC	; 252
    1a08:	8d 91       	ld	r24, X+
    1a0a:	9c 91       	ld	r25, X
    1a0c:	11 97       	sbiw	r26, 0x01	; 1
    1a0e:	e2 5c       	subi	r30, 0xC2	; 194
    1a10:	fc 4f       	sbci	r31, 0xFC	; 252
    1a12:	91 83       	std	Z+1, r25	; 0x01
    1a14:	80 83       	st	Z, r24
				gADC_acc[i] = 0;		//reset the accumlator register
    1a16:	11 96       	adiw	r26, 0x01	; 1
    1a18:	1c 92       	st	X, r1
    1a1a:	1e 92       	st	-X, r1
    1a1c:	2f 5f       	subi	r18, 0xFF	; 255
    1a1e:	3f 4f       	sbci	r19, 0xFF	; 255
    {//finished cycling through all the channels increment accumlation count
    	++gADC_acc_cnt;
		if(gADC_acc_cnt == MAX_ACCUMLATION_COUNT)
		{//Finished accumlating max number of samples, copy the value into output result array
			
			for(i = 0; i<NUM_ADC_CH; i++)
    1a20:	28 30       	cpi	r18, 0x08	; 8
    1a22:	31 05       	cpc	r19, r1
    1a24:	59 f7       	brne	.-42     	; 0x19fc <__vector_24+0xa2>
			{
				gADC_sample[i] = gADC_acc[i];
				gADC_acc[i] = 0;		//reset the accumlator register
			}
			
			gADC_acc_cnt = 0;
    1a26:	10 92 2c 03 	sts	0x032C, r1
			gADC_new_output = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	80 93 2b 03 	sts	0x032B, r24
			++gSample_cnt;
    1a30:	80 91 86 03 	lds	r24, 0x0386
    1a34:	90 91 87 03 	lds	r25, 0x0387
    1a38:	a0 91 88 03 	lds	r26, 0x0388
    1a3c:	b0 91 89 03 	lds	r27, 0x0389
    1a40:	01 96       	adiw	r24, 0x01	; 1
    1a42:	a1 1d       	adc	r26, r1
    1a44:	b1 1d       	adc	r27, r1
    1a46:	80 93 86 03 	sts	0x0386, r24
    1a4a:	90 93 87 03 	sts	0x0387, r25
    1a4e:	a0 93 88 03 	sts	0x0388, r26
    1a52:	b0 93 89 03 	sts	0x0389, r27
		}    
    }
   
    ++gADC_ch;
    1a56:	87 2f       	mov	r24, r23
    1a58:	8f 5f       	subi	r24, 0xFF	; 255
    1a5a:	80 93 2d 03 	sts	0x032D, r24
    if(gADC_ch == NUM_ADC_CH)
    1a5e:	88 30       	cpi	r24, 0x08	; 8
    1a60:	11 f4       	brne	.+4      	; 0x1a66 <__vector_24+0x10c>
    {//finished cycling through all the channels
	   	gADC_ch=0; //cycle back to first channel
    1a62:	10 92 2d 03 	sts	0x032D, r1
}

void adc_set_ch(uint8_t ch)
{
	//bits 4 downto 0 are used to select channel.
	ADMUX = (ADMUX & 0xE0) | (0x1F & ch);	
    1a66:	90 91 7c 00 	lds	r25, 0x007C
    1a6a:	80 91 2d 03 	lds	r24, 0x032D
    1a6e:	8f 71       	andi	r24, 0x1F	; 31
    1a70:	90 7e       	andi	r25, 0xE0	; 224
    1a72:	89 2b       	or	r24, r25
    1a74:	80 93 7c 00 	sts	0x007C, r24
	//Write to channel mux register at the end so that the required 1 ADC clock time delay after start of conversion is met.
    //select the next channel     
	adc_set_ch(gADC_ch);

//	PORTB &= (~_BV(PIN5));	//Drive LED to measure the ISR execution time.
}
    1a78:	ff 91       	pop	r31
    1a7a:	ef 91       	pop	r30
    1a7c:	bf 91       	pop	r27
    1a7e:	af 91       	pop	r26
    1a80:	9f 91       	pop	r25
    1a82:	8f 91       	pop	r24
    1a84:	7f 91       	pop	r23
    1a86:	6f 91       	pop	r22
    1a88:	5f 91       	pop	r21
    1a8a:	4f 91       	pop	r20
    1a8c:	3f 91       	pop	r19
    1a8e:	2f 91       	pop	r18
    1a90:	0f 90       	pop	r0
    1a92:	0f be       	out	0x3f, r0	; 63
    1a94:	0f 90       	pop	r0
    1a96:	1f 90       	pop	r1
    1a98:	18 95       	reti

00001a9a <_Z4loopv>:
	//Interrupts are enabled in the 
	//sei(); //enable interrupts

}

void loop() 
    1a9a:	1f 93       	push	r17
    1a9c:	10 e0       	ldi	r17, 0x00	; 0
	
	
//	//use this for loop to reduce the data rate at which data is sent to pc.
	for(i=0;i<50;++i)
	{
		adc_get_new_samples();
    1a9e:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <adc_get_new_samples>
{
	uint8_t	i;
	
	
//	//use this for loop to reduce the data rate at which data is sent to pc.
	for(i=0;i<50;++i)
    1aa2:	1f 5f       	subi	r17, 0xFF	; 255
    1aa4:	12 33       	cpi	r17, 0x32	; 50
    1aa6:	d9 f7       	brne	.-10     	; 0x1a9e <_Z4loopv+0x4>
	{
		adc_get_new_samples();
	}

	GPIO_TOGGLE(LED); //LED is on Port D, Pin 4
    1aa8:	8b b1       	in	r24, 0x0b	; 11
    1aaa:	90 e1       	ldi	r25, 0x10	; 16
    1aac:	89 27       	eor	r24, r25
    1aae:	8b b9       	out	0x0b, r24	; 11
// 	}
// 	Serial.println();
///////////////////////////////////////////////////////////////	
	
	//Send data in binary format.
	msg.length = sizeof(msg_type1) - 4;
    1ab0:	90 93 6f 02 	sts	0x026F, r25
	msg.sys_time = adc_get_sample_cnt();
    1ab4:	0e 94 c7 0b 	call	0x178e	; 0x178e <adc_get_sample_cnt>
    1ab8:	60 93 70 02 	sts	0x0270, r22
    1abc:	70 93 71 02 	sts	0x0271, r23
    1ac0:	80 93 72 02 	sts	0x0272, r24
    1ac4:	90 93 73 02 	sts	0x0273, r25
	msg.acc_x = gADC_output[0];
    1ac8:	80 91 52 03 	lds	r24, 0x0352
    1acc:	90 91 53 03 	lds	r25, 0x0353
    1ad0:	90 93 75 02 	sts	0x0275, r25
    1ad4:	80 93 74 02 	sts	0x0274, r24
	msg.acc_y = gADC_output[1];
    1ad8:	80 91 54 03 	lds	r24, 0x0354
    1adc:	90 91 55 03 	lds	r25, 0x0355
    1ae0:	90 93 77 02 	sts	0x0277, r25
    1ae4:	80 93 76 02 	sts	0x0276, r24
	msg.acc_z = gADC_output[2];
    1ae8:	80 91 56 03 	lds	r24, 0x0356
    1aec:	90 91 57 03 	lds	r25, 0x0357
    1af0:	90 93 79 02 	sts	0x0279, r25
    1af4:	80 93 78 02 	sts	0x0278, r24
	msg.gyro_x = gADC_output[3];
    1af8:	80 91 58 03 	lds	r24, 0x0358
    1afc:	90 91 59 03 	lds	r25, 0x0359
    1b00:	90 93 7b 02 	sts	0x027B, r25
    1b04:	80 93 7a 02 	sts	0x027A, r24
	msg.gyro_y = gADC_output[4];
    1b08:	80 91 5a 03 	lds	r24, 0x035A
    1b0c:	90 91 5b 03 	lds	r25, 0x035B
    1b10:	90 93 7d 02 	sts	0x027D, r25
    1b14:	80 93 7c 02 	sts	0x027C, r24
	msg.gyro_z = gADC_output[5];
    1b18:	80 91 5c 03 	lds	r24, 0x035C
    1b1c:	90 91 5d 03 	lds	r25, 0x035D
    1b20:	90 93 7f 02 	sts	0x027F, r25
    1b24:	80 93 7e 02 	sts	0x027E, r24
	
	Serial.write((uint8_t*)&msg, sizeof(msg_type1));
    1b28:	88 e1       	ldi	r24, 0x18	; 24
    1b2a:	93 e0       	ldi	r25, 0x03	; 3
    1b2c:	6c e6       	ldi	r22, 0x6C	; 108
    1b2e:	72 e0       	ldi	r23, 0x02	; 2
    1b30:	44 e1       	ldi	r20, 0x14	; 20
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	0e 94 7d 07 	call	0xefa	; 0xefa <_ZN5Print5writeEPKhj>
//End of User code section.
/********************************************************************************/	
}
    1b38:	1f 91       	pop	r17
    1b3a:	08 95       	ret

00001b3c <_Z5setupv>:
	int16_t	gyro_z;
};

struct msg_type1 msg = {0xABCD, 1}; 

void setup() 
    1b3c:	0f 93       	push	r16
    1b3e:	1f 93       	push	r17
{

	Serial.begin(115200); 
    1b40:	08 e1       	ldi	r16, 0x18	; 24
    1b42:	13 e0       	ldi	r17, 0x03	; 3
    1b44:	c8 01       	movw	r24, r16
    1b46:	40 e0       	ldi	r20, 0x00	; 0
    1b48:	52 ec       	ldi	r21, 0xC2	; 194
    1b4a:	61 e0       	ldi	r22, 0x01	; 1
    1b4c:	70 e0       	ldi	r23, 0x00	; 0
    1b4e:	0e 94 11 0a 	call	0x1422	; 0x1422 <_ZN14HardwareSerial5beginEl>
	Serial.println("Pushpak Quadrotor........");
    1b52:	c8 01       	movw	r24, r16
    1b54:	62 e0       	ldi	r22, 0x02	; 2
    1b56:	71 e0       	ldi	r23, 0x01	; 1
    1b58:	0e 94 db 07 	call	0xfb6	; 0xfb6 <_ZN5Print7printlnEPKc>
	
	GPIO_OUTPUT(LED);
    1b5c:	54 9a       	sbi	0x0a, 4	; 10

	adc_initialize(); //Initialize adc at the last as this funtion enable interrupts.
    1b5e:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <adc_initialize>
	
	Serial.print("Raw ADC count for 1.1V ref = ");
    1b62:	c8 01       	movw	r24, r16
    1b64:	6c e1       	ldi	r22, 0x1C	; 28
    1b66:	71 e0       	ldi	r23, 0x01	; 1
    1b68:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN5Print5printEPKc>
	Serial.println(adc_raw_ref_val);
    1b6c:	60 91 84 03 	lds	r22, 0x0384
    1b70:	70 91 85 03 	lds	r23, 0x0385
    1b74:	c8 01       	movw	r24, r16
    1b76:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN5Print7printlnEj>
	Serial.print("15x accumalated ADC count for 1.1V ref = ");
    1b7a:	c8 01       	movw	r24, r16
    1b7c:	6a e3       	ldi	r22, 0x3A	; 58
    1b7e:	71 e0       	ldi	r23, 0x01	; 1
    1b80:	0e 94 ac 07 	call	0xf58	; 0xf58 <_ZN5Print5printEPKc>
	Serial.println(adc_ref_val);
    1b84:	60 91 62 03 	lds	r22, 0x0362
    1b88:	70 91 63 03 	lds	r23, 0x0363
    1b8c:	c8 01       	movw	r24, r16
    1b8e:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN5Print7printlnEj>
	
	Serial.println();
    1b92:	c8 01       	movw	r24, r16
    1b94:	0e 94 b4 07 	call	0xf68	; 0xf68 <_ZN5Print7printlnEv>
	
	//Interrupts are enabled in the 
	//sei(); //enable interrupts

}
    1b98:	1f 91       	pop	r17
    1b9a:	0f 91       	pop	r16
    1b9c:	08 95       	ret

00001b9e <main>:
}


int main(void)
{
	setup();
    1b9e:	0e 94 9e 0d 	call	0x1b3c	; 0x1b3c <_Z5setupv>
    
	for (;;)
	{
		loop();
    1ba2:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <_Z4loopv>
    1ba6:	fd cf       	rjmp	.-6      	; 0x1ba2 <main+0x4>

00001ba8 <__mulsi3>:
    1ba8:	62 9f       	mul	r22, r18
    1baa:	d0 01       	movw	r26, r0
    1bac:	73 9f       	mul	r23, r19
    1bae:	f0 01       	movw	r30, r0
    1bb0:	82 9f       	mul	r24, r18
    1bb2:	e0 0d       	add	r30, r0
    1bb4:	f1 1d       	adc	r31, r1
    1bb6:	64 9f       	mul	r22, r20
    1bb8:	e0 0d       	add	r30, r0
    1bba:	f1 1d       	adc	r31, r1
    1bbc:	92 9f       	mul	r25, r18
    1bbe:	f0 0d       	add	r31, r0
    1bc0:	83 9f       	mul	r24, r19
    1bc2:	f0 0d       	add	r31, r0
    1bc4:	74 9f       	mul	r23, r20
    1bc6:	f0 0d       	add	r31, r0
    1bc8:	65 9f       	mul	r22, r21
    1bca:	f0 0d       	add	r31, r0
    1bcc:	99 27       	eor	r25, r25
    1bce:	72 9f       	mul	r23, r18
    1bd0:	b0 0d       	add	r27, r0
    1bd2:	e1 1d       	adc	r30, r1
    1bd4:	f9 1f       	adc	r31, r25
    1bd6:	63 9f       	mul	r22, r19
    1bd8:	b0 0d       	add	r27, r0
    1bda:	e1 1d       	adc	r30, r1
    1bdc:	f9 1f       	adc	r31, r25
    1bde:	bd 01       	movw	r22, r26
    1be0:	cf 01       	movw	r24, r30
    1be2:	11 24       	eor	r1, r1
    1be4:	08 95       	ret

00001be6 <__divmodhi4>:
    1be6:	97 fb       	bst	r25, 7
    1be8:	09 2e       	mov	r0, r25
    1bea:	07 26       	eor	r0, r23
    1bec:	0a d0       	rcall	.+20     	; 0x1c02 <__divmodhi4_neg1>
    1bee:	77 fd       	sbrc	r23, 7
    1bf0:	04 d0       	rcall	.+8      	; 0x1bfa <__divmodhi4_neg2>
    1bf2:	2e d0       	rcall	.+92     	; 0x1c50 <__udivmodhi4>
    1bf4:	06 d0       	rcall	.+12     	; 0x1c02 <__divmodhi4_neg1>
    1bf6:	00 20       	and	r0, r0
    1bf8:	1a f4       	brpl	.+6      	; 0x1c00 <__divmodhi4_exit>

00001bfa <__divmodhi4_neg2>:
    1bfa:	70 95       	com	r23
    1bfc:	61 95       	neg	r22
    1bfe:	7f 4f       	sbci	r23, 0xFF	; 255

00001c00 <__divmodhi4_exit>:
    1c00:	08 95       	ret

00001c02 <__divmodhi4_neg1>:
    1c02:	f6 f7       	brtc	.-4      	; 0x1c00 <__divmodhi4_exit>
    1c04:	90 95       	com	r25
    1c06:	81 95       	neg	r24
    1c08:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0a:	08 95       	ret

00001c0c <__udivmodsi4>:
    1c0c:	a1 e2       	ldi	r26, 0x21	; 33
    1c0e:	1a 2e       	mov	r1, r26
    1c10:	aa 1b       	sub	r26, r26
    1c12:	bb 1b       	sub	r27, r27
    1c14:	fd 01       	movw	r30, r26
    1c16:	0d c0       	rjmp	.+26     	; 0x1c32 <__udivmodsi4_ep>

00001c18 <__udivmodsi4_loop>:
    1c18:	aa 1f       	adc	r26, r26
    1c1a:	bb 1f       	adc	r27, r27
    1c1c:	ee 1f       	adc	r30, r30
    1c1e:	ff 1f       	adc	r31, r31
    1c20:	a2 17       	cp	r26, r18
    1c22:	b3 07       	cpc	r27, r19
    1c24:	e4 07       	cpc	r30, r20
    1c26:	f5 07       	cpc	r31, r21
    1c28:	20 f0       	brcs	.+8      	; 0x1c32 <__udivmodsi4_ep>
    1c2a:	a2 1b       	sub	r26, r18
    1c2c:	b3 0b       	sbc	r27, r19
    1c2e:	e4 0b       	sbc	r30, r20
    1c30:	f5 0b       	sbc	r31, r21

00001c32 <__udivmodsi4_ep>:
    1c32:	66 1f       	adc	r22, r22
    1c34:	77 1f       	adc	r23, r23
    1c36:	88 1f       	adc	r24, r24
    1c38:	99 1f       	adc	r25, r25
    1c3a:	1a 94       	dec	r1
    1c3c:	69 f7       	brne	.-38     	; 0x1c18 <__udivmodsi4_loop>
    1c3e:	60 95       	com	r22
    1c40:	70 95       	com	r23
    1c42:	80 95       	com	r24
    1c44:	90 95       	com	r25
    1c46:	9b 01       	movw	r18, r22
    1c48:	ac 01       	movw	r20, r24
    1c4a:	bd 01       	movw	r22, r26
    1c4c:	cf 01       	movw	r24, r30
    1c4e:	08 95       	ret

00001c50 <__udivmodhi4>:
    1c50:	aa 1b       	sub	r26, r26
    1c52:	bb 1b       	sub	r27, r27
    1c54:	51 e1       	ldi	r21, 0x11	; 17
    1c56:	07 c0       	rjmp	.+14     	; 0x1c66 <__udivmodhi4_ep>

00001c58 <__udivmodhi4_loop>:
    1c58:	aa 1f       	adc	r26, r26
    1c5a:	bb 1f       	adc	r27, r27
    1c5c:	a6 17       	cp	r26, r22
    1c5e:	b7 07       	cpc	r27, r23
    1c60:	10 f0       	brcs	.+4      	; 0x1c66 <__udivmodhi4_ep>
    1c62:	a6 1b       	sub	r26, r22
    1c64:	b7 0b       	sbc	r27, r23

00001c66 <__udivmodhi4_ep>:
    1c66:	88 1f       	adc	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	5a 95       	dec	r21
    1c6c:	a9 f7       	brne	.-22     	; 0x1c58 <__udivmodhi4_loop>
    1c6e:	80 95       	com	r24
    1c70:	90 95       	com	r25
    1c72:	bc 01       	movw	r22, r24
    1c74:	cd 01       	movw	r24, r26
    1c76:	08 95       	ret

00001c78 <__prologue_saves__>:
    1c78:	2f 92       	push	r2
    1c7a:	3f 92       	push	r3
    1c7c:	4f 92       	push	r4
    1c7e:	5f 92       	push	r5
    1c80:	6f 92       	push	r6
    1c82:	7f 92       	push	r7
    1c84:	8f 92       	push	r8
    1c86:	9f 92       	push	r9
    1c88:	af 92       	push	r10
    1c8a:	bf 92       	push	r11
    1c8c:	cf 92       	push	r12
    1c8e:	df 92       	push	r13
    1c90:	ef 92       	push	r14
    1c92:	ff 92       	push	r15
    1c94:	0f 93       	push	r16
    1c96:	1f 93       	push	r17
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	cd b7       	in	r28, 0x3d	; 61
    1c9e:	de b7       	in	r29, 0x3e	; 62
    1ca0:	ca 1b       	sub	r28, r26
    1ca2:	db 0b       	sbc	r29, r27
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	09 94       	ijmp

00001cb0 <__epilogue_restores__>:
    1cb0:	2a 88       	ldd	r2, Y+18	; 0x12
    1cb2:	39 88       	ldd	r3, Y+17	; 0x11
    1cb4:	48 88       	ldd	r4, Y+16	; 0x10
    1cb6:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cb8:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cba:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cbc:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cbe:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cc0:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cc2:	b9 84       	ldd	r11, Y+9	; 0x09
    1cc4:	c8 84       	ldd	r12, Y+8	; 0x08
    1cc6:	df 80       	ldd	r13, Y+7	; 0x07
    1cc8:	ee 80       	ldd	r14, Y+6	; 0x06
    1cca:	fd 80       	ldd	r15, Y+5	; 0x05
    1ccc:	0c 81       	ldd	r16, Y+4	; 0x04
    1cce:	1b 81       	ldd	r17, Y+3	; 0x03
    1cd0:	aa 81       	ldd	r26, Y+2	; 0x02
    1cd2:	b9 81       	ldd	r27, Y+1	; 0x01
    1cd4:	ce 0f       	add	r28, r30
    1cd6:	d1 1d       	adc	r29, r1
    1cd8:	0f b6       	in	r0, 0x3f	; 63
    1cda:	f8 94       	cli
    1cdc:	de bf       	out	0x3e, r29	; 62
    1cde:	0f be       	out	0x3f, r0	; 63
    1ce0:	cd bf       	out	0x3d, r28	; 61
    1ce2:	ed 01       	movw	r28, r26
    1ce4:	08 95       	ret

00001ce6 <__tablejump2__>:
    1ce6:	ee 0f       	add	r30, r30
    1ce8:	ff 1f       	adc	r31, r31

00001cea <__tablejump__>:
    1cea:	05 90       	lpm	r0, Z+
    1cec:	f4 91       	lpm	r31, Z+
    1cee:	e0 2d       	mov	r30, r0
    1cf0:	09 94       	ijmp

00001cf2 <_exit>:
    1cf2:	f8 94       	cli

00001cf4 <__stop_program>:
    1cf4:	ff cf       	rjmp	.-2      	; 0x1cf4 <__stop_program>
